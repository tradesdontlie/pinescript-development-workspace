/// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © jnovak1963zas

//@version=5
indicator('TBR Fractal Black', overlay = true, max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500)


// { -------- START INPUTS --------

General = 'General'
ShowADRSubcycles = true
ShowODRSubcycles = true
ShowRDRSubcycles = true

ShowOnlyHTF1 = false
ShowConfirmationCandles = true
NumberOfHistoricalDrsToShow = input.int(12, title = 'Number of Historical OBs To Show', minval = 0, inline = '1', group = General)
ShowOpenLine = false
ShowCloseLine = false
ShowCloseBox = true
ShowIdrBox = false

ExtendOCBoxForwardSessions = input.int(0, title="Extend OC Box Forward (Sessions)", minval=0, group = General, tooltip="Extends the Time-Based Order Block (OC Box) by N of its own session durations. Default: 0 (no extension). Example: 3 extends it by three times its original length.")
ExtendBaseCandleForwardSessions = input.int(0, title="Extend Base Candle Forward (Durations)", minval=0, group = General, tooltip="Extends the Base Candle by N of its own original durations. Default: 0 (no extension). Example: 3 extends it by three times its original length.")

FractalVisibility_Group = 'Fractal Visibility'
ShowAlphaFractal    = input.bool(true, "Alpha", group = FractalVisibility_Group, inline="FV1")
ShowBravoFractal    = input.bool(false, "Bravo", group = FractalVisibility_Group, inline="FV1")
ShowDeltaFractal    = input.bool(true, "Delta", group = FractalVisibility_Group, inline="FV2")
ShowEchoFractal     = input.bool(true, "Echo", group = FractalVisibility_Group, inline="FV2")
ShowFoxtrotFractal  = input.bool(true, "Foxtrot", group = FractalVisibility_Group, inline="FV3")
ShowGolfFractal     = input.bool(true, "Golf", group = FractalVisibility_Group, inline="FV3")
ShowHotelFractal    = input.bool(false, "Hotel", group = FractalVisibility_Group, inline="FV4")
ShowJulietFractal   = input.bool(true, "Juliet", group = FractalVisibility_Group, inline="FV4")
ShowIndiaFractal    = input.bool(true, "India", group = FractalVisibility_Group, inline="FV5")

Unmitigated_Group = 'Mitigation Box'
ShowUnmitigatedBox = true
ShowUnmitigatedBoxLabel = true
CalculateMitigation = true
DeleteMitigatedBoxes = true
ShowFractalEq = true
RemoveMitigatedFractalEq = true



DeleteOldCycles = false
ShowOnlyLastN = 3
var bool ShowHTF1 = false
var bool ShowHTF2 = false

if ShowOnlyHTF1
    ShowHTF1 := ShowJulietFractal
    ShowHTF2 := false
    ShowHTF2
else
    ShowHTF1 := ShowJulietFractal
    ShowHTF2 := false
    ShowHTF2


MatrixProjectionSettings = 'Matrix Projection Settings'
ManualRangeProjection = false
RangeStyle = 'OC'
ShowAllMatrixProjections = false

DrMatrixProjections = 'DR Matrix Projections'
ShowADRDrProjection = false
ShowODRDrProjection = false
ShowRDRDrProjection = false


SessionMatrixProjections = 'Session Matrix Projections'
ShowADRQ1DrProjection = false
ShowADRQ2DrProjection = false
ShowADRQ3DrProjection = false
ShowADRQ4DrProjection = false

ShowODRQ1DrProjection = false
ShowODRQ2DrProjection = false

ShowRDRQ1DrProjection = false
ShowRDRQ2DrProjection = false
ShowRDRQ3DrProjection = false
ShowRDRQ4DrProjection = false

ShowHtfMatrixProjections = 'HTF Matrix Projections'
var bool ShowHTF1DrProjection = false
var bool ShowHTF2DrProjection = false



SessionShowLines = 'DR Show Lines'
var bool ShowFractalEqLine = false

if ShowUnmitigatedBox and ShowFractalEq
    ShowFractalEqLine := true
    ShowFractalEqLine


ShowDrLine = false
ShowIdrLine = false
ShowIdrMidpoint = false

FractalEqSettings = 'Fractal EQ Line'
ExtendFractalLinesInRealtime = false
var bool DeleteMitigated = false
AllignFractalsRight = false

if RemoveMitigatedFractalEq
    DeleteMitigated := true
    DeleteMitigated


DrClusters = 'DR Clusters'
ShowClusters = false
ShowTuesdayCluster = false
ShowBiggestCluster = false
NumberOfClustersBack = 5

ConfirmationCandles = 'Confirmation Candles'
ShowConfCandleBullBear = false
ColorConfirmationCandleDirection = false
ExtendConfirmationCandle = false



SessionColors = 'Time Based OrderBlocks'


DrLineColor = color.new(color.gray, 0)
IdrLineColor = color.new(color.gray, 20)
IdrMidpointLineColor = color.new(color.gray, 20)

FractalEqBoxUpColor = input.color(color.new(color.navy, 90), title = 'OB Box Up', inline = '1', group = SessionColors)
FractalEqBoxUpBorderColor = input.color(color.new(color.navy, 30), title = 'Border', inline = '1', group = SessionColors)
FractalEqBoxDownColor = input.color(color.new(color.maroon, 90), title = 'OB Box Down', inline = '2', group = SessionColors)
FractalEqBoxDownBorderColor = input.color(color.new(color.maroon, 30), title = 'Border', inline = '2', group = SessionColors)
HighLineColor = input.color(color.new(color.maroon, 30), title = 'High Line', inline = '3', group = SessionColors)
LowLineColor = input.color(color.new(color.navy, 30), title = 'Low Line', inline = '3', group = SessionColors)
OpenEqLineStyleString = input.string(defval = 'solid', title = 'Style', options = ['solid', 'dotted', 'dashed'], inline = '3', group = SessionColors)
CloseEqLineStyleString = OpenEqLineStyleString
FractalEqBoxBorderSize = input.int(1, title = 'OB Border Size', minval = 0, inline = '1', group = SessionColors)
UnmitigatedBoxColor = input.color(color.new(color.gray, 90), title = 'Unmitigated Box Color', inline = '4', group = SessionColors)
UnmitigatedBoxBorderColor = input.color(color.new(color.gray, 100), title = 'Unmitigated Box Border', inline = '4', group = SessionColors)
FractalEqLineColor = input.color(color.new(color.purple, 0), title = ' EQ Line Color', inline = '5', group = SessionColors)
MitigatedFractalEqLineColor = input.color(color.new(color.gray, 0), title = 'Mitigated EQ Line Color', inline = '5', group = SessionColors)
UnmitigatedBoxBorderSize = 1


IdrBoxUpColor = color.new(color.green, 90)
IdrBoxUpBorderColor = color.new(color.green, 50)
IdrBoxDownColor = color.new(color.red, 90)
IdrBoxDownBorderColor = color.new(color.red, 50)
MatrixProjectionColors = color.new(color.gray, 0)

ClusterColors = 'Cluster Colors'
ClusterHighColor = color.new(color.blue, 90)
ClusterHighBorderColor = color.new(color.blue, 50)
ClusterLowColor = color.new(color.red, 90)
ClusterLowBorderColor = color.new(color.red, 50)
TuesdayClusterHighColor = color.new(color.aqua, 80)
TuesdayClusterHighBorderColor = color.new(color.blue, 50)
TuesdayClusterLowColor = color.new(color.aqua, 80)
TuesdayClusterLowBorderColor = color.new(color.blue, 50)
LargestClusterHighColor = color.new(color.orange, 80)
LargestClusterHighBorderColor = color.new(color.red, 50)
LargestClusterLowColor = color.new(color.orange, 80)
LargestClusterLowBorderColor = color.new(color.red, 50)


DrLineStyles = 'Line Styles'
FractalEqLineStyleString = 'dotted'
DrLineLineStyleString = 'solid'
IdrLineLineStyleString = 'solid'
IdrMidpointLineStyleString = 'dotted'


var bool ShowADRQ1Dr = ShowAlphaFractal
var bool ShowADRDr = ShowBravoFractal
var bool ShowADRQ2Dr = ShowDeltaFractal
var bool ShowADRQ3Dr = ShowEchoFractal
var bool ShowADRQ4Dr = ShowFoxtrotFractal

var bool ShowODRQ1Dr = ShowGolfFractal
var bool ShowODRDr = ShowHotelFractal
var bool ShowHTF1Dr = ShowJulietFractal
var bool ShowRDRQ3Dr = ShowIndiaFractal

var bool ShowODRQ2Dr = false
var bool ShowRDRQ1Dr = false
var bool ShowRDRDr = false
var bool ShowRDRQ2Dr = false
var bool ShowHTF2Dr = false
var bool ShowRDRQ4Dr = false


// START Confirmation Candle Hidden Parameters
TransparentCollorFill = 90
TransparentColorBorder = 50

ConfrimationCandle_Group = 'Base Candle Colors'
var color BoxBull_Fill_Color = input.color(color.new(color.navy, 90), title = 'Bull Fill', inline = '5', group = ConfrimationCandle_Group)
var color BoxBull_Border_Color = input.color(color.new(color.navy, 30), title = 'Bull Border', inline = '5', group = ConfrimationCandle_Group)
var color BoxBear_Fill_Color = input.color(color.new(color.maroon, 90), title = 'Bear Fill', inline = '6', group = ConfrimationCandle_Group)
var color BoxBear_Border_Color = input.color(color.new(color.maroon, 30), title = 'Bear Border', inline = '6', group = ConfrimationCandle_Group)
var int BoxInversion_Border_Size = 1
var color BoxInversion_Fill_Color = color.new(color.purple, 90)
var color BoxInversion_Border_Color = color.new(color.purple, 30)
var bool ShowClosingCandle = input.bool(defval = true, title = 'Show Closing Candle', inline = '8', group = ConfrimationCandle_Group)


// var int BoxPotential_Border_Size = 1
// var color BoxPotential_Fill_Color = input.color(color.new(color.gray, 90), title="Potential Fill", inline = "7", group = ConfrimationCandle_Group)
// var color BoxPotential_Border_Color = input.color(color.new(color.gray, 0), title="Potential Fill", inline = "7", group = ConfrimationCandle_Group)	


ConfirmationShapeBullColor = color.new(color.green, 0)
ConfirmationShapeBearColor = color.new(color.red, 0)


// END Confirmation Candle Hidden Parameters

// } -------- END INPUTS --------


// { -------- START OBJECTS--------
type LineWithLabel
	line Line
	label Label
	// } -------- END OBJECTS--------


// { -------- START VARIABLES --------
var string Timezone = na
var bool DST = false
int HourNY = hour(time, 'America/New_York')
int HourUTC = hour(time, 'UTC')
DST := HourUTC - HourUTC == 5 ? false : true
DST := HourUTC - HourNY == 5 or HourUTC - HourNY == -19 ? false : HourUTC - HourNY == 4 or HourUTC - HourNY == -20 ? true : false
if DST
    Timezone := 'UTC-4:00'
    Timezone
else
    Timezone := 'UTC-5:00'
    Timezone


var string CurrentTicker = na
var bool NeedsOffset = false
var int TickerTimeOffset = na
var int TickerHourOffset = na

if str.startswith(syminfo.ticker, 'CL')
    CurrentTicker := 'CL'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'SPGSCI')
    CurrentTicker := 'SPGSCI'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'GC')
    CurrentTicker := 'GC'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'NG')
    CurrentTicker := 'NG'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'SI')
    CurrentTicker := 'SI'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'HG')
    CurrentTicker := 'HG'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'PL')
    CurrentTicker := 'PL'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ZW')
    CurrentTicker := 'ZW'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ZS')
    CurrentTicker := 'ZS'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ZC')
    CurrentTicker := 'ZC'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'HE')
    CurrentTicker := 'HE'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'LE')
    CurrentTicker := 'LE'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'GF')
    CurrentTicker := 'GF'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ZB')
    CurrentTicker := 'ZB'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ZN')
    CurrentTicker := 'ZN'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ZF')
    CurrentTicker := 'ZF'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'NQ')
    CurrentTicker := 'NQ'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'ES')
    CurrentTicker := 'ES'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'YM')
    CurrentTicker := 'YM'
    CurrentTicker
else if str.startswith(syminfo.ticker, 'RTY')
    CurrentTicker := 'RTY'
    CurrentTicker
else if str.contains(syminfo.ticker, 'BTC')
    CurrentTicker := 'BTC'
    CurrentTicker
else if str.contains(syminfo.ticker, 'ETH')
    CurrentTicker := 'ETH'
    CurrentTicker

if CurrentTicker == 'CL' or CurrentTicker == 'SPGSCI' or CurrentTicker == 'GC' or CurrentTicker == 'NG' or CurrentTicker == 'SI' or CurrentTicker == 'HG' or CurrentTicker == 'PL' or CurrentTicker == 'HE' or CurrentTicker == 'LE' or CurrentTicker == 'GF'
    NeedsOffset := false
    TickerHourOffset := 0
    TickerTimeOffset := 0
    TickerTimeOffset
else if CurrentTicker == 'BTC' or CurrentTicker == 'ETH'
    NeedsOffset := true
    TickerHourOffset := 4
    TickerTimeOffset := 4 * 3600000
    TickerTimeOffset
else
    NeedsOffset := true
    TickerHourOffset := 1
    TickerTimeOffset := 3600000
    TickerTimeOffset


var array<float> ArrayOfMatrixRanges = array.from(1.66, 2.5, 3.6, 4.66, 7.14, 9.34, 14.28, 18.68, -0.66, -1.5, -2.6, -3.66, -6.14, -8.34, -13.28, -17.68)


type SessionObject
	line Open
	line Close
	line FractalEq
	line DrHigh
	line DrLow
	line IdrHigh
	line IdrLow
	line IdrMidpoint
	box CloseBox
	box IdrBox
	float EqValue
	string BelowAbove
	int OpenTime
	box ConfirmationCandle
	line ConfirmationCandleMidline
	float ConfirmationMidpointValue
	string ConfirmationDirection
	float ConfirmationCandleHighValue
	float ConfirmationCandleLowValue
	float HighFractal
	float LowFractal
	int CycleEndTimeFractal
	bool SessionConfirmedFractal
	string ConfirmationDirectionDr
	string SessionConfirmationFractal
	string AfterSessionState
	box ClusterHigh
	box ClusterLow
	line ClusterHighMidpoint
	line ClusterLowMidpoint
	float CloseHigh
	float CloseLow
	array<LineWithLabel> MatrixProjections
	box UnmitigatedBox
	float MaxHighLowValue
	string FractalEqDirection
	float FractalOpen
	float FractalClose
	bool FreshFractal
	string FractalEndPriceAboveBelow
	string SessionString
	bool FractalEqBoxMitigated

type SessionDataObject
	string SessionName          // New: Descriptive name for the session/fractal
	string SessionString        // e.g., '1645-1845' (Fractal Definition Range)
	string SessionConfirmation  // e.g., '1845-2115' (Cycle Confirmation Range)
	string SessionState
	float Open
	float High
	float Low
	float Close
	float CloseHigh
	float CloseLow
	int OpenTime
	int CloseTime
	string ConfirmedDirection
	bool FractalDrawn
	int CycleEndTime
	bool SessionConfirmed = false
	string ConfirmationDirection = na
	bool ShowMatrixProjections


// { -------- TIMED RANGES OVERVIEW --------
// This table outlines the named timed ranges used for fractal definitions and their corresponding cycle confirmation periods.
//
// Fractal Name         | Fractal Definition Range | Cycle Confirmation Range | Associated Input Flag
// ----------------------|--------------------------|--------------------------|-----------------------
// "Alpha Fractal"      | '1645-1845'              | '1845-2115'              | ShowADRQ1Dr
// "Bravo Fractal"      | '2115-2130'              | '2130-0000'              | ShowADRDr
// "Delta Fractal"      | '0000-0015'              | '0015-0245'              | ShowADRQ2Dr
// "Echo Fractal"       | '0245-0300'              | '0300-0545'              | ShowADRQ3Dr
// "Foxtrot Fractal"    | '0545-0600'              | '0600-0815'              | ShowADRQ4Dr
// "Golf Fractal"       | '0815-0845'              | '0845-1115'              | ShowODRQ1Dr
// "Hotel Fractal"      | '1115-1130'              | '1130-1400'              | ShowODRDr
// "Juliet Fractal"     | '1400-1415'              | '1415-1645'              | ShowHTF1Dr
// "India Fractal"      | '1220-1235'              | '1235-1445'              | ShowRDRQ3Dr
// } -------- END TIMED RANGES OVERVIEW --------

var int NumberOfSessionsToShow = 0
var array<SessionObject> ArrayOfFractalObjects = array.new<SessionObject>()
var array<SessionDataObject> ArrayOfSessionDataObjects = array.new<SessionDataObject>()

var array<SessionObject> ArrayOfClusterRdrObjects = array.new<SessionObject>()
// var SessionObject CurrentBiggestRdr = na

if barstate.isfirst
    // Alpha Cycle (Derived from Juliet Cycle Close 1645 to Alpha Fractal Close 1935; Alpha Cycle Close 2115)
    if ShowADRQ1Dr
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Alpha Fractal", '1645-1845', '1845-2115', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 21, 15), false, na, ShowADRQ1DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Bravo Cycle (Derived from Alpha Cycle Close 2115 to Bravo Fractal Close 2220; Bravo Cycle Close 0000)
    if ShowADRDr
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Bravo Fractal", '2115-2130', '2130-0000', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 0, 0), false, na, ShowADRDrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Delta Cycle (Derived from Bravo Cycle Close 0000 to Delta Fractal Close 0105; Delta Cycle Close 0245)
    if ShowADRQ2Dr
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Delta Fractal", '0000-0015', '0015-0245', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 2, 45), false, na, ShowADRQ2DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Echo Cycle (Derived from Delta Cycle Close 0245 to Echo Fractal Close 0355; Echo Cycle Close 0545)
    if ShowADRQ3Dr // Note: Re-using ShowADRQ3Dr for Echo timing
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Echo Fractal", '0245-0300', '0300-0545', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 5, 45), false, na, ShowADRQ3DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Foxtrot Cycle (Derived from Echo Cycle Close 0545 to Foxtrot Fractal Close 0650; Foxtrot Cycle Close 0815)
    if ShowADRQ4Dr // Note: Re-using ShowADRQ4Dr for Foxtrot timing
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Foxtrot Fractal", '0545-0600', '0600-0815', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 8, 15), false, na, ShowADRQ4DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Golf Cycle (Derived from Foxtrot Cycle Close 0815 to Golf Fractal Close 0935; Golf Cycle Close 1115)
    if ShowODRQ1Dr // Note: Re-using ShowODRQ1Dr for Golf timing
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Golf Fractal", '0815-0845', '0845-1115', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 11, 15), false, na, ShowODRQ1DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Hotel Cycle (Derived from Golf Cycle Close 1115 to Hotel Fractal Close 1220; Hotel Cycle Close 1400)
    if ShowODRDr // Note: Re-using ShowODRDr for Hotel timing
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Hotel Fractal", '1115-1130', '1130-1400', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 14, 0), false, na, ShowODRDrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow
    // Juliet Cycle (Derived from Hotel Cycle Close 1400 to Juliet Fractal Close 1505; Juliet Cycle Close 1645)
    if ShowHTF1Dr // Note: Re-using ShowHTF1Dr for Juliet timing
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("Juliet Fractal", '1400-1415', '1415-1645', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 16, 45), false, na, ShowHTF1DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow

    // Preserving RDRQ3 (India)
    if ShowRDRQ3Dr
        array.push(ArrayOfSessionDataObjects, SessionDataObject.new("India Fractal", '1220-1235', '1235-1445', 'NotInSession', na, na, na, na, na, na, na, na, na, false, timestamp(Timezone, year, month, dayofmonth, 14, 45), false, na, ShowRDRQ3DrProjection))
        NumberOfSessionsToShow := NumberOfSessionsToShow + 1
        NumberOfSessionsToShow

// The following original session definitions are effectively removed unless their Show...Dr flags were among the first 8 or RDRQ3:
// ShowODRQ2Dr (Original index 9)
// ShowRDRQ1Dr (Original index 10)
// ShowRDRDr (Original index 11)
// ShowRDRQ2Dr (Original index 12)
// ShowHTF2Dr (Original index 14) - Note: "Indias 1235" was handled by preserving RDRQ3. If HTF2 is also desired, it needs to be added back.
// ShowRDRQ4Dr (Original index 15)


if ShowAllMatrixProjections
    for i = 0 to array.size(ArrayOfSessionDataObjects) - 1 by 1
        CurrentObject = array.get(ArrayOfSessionDataObjects, i)
        CurrentObject.ShowMatrixProjections := true
        CurrentObject.ShowMatrixProjections

ONE_HOUR = 3600 * 1000
ONE_DAY = 24 * ONE_HOUR
ONE_WEEK = ONE_DAY * 7

// } -------- END VARIABLES --------


// { -------- START FUNCTIONS --------
CreateLineWithLabel(_LineX1, _LineY1, _LineX2, _Color, _Style, _Width, _Label) =>
    Line = line.new(_LineX1, _LineY1, _LineX2, _LineY1, xloc.bar_time, color = _Color, style = _Style, width = _Width)
    Label = label.new(_LineX2, _LineY1, _Label, xloc.bar_time, style = label.style_label_left, color = color.new(color.green, 100), textcolor = _Color, size = size.small)
    LineWithLabel.new(Line, Label)

session(_session) =>
    not na(time(timeframe.period, _session, Timezone))

IsSessionOver(_Session) =>
    inSess = not na(time(timeframe.period, _Session, Timezone))
    not inSess and inSess[1]

CalculatePoiMidpoint(_Open, _Close) =>
    OcDiffMid = math.abs(_Open - _Close) / 2
    if _Open > _Close
        _Close + OcDiffMid
    else
        _Open + OcDiffMid

FunctionLineStyle(_Style) =>
    switch _Style
        'dotted' => line.style_dotted
        'dashed' => line.style_dashed
        => line.style_solid

FractalEqLineStyle = FunctionLineStyle(FractalEqLineStyleString)
DrLineLineStyle = FunctionLineStyle(DrLineLineStyleString)
IdrLineLineStyle = FunctionLineStyle(IdrLineLineStyleString)
OpenEqLineStyle = FunctionLineStyle(OpenEqLineStyleString)
CloseEqLineStyle = FunctionLineStyle(CloseEqLineStyleString)
IdrMidpointLineStyle = FunctionLineStyle(IdrMidpointLineStyleString)


CreateNewSession(_OpenTime, _OpenPrice, _CloseTime, _ClosePrice, _CycleEndTime, _High, _Low, _CloseHigh, _CloseLow, _SessionConfirmation, _CurrentArtefact) =>
    line OpenLine = na
    line CloseLine = na
    line FractalEqLine = na
    line DrHighLine = na
    line DrLowLine = na
    line IdrHighLine = na
    line IdrLowLine = na
    line IdrMidpointLine = na
    box CloseBoxCurrent = na
    box IdrBoxCurrent = na
    box UnmitigatedBoxCurrent = na

    box ClusterHigh = na
    line ClusterHighMidpoint = na
    box ClusterLow = na
    line ClusterLowMidpoint = na



    CycleEnd = timestamp(Timezone, year, month, dayofmonth, hour(_CycleEndTime), minute(_CycleEndTime)) + TickerTimeOffset


    if ShowClusters
        if ShowTuesdayCluster and str.contains('Tue', str.format_time(time, 'E')) and _CurrentArtefact.SessionString == '0930-1030'
            ClusterHigh := box.new(_OpenTime, _High, CycleEnd, _CloseHigh, xloc = xloc.bar_time, border_color = TuesdayClusterHighBorderColor, bgcolor = TuesdayClusterHighColor, border_width = 1, text = 'Tue', text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = TuesdayClusterHighBorderColor)
            ClusterHighMidpoint := line.new(_OpenTime, _CloseHigh + (_High - _CloseHigh) / 2, CycleEnd, _CloseHigh + (_High - _CloseHigh) / 2, xloc.bar_time, color = TuesdayClusterHighBorderColor, style = line.style_dashed, width = 1)
            ClusterLow := box.new(_OpenTime, _Low, CycleEnd, _CloseLow, xloc = xloc.bar_time, border_color = TuesdayClusterLowBorderColor, bgcolor = TuesdayClusterLowColor, border_width = 1, text = 'Tue', text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = TuesdayClusterLowBorderColor)
            ClusterLowMidpoint := line.new(_OpenTime, _CloseLow + (_Low - _CloseLow) / 2, CycleEnd, _CloseLow + (_Low - _CloseLow) / 2, xloc.bar_time, color = TuesdayClusterLowBorderColor, style = line.style_dashed, width = 1)
            ClusterLowMidpoint
        else
            ClusterHigh := box.new(_OpenTime, _High, CycleEnd, _CloseHigh, xloc = xloc.bar_time, border_color = ClusterHighBorderColor, bgcolor = ClusterHighColor, border_width = 1, text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center)
            ClusterHighMidpoint := line.new(_OpenTime, _CloseHigh + (_High - _CloseHigh) / 2, CycleEnd, _CloseHigh + (_High - _CloseHigh) / 2, xloc.bar_time, color = ClusterHighBorderColor, style = line.style_dashed, width = 1)
            ClusterLow := box.new(_OpenTime, _Low, CycleEnd, _CloseLow, xloc = xloc.bar_time, border_color = ClusterLowBorderColor, bgcolor = ClusterLowColor, border_width = 1, text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center)
            ClusterLowMidpoint := line.new(_OpenTime, _CloseLow + (_Low - _CloseLow) / 2, CycleEnd, _CloseLow + (_Low - _CloseLow) / 2, xloc.bar_time, color = ClusterLowBorderColor, style = line.style_dashed, width = 1)
            ClusterLowMidpoint

    if ShowTuesdayCluster and not ShowClusters and str.contains('Tue', str.format_time(time, 'E')) and _CurrentArtefact.SessionString == '0930-1030'
        ClusterHigh := box.new(_OpenTime, _High, CycleEnd, _CloseHigh, xloc = xloc.bar_time, border_color = TuesdayClusterHighBorderColor, bgcolor = TuesdayClusterHighColor, border_width = 1, text = 'Tue', text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = TuesdayClusterHighBorderColor)
        ClusterHighMidpoint := line.new(_OpenTime, _CloseHigh + (_High - _CloseHigh) / 2, CycleEnd, _CloseHigh + (_High - _CloseHigh) / 2, xloc.bar_time, color = TuesdayClusterHighBorderColor, style = line.style_dashed, width = 1)
        ClusterLow := box.new(_OpenTime, _Low, CycleEnd, _CloseLow, xloc = xloc.bar_time, border_color = TuesdayClusterLowBorderColor, bgcolor = TuesdayClusterLowColor, border_width = 1, text = 'Tue', text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = TuesdayClusterLowBorderColor)
        ClusterLowMidpoint := line.new(_OpenTime, _CloseLow + (_Low - _CloseLow) / 2, CycleEnd, _CloseLow + (_Low - _CloseLow) / 2, xloc.bar_time, color = TuesdayClusterLowBorderColor, style = line.style_dashed, width = 1)
        ClusterLowMidpoint



    if _OpenTime > CycleEnd
        CycleEnd := CycleEnd + ONE_DAY
        CycleEnd
    else if CurrentTicker == 'BTC' or CurrentTicker == 'ETH'
        CycleEnd := CycleEnd - ONE_HOUR * 5
        CycleEnd

    color OpenColor = LowLineColor
    color CloseColor = HighLineColor

    if _OpenPrice > _ClosePrice
        OpenColor := HighLineColor
        CloseColor := LowLineColor
        CloseColor

    if ShowOpenLine
        OpenLine := line.new(_OpenTime, _OpenPrice, CycleEnd, _OpenPrice, xloc.bar_time, color = OpenColor, style = OpenEqLineStyle, width = 1)
        OpenLine
    if ShowCloseLine
        CloseLine := line.new(_OpenTime, _ClosePrice, CycleEnd, _ClosePrice, xloc.bar_time, color = CloseColor, style = CloseEqLineStyle, width = 1)
        CloseLine

    Eq = CalculatePoiMidpoint(_OpenPrice, _ClosePrice)
    if ShowFractalEqLine
        FractalEqLine := line.new(_OpenTime, Eq, _CloseTime, Eq, xloc.bar_time, color = FractalEqLineColor, style = FractalEqLineStyle, width = 1)
        FractalEqLine

    if ShowDrLine
        DrHighLine := line.new(_OpenTime, _High, CycleEnd, _High, xloc.bar_time, color = DrLineColor, style = DrLineLineStyle, width = 1)
        DrLowLine := line.new(_OpenTime, _Low, CycleEnd, _Low, xloc.bar_time, color = DrLineColor, style = DrLineLineStyle, width = 1)
        DrLowLine
    if ShowIdrLine
        IdrHighLine := line.new(_OpenTime, _CloseHigh, CycleEnd, _CloseHigh, xloc.bar_time, color = IdrLineColor, style = IdrLineLineStyle, width = 1)
        IdrLowLine := line.new(_OpenTime, _CloseLow, CycleEnd, _CloseLow, xloc.bar_time, color = IdrLineColor, style = IdrLineLineStyle, width = 1)
        IdrLowLine
    if ShowIdrMidpoint
        Midpoint = _CloseLow + (_CloseHigh - _CloseLow) / 2
        IdrMidpointLine := line.new(_OpenTime, Midpoint, CycleEnd, Midpoint, xloc.bar_time, color = IdrMidpointLineColor, style = IdrMidpointLineStyle, width = 1)
        IdrMidpointLine

    color BoxColor = na
    color BoxBorder = na

    color IdrBoxColor = na
    color IdrBoxBorder = na


    float MitigationHighLow = na
    string FractalEqDirection = na
    float MitigationLow = na
    float MitigationHigh = na

    if _OpenPrice < _ClosePrice
        BoxColor := FractalEqBoxUpColor
        BoxBorder := FractalEqBoxUpBorderColor
        IdrBoxColor := IdrBoxUpColor
        IdrBoxBorder := IdrBoxUpBorderColor

        MitigationLow := _OpenPrice
        MitigationHigh := _ClosePrice

        FractalEqDirection := 'Bull'
        FractalEqDirection
    else if _OpenPrice > _ClosePrice
        BoxColor := FractalEqBoxDownColor
        BoxBorder := FractalEqBoxDownBorderColor
        IdrBoxColor := IdrBoxDownColor
        IdrBoxBorder := IdrBoxDownBorderColor

        MitigationLow := _ClosePrice
        MitigationHigh := _OpenPrice

        FractalEqDirection := 'Bear'
        FractalEqDirection
    else
        BoxColor := color.new(color.gray, 90)
        BoxBorder := color.new(color.gray, 50)
        IdrBoxColor := color.new(color.gray, 90)
        IdrBoxBorder := color.new(color.gray, 50)
        MitigationLow := _ClosePrice
        MitigationHigh := _OpenPrice
        MitigationHigh

    string BelowAboveString = na
    string UnmitigatedAllign = text.align_bottom
    if close > Eq
        BelowAboveString := 'Above'
        MitigationHighLow := MitigationHigh
        UnmitigatedAllign := text.align_bottom
        UnmitigatedAllign
    else if close < Eq
        BelowAboveString := 'Below'
        MitigationHighLow := MitigationLow
        UnmitigatedAllign := text.align_top
        UnmitigatedAllign
    else
        BelowAboveString := 'Mitigated'
        UnmitigatedAllign := text.align_top
        UnmitigatedAllign

    if ShowCloseBox
        BoxEndTime = _CloseTime
        if ExtendOCBoxForwardSessions > 0
            SessionDuration = _CloseTime - _OpenTime
            BoxEndTime := BoxEndTime + (SessionDuration * ExtendOCBoxForwardSessions)

        CloseBoxCurrent := box.new(_OpenTime, _OpenPrice, BoxEndTime, _ClosePrice, xloc = xloc.bar_time, bgcolor = BoxColor, border_color = BoxBorder, border_width = FractalEqBoxBorderSize)
        CloseBoxCurrent
    if ShowIdrBox
        IdrBoxCurrent := box.new(_OpenTime, _CloseHigh, _CloseTime, _CloseLow, xloc = xloc.bar_time, bgcolor = BoxColor, border_color = BoxBorder, border_width = 1)
        IdrBoxCurrent


    string LabelPercentOffset = ''
    if _CurrentArtefact.SessionString == '2130-2220' or _CurrentArtefact.SessionString == '0300-0355' or _CurrentArtefact.SessionString == '1130-1220'
        LabelPercentOffset := '\n'
        LabelPercentOffset

    float CloseHigh = na
    float CloseLow = na
    if _OpenPrice > _ClosePrice
        CloseHigh := _OpenPrice
        CloseLow := _ClosePrice
        CloseLow
    else
        CloseHigh := _ClosePrice
        CloseLow := _OpenPrice
        CloseLow
    string UnmitigatedLabel = ''
    if ShowUnmitigatedBoxLabel
        UnmitigatedLabel := LabelPercentOffset + '0%'
        UnmitigatedLabel

    if ShowUnmitigatedBox
        UnmitigatedBoxCurrent := box.new(_OpenTime, CloseHigh, _CloseTime, CloseLow, xloc = xloc.bar_time, bgcolor = UnmitigatedBoxColor, border_color = UnmitigatedBoxBorderColor, text = UnmitigatedLabel, text_color = FractalEqLineColor, text_halign = text.align_right, text_valign = UnmitigatedAllign, text_size = size.small, border_width = UnmitigatedBoxBorderSize)
        UnmitigatedBoxCurrent



    array<LineWithLabel> AllMatrixProjections = array.new<LineWithLabel>()
    if _CurrentArtefact.ShowMatrixProjections
        float MatrixRangeLow = na
        float MatrixRange = na

        if RangeStyle == 'OC' and ManualRangeProjection
            if _OpenPrice < _ClosePrice
                MatrixRangeLow := _OpenPrice
                MatrixRange := math.abs(_ClosePrice - _OpenPrice)
                MatrixRange
            else
                MatrixRangeLow := _ClosePrice
                MatrixRange := math.abs(_ClosePrice - _OpenPrice)
                MatrixRange
        else if RangeStyle == 'IDR' and ManualRangeProjection
            MatrixRangeLow := _CloseLow
            MatrixRange := _CloseHigh - _CloseLow
            MatrixRange

        else if RangeStyle == 'DR' and ManualRangeProjection
            MatrixRangeLow := _Low
            MatrixRange := _High - _Low
            MatrixRange
        else
            if math.abs(_ClosePrice - _OpenPrice) * 0.4 > _CloseHigh - _CloseLow
                if _OpenPrice < _ClosePrice
                    MatrixRangeLow := _OpenPrice
                    MatrixRange := math.abs(_ClosePrice - _OpenPrice)
                    MatrixRange
                else
                    MatrixRangeLow := _ClosePrice
                    MatrixRange := math.abs(_ClosePrice - _OpenPrice)
                    MatrixRange
            else
                MatrixRangeLow := _CloseLow
                MatrixRange := _CloseHigh - _CloseLow
                MatrixRange


        for i = 0 to array.size(ArrayOfMatrixRanges) - 1 by 1
            CurrentMatrixRange = array.get(ArrayOfMatrixRanges, i)
            Range = MatrixRangeLow + MatrixRange * CurrentMatrixRange
            array.push(AllMatrixProjections, CreateLineWithLabel(_OpenTime, Range, CycleEnd, MatrixProjectionColors, line.style_dotted, 1, str.tostring(CurrentMatrixRange)))


    CurrentSessionObject = SessionObject.new(OpenLine, CloseLine, FractalEqLine, DrHighLine, DrLowLine, IdrHighLine, IdrLowLine, IdrMidpointLine, CloseBoxCurrent, IdrBoxCurrent, Eq, BelowAboveString, _OpenTime, na, na, na, na, na, na, _High, _Low, CycleEnd, false, na, _SessionConfirmation, 'NotInSession', ClusterHigh, ClusterLow, ClusterHighMidpoint, ClusterLowMidpoint, _CloseHigh, _CloseLow, AllMatrixProjections, UnmitigatedBoxCurrent, close, FractalEqDirection, _OpenPrice, _ClosePrice, true, '', _CurrentArtefact.SessionString, false)
    array.push(ArrayOfFractalObjects, CurrentSessionObject)


    ClusterArrayChanged = false

    if ShowBiggestCluster and _CurrentArtefact.SessionString == '0930-1030'
        array.push(ArrayOfClusterRdrObjects, CurrentSessionObject)
        ClusterArrayChanged := true
        if array.size(ArrayOfClusterRdrObjects) > NumberOfClustersBack
            CurrentCluster = array.shift(ArrayOfClusterRdrObjects)
            CurrentCluster

    [CurrentSessionObject, ClusterArrayChanged]



var bool BullConfirmationMark = false
var bool BearConfirmationMark = false


GetSessionTimes(_Session, _GetStartTime) =>
    ArrayOfTimes = str.split(_Session, '-')
    StringStartTime = array.get(ArrayOfTimes, 0)
    StringEndTime = array.get(ArrayOfTimes, 1)
    SessionStartHour = int(str.tonumber(str.substring(StringStartTime, 0, 2)))
    SessionStartMinute = int(str.tonumber(str.substring(StringStartTime, 2, 4)))
    SessionEndHour = int(str.tonumber(str.substring(StringEndTime, 0, 2)))
    SessionEndMinute = int(str.tonumber(str.substring(StringEndTime, 2, 4)))
    if _GetStartTime
        timestamp(Timezone, year, month, dayofmonth, SessionStartHour, SessionStartMinute, 0)
    else
        timestamp(Timezone, year, month, dayofmonth, SessionEndHour, SessionEndMinute, 0)

SessionCalculation(_SessionString, _PreviousSessionState) =>

    SessionState = _PreviousSessionState
    SessionStartTime = GetSessionTimes(_SessionString, true)
    SessionEndTime = GetSessionTimes(_SessionString, false)

    if SessionState == 'NotInSession' and hour(time) == hour(SessionStartTime) and minute(time) == minute(SessionStartTime)
        SessionState := 'SessionStart'
        SessionState
    else if SessionState == 'SessionStart'
        SessionState := 'InSession'
        SessionState
    else if SessionState == 'InSession' and hour(time) == hour(SessionEndTime) and minute(time) == minute(SessionEndTime)
        SessionState := 'EndOfSession'
        SessionState
    else if SessionState == 'EndOfSession'
        SessionState := 'NotInSession'
        SessionState

    SessionState
    // } -------- END FUNCTIONS --------


// { --------------------- START QUANTUM DR CYCLE Ranges ---------------------




[M5_Close] = request.security(syminfo.tickerid, '5', [close], lookahead = barmerge.lookahead_on)
Use_M5 = timeframe.in_seconds() < 300
Close = Use_M5 ? M5_Close : close

var bool ClusterArrayHasChanged = false

if array.size(ArrayOfSessionDataObjects) > 0
    for i = 0 to array.size(ArrayOfSessionDataObjects) - 1 by 1
        CurrentArtefact = array.get(ArrayOfSessionDataObjects, i)

        SessionState = SessionCalculation(CurrentArtefact.SessionString, CurrentArtefact.SessionState)
        CurrentArtefact.SessionState := SessionState

        if SessionState == 'SessionStart'
            CurrentArtefact.FractalDrawn := false
            CurrentArtefact.Open := open
            CurrentArtefact.High := open
            CurrentArtefact.Low := open
            CurrentArtefact.Close := open
            CurrentArtefact.CloseHigh := open
            CurrentArtefact.CloseLow := open
            CurrentArtefact.OpenTime := time
            CurrentArtefact.OpenTime
        else if SessionState == 'InSession'
            CurrentArtefact.High := math.max(CurrentArtefact.High, high)
            CurrentArtefact.Low := math.min(CurrentArtefact.Low, low)
            CurrentArtefact.CloseHigh := math.max(CurrentArtefact.CloseHigh, Close)
            CurrentArtefact.CloseLow := math.min(CurrentArtefact.CloseLow, Close)
            CurrentArtefact.CloseTime := time
            CurrentArtefact.Close := Close
            CurrentArtefact.Close
        if SessionState == 'EndOfSession' //and not CurrentArtefact.FractalDrawn        
            CurrentArtefact.FractalDrawn := true
            CurrentArtefact.ConfirmedDirection := na

            [CurrentObject, ClusterArrayChanged] = CreateNewSession(CurrentArtefact.OpenTime, CurrentArtefact.Open, CurrentArtefact.CloseTime, CurrentArtefact.Close, CurrentArtefact.CycleEndTime, CurrentArtefact.High, CurrentArtefact.Low, CurrentArtefact.CloseHigh, CurrentArtefact.CloseLow, CurrentArtefact.SessionConfirmation, CurrentArtefact)

            ClusterArrayHasChanged := ClusterArrayChanged
            ClusterArrayHasChanged

// if na(CurrentBiggestRdr)
//     CurrentBiggestRdr := CurrentObject                




if array.size(ArrayOfFractalObjects) > 0
    for i = 0 to array.size(ArrayOfFractalObjects) - 1 by 1
        CurrentArtefact = array.get(ArrayOfFractalObjects, i)
        if not CurrentArtefact.SessionConfirmedFractal
            var int TempCounter = na
            CurrentSessionState = SessionCalculation(CurrentArtefact.SessionConfirmationFractal, CurrentArtefact.AfterSessionState)
            CurrentArtefact.AfterSessionState := CurrentSessionState

            if CurrentSessionState == 'SessionStart'
                CurrentArtefact.SessionConfirmedFractal := false
                CurrentArtefact.ConfirmationDirectionDr := na
                CurrentArtefact.ConfirmationDirectionDr
            if CurrentSessionState == 'InSession' or CurrentSessionState == 'SessionStart'
                if not CurrentArtefact.SessionConfirmedFractal

                    if close > CurrentArtefact.HighFractal and not CurrentArtefact.SessionConfirmedFractal and barstate.isconfirmed
                        if ShowConfCandleBullBear
                            BullConfirmationMark := true
                            BullConfirmationMark
                        TempCounter := TempCounter + 1

                        CurrentArtefact.SessionConfirmedFractal := true
                        CurrentArtefact.ConfirmationDirectionDr := 'Long'
                        ConfirmationTime = time //+TickerTimeOffset
                        CandleHigh = high
                        CandleLow = low
                        OriginalCandleEndTime = CurrentArtefact.CycleEndTimeFractal // End time of the cycle this candle confirms
                        BaseCandleEndTime = OriginalCandleEndTime

                        if ExtendBaseCandleForwardSessions > 0
                            // The "duration" of a base candle isn't fixed like a session.
                            // We'll use the time from its formation (ConfirmationTime) to the cycle end (OriginalCandleEndTime)
                            // as its effective "original duration" for extension purposes.
                            // If OriginalCandleEndTime is in the past or equal to ConfirmationTime, extension might not be meaningful or could error.
                            // A more robust approach might be to use a fixed duration or a multiple of the timeframe period if CycleEndTimeFractal is not far enough.
                            // For now, using the difference to CycleEndTimeFractal.
                            EffectiveCandleDuration = OriginalCandleEndTime > ConfirmationTime ? OriginalCandleEndTime - ConfirmationTime : (time - time[1]) // Use current bar's duration as a fallback
                            if EffectiveCandleDuration > 0
                                BaseCandleEndTime := BaseCandleEndTime + (EffectiveCandleDuration * ExtendBaseCandleForwardSessions)

                        if ShowConfirmationCandles and ShowClosingCandle
                            CurrentArtefact.ConfirmationCandle := box.new(ConfirmationTime, CandleHigh, BaseCandleEndTime, CandleLow, xloc = xloc.bar_time, border_color = BoxBull_Border_Color, bgcolor = BoxBull_Fill_Color, border_width = FractalEqBoxBorderSize, text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = BoxBull_Border_Color)
                            CurrentArtefact.ConfirmationCandleMidline := line.new(ConfirmationTime, CandleHigh - (CandleHigh - CandleLow) / 2, BaseCandleEndTime, CandleHigh - (CandleHigh - CandleLow) / 2, color = BoxBull_Border_Color, style = line.style_dashed, xloc = xloc.bar_time)

                            CurrentArtefact.ConfirmationMidpointValue := CandleHigh - (CandleHigh - CandleLow) / 2
                            CurrentArtefact.ConfirmationCandleHighValue := CandleHigh
                            CurrentArtefact.ConfirmationCandleLowValue := CandleLow
                            CurrentArtefact.ConfirmationCandleLowValue


                    if close < CurrentArtefact.LowFractal and not CurrentArtefact.SessionConfirmedFractal and barstate.isconfirmed
                        if ShowConfCandleBullBear
                            BearConfirmationMark := true
                            BearConfirmationMark
                        TempCounter := TempCounter + 1

                        CurrentArtefact.SessionConfirmedFractal := true
                        CurrentArtefact.ConfirmationDirectionDr := 'Short'
                        ConfirmationTime = time //+TickerTimeOffset
                        CandleHigh = high
                        CandleLow = low
                        OriginalCandleEndTime = CurrentArtefact.CycleEndTimeFractal // End time of the cycle this candle confirms
                        BaseCandleEndTime = OriginalCandleEndTime

                        if ExtendBaseCandleForwardSessions > 0
                            EffectiveCandleDuration = OriginalCandleEndTime > ConfirmationTime ? OriginalCandleEndTime - ConfirmationTime : (time - time[1])
                            if EffectiveCandleDuration > 0
                                BaseCandleEndTime := BaseCandleEndTime + (EffectiveCandleDuration * ExtendBaseCandleForwardSessions)

                        if ShowConfirmationCandles and ShowClosingCandle
                            CurrentArtefact.ConfirmationCandle := box.new(ConfirmationTime, CandleHigh, BaseCandleEndTime, CandleLow, xloc = xloc.bar_time, border_color = BoxBear_Border_Color, bgcolor = BoxBear_Fill_Color, border_width = FractalEqBoxBorderSize, text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = BoxBear_Border_Color)
                            CurrentArtefact.ConfirmationCandleMidline := line.new(ConfirmationTime, CandleHigh - (CandleHigh - CandleLow) / 2, BaseCandleEndTime, CandleHigh - (CandleHigh - CandleLow) / 2, color = BoxBear_Border_Color, style = line.style_dashed, xloc = xloc.bar_time)

                            CurrentArtefact.ConfirmationMidpointValue := CandleHigh - (CandleHigh - CandleLow) / 2
                            CurrentArtefact.ConfirmationCandleHighValue := CandleHigh
                            CurrentArtefact.ConfirmationCandleLowValue := CandleLow
                            CurrentArtefact.ConfirmationCandleLowValue
            else if CurrentSessionState == 'EndOfSession'
                CurrentArtefact.SessionConfirmedFractal := true
                CurrentArtefact.SessionConfirmedFractal





plotshape(BullConfirmationMark, color = ConfirmationShapeBullColor, location = location.abovebar, style = shape.triangleup, title = 'Long Confirmation')
plotshape(BearConfirmationMark, color = ConfirmationShapeBearColor, location = location.belowbar, style = shape.triangledown, title = 'Short Confirmation')

BullConfirmationMark := false
BearConfirmationMark := false

ExtendClustersInRealtime = true

if array.size(ArrayOfFractalObjects) > NumberOfHistoricalDrsToShow * NumberOfSessionsToShow
    DeleteArtefact = array.shift(ArrayOfFractalObjects)

    line.delete(DeleteArtefact.Open)
    line.delete(DeleteArtefact.Close)
    line.delete(DeleteArtefact.FractalEq)
    line.delete(DeleteArtefact.DrHigh)
    line.delete(DeleteArtefact.DrLow)
    line.delete(DeleteArtefact.IdrHigh)
    line.delete(DeleteArtefact.IdrLow)
    line.delete(DeleteArtefact.IdrMidpoint)
    box.delete(DeleteArtefact.CloseBox)

    box.delete(DeleteArtefact.IdrBox)
    box.delete(DeleteArtefact.ConfirmationCandle)
    line.delete(DeleteArtefact.ConfirmationCandleMidline)
    box.delete(DeleteArtefact.UnmitigatedBox)

    if ShowClusters
        box.delete(DeleteArtefact.ClusterHigh)
        box.delete(DeleteArtefact.ClusterLow)
        line.delete(DeleteArtefact.ClusterHighMidpoint)
        line.delete(DeleteArtefact.ClusterLowMidpoint)

    // if not na(DeleteArtefact.MatrixProjections)
    if array.size(DeleteArtefact.MatrixProjections) > 0
        for i = 0 to array.size(DeleteArtefact.MatrixProjections) - 1 by 1
            CurrentArtefact = array.get(DeleteArtefact.MatrixProjections, i)
            line.delete(CurrentArtefact.Line)
            label.delete(CurrentArtefact.Label)

if DeleteOldCycles
    if array.size(ArrayOfFractalObjects) > ShowOnlyLastN
        DeleteArtefact = array.shift(ArrayOfFractalObjects)

        line.delete(DeleteArtefact.Open)
        line.delete(DeleteArtefact.Close)
        line.delete(DeleteArtefact.FractalEq)
        line.delete(DeleteArtefact.DrHigh)
        line.delete(DeleteArtefact.DrLow)
        line.delete(DeleteArtefact.IdrHigh)
        line.delete(DeleteArtefact.IdrLow)
        line.delete(DeleteArtefact.IdrMidpoint)
        box.delete(DeleteArtefact.CloseBox)
        box.delete(DeleteArtefact.IdrBox)
        box.delete(DeleteArtefact.ConfirmationCandle)
        line.delete(DeleteArtefact.ConfirmationCandleMidline)
        if ShowClusters
            box.delete(DeleteArtefact.ClusterHigh)
            box.delete(DeleteArtefact.ClusterLow)
            line.delete(DeleteArtefact.ClusterHighMidpoint)
            line.delete(DeleteArtefact.ClusterLowMidpoint)

        // if not na(DeleteArtefact.MatrixProjections)
        if array.size(DeleteArtefact.MatrixProjections) > 0
            for i = 0 to array.size(DeleteArtefact.MatrixProjections) - 1 by 1
                CurrentArtefact = array.get(DeleteArtefact.MatrixProjections, i)
                line.delete(CurrentArtefact.Line)
                label.delete(CurrentArtefact.Label)


var SessionObject PreviousBiggestRdr = na
var SessionObject BigestRdrInArray = na

if ShowBiggestCluster and array.size(ArrayOfClusterRdrObjects) > 0
    PreviousBiggestRdr := BigestRdrInArray

    for i = 0 to array.size(ArrayOfClusterRdrObjects) - 1 by 1
        CurrentRdr = array.get(ArrayOfClusterRdrObjects, i)
        if i == 0
            BigestRdrInArray := array.get(ArrayOfClusterRdrObjects, 0)
            BigestRdrInArray
        else
            CloseHigh = CurrentRdr.CloseHigh
            CloseLow = CurrentRdr.CloseLow

            if CloseHigh - CloseLow > BigestRdrInArray.CloseHigh - BigestRdrInArray.CloseLow
                BigestRdrInArray := CurrentRdr
                BigestRdrInArray


var ClusterWasInArrayOfFractals = false

if not na(BigestRdrInArray) and not na(PreviousBiggestRdr)
    PreviousBigestOpenTime = PreviousBiggestRdr.OpenTime
    CurrentBiggestOpenTime = BigestRdrInArray.OpenTime
    ClusterWasInArrayOfFractals := false
    for i = 0 to array.size(ArrayOfFractalObjects) - 1 by 1
        FractalObject = array.get(ArrayOfFractalObjects, i)
        if PreviousBigestOpenTime == FractalObject.OpenTime
            if ShowTuesdayCluster and str.contains('Tue', str.format_time(FractalObject.OpenTime, 'E'))
                box.set_bgcolor(FractalObject.ClusterHigh, TuesdayClusterHighColor)
                box.set_bgcolor(FractalObject.ClusterLow, TuesdayClusterLowColor)
                box.set_border_color(FractalObject.ClusterHigh, TuesdayClusterHighBorderColor)
                box.set_border_color(FractalObject.ClusterLow, TuesdayClusterLowBorderColor)
                line.set_color(FractalObject.ClusterHighMidpoint, TuesdayClusterHighBorderColor)
                line.set_color(FractalObject.ClusterLowMidpoint, TuesdayClusterLowBorderColor)
            else
                box.set_bgcolor(FractalObject.ClusterHigh, ClusterHighColor)
                box.set_bgcolor(FractalObject.ClusterLow, ClusterLowColor)
                box.set_border_color(FractalObject.ClusterHigh, ClusterHighBorderColor)
                box.set_border_color(FractalObject.ClusterLow, ClusterLowBorderColor)
                line.set_color(FractalObject.ClusterHighMidpoint, ClusterHighBorderColor)
                line.set_color(FractalObject.ClusterLowMidpoint, ClusterLowBorderColor)

        if CurrentBiggestOpenTime == FractalObject.OpenTime
            box.set_bgcolor(FractalObject.ClusterHigh, LargestClusterHighColor)
            box.set_bgcolor(FractalObject.ClusterLow, LargestClusterLowColor)
            ClusterWasInArrayOfFractals := true
            ClusterWasInArrayOfFractals

    if not ClusterWasInArrayOfFractals and not na(BigestRdrInArray)
        OpenTime = BigestRdrInArray.OpenTime
        High = BigestRdrInArray.HighFractal
        Low = BigestRdrInArray.LowFractal
        CloseHigh = BigestRdrInArray.CloseHigh
        CloseLow = BigestRdrInArray.CloseLow

        box.delete(PreviousBiggestRdr.ClusterHigh)
        box.delete(PreviousBiggestRdr.ClusterLow)
        line.delete(PreviousBiggestRdr.ClusterHighMidpoint)
        line.delete(PreviousBiggestRdr.ClusterLowMidpoint)

        BigestRdrInArray.ClusterHigh := box.new(OpenTime, High, time, CloseHigh, xloc = xloc.bar_time, border_color = LargestClusterHighBorderColor, bgcolor = LargestClusterHighColor, border_width = 1, text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = BoxBull_Border_Color)
        BigestRdrInArray.ClusterHighMidpoint := line.new(OpenTime, CloseHigh + (High - CloseHigh) / 2, time, CloseHigh + (High - CloseHigh) / 2, xloc.bar_time, color = LargestClusterHighBorderColor, style = line.style_dashed, width = 1)
        BigestRdrInArray.ClusterLow := box.new(OpenTime, Low, time, CloseLow, xloc = xloc.bar_time, border_color = LargestClusterLowBorderColor, bgcolor = LargestClusterLowColor, border_width = 1, text_size = size.auto, text_halign = text.align_right, text_valign = text.align_center, text_color = BoxBull_Border_Color)
        BigestRdrInArray.ClusterLowMidpoint := line.new(OpenTime, CloseLow + (Low - CloseLow) / 2, time, CloseLow + (Low - CloseLow) / 2, xloc.bar_time, color = LargestClusterLowBorderColor, style = line.style_dashed, width = 1)
        BigestRdrInArray.ClusterLowMidpoint






if array.size(ArrayOfFractalObjects) > 0
    for i = 0 to array.size(ArrayOfFractalObjects) - 1 by 1
        CurrentArtefact = array.get(ArrayOfFractalObjects, i)
        // table.cell(Table1, 0, 15, "CurrentArtefact.SessionString : " + str.tostring(CurrentArtefact.SessionString), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
        // table.cell(Table1, 0, 16, "CurrentArtefact.FractalEqBoxMitigated : " + str.tostring(CurrentArtefact.FractalEqBoxMitigated), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)

        // Updated inversion logic for Confirmation Candles
        if not na(CurrentArtefact.ConfirmationCandle) // Ensure candle exists
            if CurrentArtefact.ConfirmationDirectionDr == 'Long'
                if close < CurrentArtefact.ConfirmationCandleLowValue // New: Bullish candle below its low -> invert
                    box.set_bgcolor(CurrentArtefact.ConfirmationCandle, BoxInversion_Fill_Color)
                    box.set_border_color(CurrentArtefact.ConfirmationCandle, BoxInversion_Border_Color)
                else if ColorConfirmationCandleDirection and close < CurrentArtefact.ConfirmationMidpointValue // Original midpoint inversion logic
                    box.set_bgcolor(CurrentArtefact.ConfirmationCandle, BoxInversion_Fill_Color)
                    box.set_border_color(CurrentArtefact.ConfirmationCandle, BoxInversion_Border_Color)
                else // No inversion, set to original bull colors
                    box.set_bgcolor(CurrentArtefact.ConfirmationCandle, BoxBull_Fill_Color)
                    box.set_border_color(CurrentArtefact.ConfirmationCandle, BoxBull_Border_Color)
            else if CurrentArtefact.ConfirmationDirectionDr == 'Short'
                if close > CurrentArtefact.ConfirmationCandleHighValue // New: Bearish candle above its high -> invert
                    box.set_bgcolor(CurrentArtefact.ConfirmationCandle, BoxInversion_Fill_Color)
                    box.set_border_color(CurrentArtefact.ConfirmationCandle, BoxInversion_Border_Color)
                else if ColorConfirmationCandleDirection and close > CurrentArtefact.ConfirmationMidpointValue // Original midpoint inversion logic
                    box.set_bgcolor(CurrentArtefact.ConfirmationCandle, BoxInversion_Fill_Color)
                    box.set_border_color(CurrentArtefact.ConfirmationCandle, BoxInversion_Border_Color)
                else // No inversion, set to original bear colors
                    box.set_bgcolor(CurrentArtefact.ConfirmationCandle, BoxBear_Fill_Color)
                    box.set_border_color(CurrentArtefact.ConfirmationCandle, BoxBear_Border_Color)

        if ExtendConfirmationCandle
            // CurrentArtefact = array.get(ArrayOfFractalObjects, i)
            box.set_right(CurrentArtefact.ConfirmationCandle, time)
            line.set_x2(CurrentArtefact.ConfirmationCandleMidline, time)

        if ExtendClustersInRealtime and ShowClusters
            // for i = 0 to array.size(ArrayOfFractalObjects)-1
            // CurrentArtefact = array.get(ArrayOfFractalObjects, i)
            box.set_right(CurrentArtefact.ClusterHigh, time)
            box.set_right(CurrentArtefact.ClusterLow, time)
            line.set_x2(CurrentArtefact.ClusterHighMidpoint, time)
            line.set_x2(CurrentArtefact.ClusterLowMidpoint, time)

        if ExtendClustersInRealtime and ShowTuesdayCluster and not ShowClusters
            box.set_right(CurrentArtefact.ClusterHigh, time)
            box.set_right(CurrentArtefact.ClusterLow, time)
            line.set_x2(CurrentArtefact.ClusterHighMidpoint, time)
            line.set_x2(CurrentArtefact.ClusterLowMidpoint, time)


        if ShowUnmitigatedBox and not CurrentArtefact.FractalEqBoxMitigated
            OpenPrice = CurrentArtefact.FractalOpen
            ClosePrice = CurrentArtefact.FractalClose
            float RangeClosed = 0.00

            float OpenCloseLow = OpenPrice
            float OpenCloseHigh = ClosePrice

            if OpenCloseLow > OpenCloseHigh
                OpenCloseLow := ClosePrice
                OpenCloseHigh := OpenPrice
                OpenCloseHigh

// if na(CurrentArtefact.UnmitigatedBox)
//     CurrentArtefact.UnmitigatedBox := box.new(CurrentArtefact.OpenTime,OpenCloseHigh, time,OpenCloseLow, xloc = xloc.bar_time, bgcolor = UnmitigatedBoxColor, border_color = UnmitigatedBoxBorderColor,text = "0%", text_color = FractalEqLineColor, text_halign = text.align_right, text_valign = text.align_bottom ,text_size = size.small, border_width = UnmitigatedBoxBorderSize)

            box.set_right(CurrentArtefact.UnmitigatedBox, time)
            if ShowFractalEq
                line.set_x2(CurrentArtefact.FractalEq, time)


            FractalHighLow = math.abs(OpenPrice - ClosePrice)
            Eq = OpenCloseLow + FractalHighLow / 2

            string LabelPercentOffset = ''
            if CurrentArtefact.SessionString == '2130-2220' or CurrentArtefact.SessionString == '0300-0355' or CurrentArtefact.SessionString == '1130-1220'
                LabelPercentOffset := '            '
                LabelPercentOffset
                // else if CurrentArtefact.SessionString == "1130-1235"
                //     LabelPercentOffset := "\n\n"


            if CurrentArtefact.FreshFractal
                if ClosePrice > OpenPrice
                    CurrentArtefact.FractalEndPriceAboveBelow := 'Above'
                    CurrentArtefact.FractalEndPriceAboveBelow
                else
                    CurrentArtefact.FractalEndPriceAboveBelow := 'Below'
                    CurrentArtefact.FractalEndPriceAboveBelow

                CurrentArtefact.FreshFractal := false
                CurrentArtefact.FractalEqBoxMitigated := false
                CurrentArtefact.FractalEqBoxMitigated

            if CurrentArtefact.FractalEndPriceAboveBelow == 'Above'
                CurrentArtefact.MaxHighLowValue := math.min(CurrentArtefact.MaxHighLowValue, low)
                RangeClosedCalc = OpenCloseHigh - CurrentArtefact.MaxHighLowValue
                CurrentPercent = RangeClosedCalc / FractalHighLow



                RangeClosed := math.max(RangeClosed, CurrentPercent)

                if RangeClosed > 0 and RangeClosed < 1
                    if CalculateMitigation
                    // table.cell(Table1, 0, 1, "RangeClosed: " + str.tostring(RangeClosed), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
                    // table.cell(Table1, 0, 2, "CurrentArtefact.MaxHighLowValue: " + str.tostring(CurrentArtefact.MaxHighLowValue), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
                    // table.cell(Table1, 0, 3, "TimeLoop: " + str.format_time(time, "d-M-yy HH:mm"), text_color = TableTextColor1, text_size = TableTextSize1,text_halign =  text.align_left)
                    // table.cell(Table1, 0, 4, "CurrentArtefact.FractalEndPriceAboveBelow : " + str.tostring(CurrentArtefact.FractalEndPriceAboveBelow), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
                    // table.cell(Table1, 0, 5, "CurrentArtefact.SessionString : " + str.tostring(CurrentArtefact.SessionString), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
                    // table.cell(Table1, 0, 6, "CurrentArtefact.UnmitigatedBox : " + str.tostring(na(CurrentArtefact.UnmitigatedBox)), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)

                        box.set_top(CurrentArtefact.UnmitigatedBox, CurrentArtefact.MaxHighLowValue)
                        //box.set_bottom(CurrentArtefact.UnmitigatedBox, CurrentArtefact.MaxHighLowValue)
                        if ShowUnmitigatedBoxLabel
                            box.set_text(CurrentArtefact.UnmitigatedBox, str.tostring(RangeClosed, '#.##%') + LabelPercentOffset)
                else if RangeClosed >= 1
                    RangeClosed := 1
                    CurrentArtefact.FractalEqBoxMitigated := true
                    if DeleteMitigatedBoxes and CurrentArtefact.FractalEqBoxMitigated

                        box.delete(CurrentArtefact.UnmitigatedBox)
                    else
                        if CalculateMitigation
                            if ShowUnmitigatedBoxLabel
                                box.set_text(CurrentArtefact.UnmitigatedBox, str.tostring(RangeClosed, '#.##%') + LabelPercentOffset)

                if low < CurrentArtefact.EqValue
                    if DeleteMitigated
                        if ShowFractalEq
                            line.delete(CurrentArtefact.FractalEq)
                            if ShowUnmitigatedBoxLabel
                                box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)

                    else
                        if ShowFractalEq
                            line.set_color(CurrentArtefact.FractalEq, MitigatedFractalEqLineColor)
                        if ShowUnmitigatedBoxLabel
                            box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)
            // Below
            // table.cell(Table1, 0, 25, "CurrentArtefact.FractalEndPriceAboveBelow : " + str.tostring(CurrentArtefact.FractalEndPriceAboveBelow), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
            // table.cell(Table1, 0, 26, "CurrentArtefact.SessionString : " + str.tostring(CurrentArtefact.SessionString), text_color = TableTextColor1 , text_size = TableTextSize1,text_halign =  text.align_left)
            // table.cell(Table1, 0, 27, "TimeLoop: " + str.format_time(time, "d-M-yy HH:mm"), text_color = TableTextColor1, text_size = TableTextSize1,text_halign =  text.align_left)
            else 
                CurrentArtefact.MaxHighLowValue := math.max(CurrentArtefact.MaxHighLowValue, high)
                RangeClosedCalc = CurrentArtefact.MaxHighLowValue - OpenCloseLow
                CurrentPercent = RangeClosedCalc / FractalHighLow

                RangeClosed := math.max(RangeClosed, CurrentPercent)

                if RangeClosed > 0 and RangeClosed < 1
                    if CalculateMitigation
                        box.set_bottom(CurrentArtefact.UnmitigatedBox, CurrentArtefact.MaxHighLowValue)
                    if ShowUnmitigatedBoxLabel
                        box.set_text(CurrentArtefact.UnmitigatedBox, str.tostring(RangeClosed, '#.##%') + LabelPercentOffset)
                else
                    RangeClosed := 1
                    CurrentArtefact.FractalEqBoxMitigated := true
                    if DeleteMitigatedBoxes and CurrentArtefact.FractalEqBoxMitigated
                        box.delete(CurrentArtefact.UnmitigatedBox)
                    else
                        if CalculateMitigation
                            if ShowUnmitigatedBoxLabel
                                box.set_text(CurrentArtefact.UnmitigatedBox, str.tostring(RangeClosed, '#.##%') + LabelPercentOffset)


                if high > CurrentArtefact.EqValue
                    if DeleteMitigated
                        if ShowFractalEq
                            line.delete(CurrentArtefact.FractalEq)
                        if ShowUnmitigatedBoxLabel
                            box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)

                    else
                        if ShowFractalEq
                            line.set_color(CurrentArtefact.FractalEq, MitigatedFractalEqLineColor)
                        if ShowUnmitigatedBoxLabel
                            box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)



// box.set_right(CurrentArtefact.UnmitigatedBox, time)
// if ShowFractalEq
//     line.set_x2(CurrentArtefact.FractalEq, time)



if ExtendFractalLinesInRealtime and array.size(ArrayOfFractalObjects) > 0
    for i = 0 to array.size(ArrayOfFractalObjects) - 1 by 1
        CurrentArtefact = array.get(ArrayOfFractalObjects, i)
        line.set_x2(CurrentArtefact.FractalEq, time)


if AllignFractalsRight and array.size(ArrayOfFractalObjects) > 0
    for i = 0 to array.size(ArrayOfFractalObjects) - 1 by 1
        CurrentArtefact = array.get(ArrayOfFractalObjects, i)
        line.set_x1(CurrentArtefact.FractalEq, time[20])
        line.set_x2(CurrentArtefact.FractalEq, time)

// if ShowFractalEqLine and array.size(ArrayOfFractalObjects) > 0   
//     for i = 0 to array.size(ArrayOfFractalObjects)-1
//         CurrentArtefact = array.get(ArrayOfFractalObjects, i)
//         if CurrentArtefact.BelowAbove == "Above"
//             if low < CurrentArtefact.EqValue
//                 if DeleteMitigated
//                     line.delete(CurrentArtefact.FractalEq)
//                 else
//                     line.set_color(CurrentArtefact.FractalEq, MitigatedFractalEqLineColor)
//                     box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)
//         else if CurrentArtefact.BelowAbove == "Below"
//             if high > CurrentArtefact.EqValue
//                 if DeleteMitigated
//                     line.delete(CurrentArtefact.FractalEq)
//                 else
//                     line.set_color(CurrentArtefact.FractalEq, MitigatedFractalEqLineColor)
//                     box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)
//         else if CurrentArtefact.BelowAbove == "Mitigated"
//             if DeleteMitigated
//                 line.delete(CurrentArtefact.FractalEq)
//             else
//                 line.set_color(CurrentArtefact.FractalEq, MitigatedFractalEqLineColor)
//                 box.set_text_color(CurrentArtefact.UnmitigatedBox, MitigatedFractalEqLineColor)

// } --------------------- END QUANTUM DR CYCLE Ranges ---------------------
