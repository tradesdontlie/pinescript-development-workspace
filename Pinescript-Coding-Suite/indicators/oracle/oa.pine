//@version=5
indicator("Oracle Alliance Validator Pro Enhanced", shorttitle="OA Pro Enhanced", overlay=true, max_boxes_count=500, max_labels_count=500, max_lines_count=500)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🏗️ ORACLE ALLIANCE VALIDATOR PRO ENHANCED - INSTITUTIONAL GRADE
// ═══════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════
// 📋 ENHANCED TYPE DEFINITIONS
// ═══════════════════════════════════════════════════════════════════════════════════

type OracleWindow
    string name
    int hour
    int minute
    float success_rate
    int tolerance_seconds
    color window_color
    string pattern_type
    float priority_weight

type OracleSignal
    bool is_valid
    float score
    string quality_level
    bool time_confluence
    bool wave_confluence
    bool volume_confluence
    float confidence_level
    string risk_assessment

type VolumeProfile
    float institutional_ratio
    float smart_money_index
    float volume_acceleration
    string flow_direction
    bool is_accumulation

enum Grade
    Elite
    Premium
    Exceptional
    High
    Acceptable
    Below

gradeColor(grade, alpha) =>
    switch grade
        Grade.Elite       => color.new(color.yellow, alpha)
        Grade.Premium     => color.new(color.lime,   alpha)
        Grade.Exceptional => color.new(color.green,  alpha)
        Grade.High        => color.new(color.blue,   alpha)
        Grade.Acceptable  => color.new(color.orange, alpha)
        => color.new(color.red, alpha)

// ═══════════════════════════════════════════════════════════════════════════════════
// ⚙️ ENHANCED INPUT CONFIGURATION
// ═══════════════════════════════════════════════════════════════════════════════════

// System Controls
group_system = "🎛️ Oracle Alliance System"
enable_time_windows = input.bool(true, "Enable Time Windows", group=group_system, tooltip="Toggles the detection and visualization of institutional time windows. These are high-probability moments based on historical market activity.")
enable_wave_analysis = input.bool(true, "Enable Wave Analysis", group=group_system, tooltip="Activates the advanced analysis of market wave structures (WB/WT patterns) to gauge institutional conviction and market direction.")
enable_volume_profile = input.bool(true, "Enable Volume Profile", group=group_system, tooltip="Turns on institutional volume analysis, including Smart Money Index, volume acceleration, and accumulation detection.")
enable_performance_mode = input.bool(false, "Performance Mode", group=group_system, tooltip="Disables complex visual elements like gradient boxes and confidence bands to ensure smooth performance on all devices. Essential for lower-spec machines.")

// Core Validation Settings
group_validation = "📊 Validation Settings"
body_threshold = input.float(60.0, "Body Dominance Threshold (%)", minval=30.0, maxval=90.0, step=5.0, group=group_validation, tooltip="Sets the minimum percentage of a candle's range that must be its body to be considered valid. A higher value demands stronger conviction.")
volume_multiplier = input.float(1.2, "Volume Multiplier", minval=0.5, maxval=5.0, step=0.1, group=group_validation, tooltip="Defines how much the current volume must exceed the baseline average to be considered significant. This is automatically adjusted based on the active market session.")
volume_period = input.int(20, "Volume Baseline Period", minval=10, maxval=50, group=group_validation, tooltip="The lookback period for calculating the baseline institutional volume. A longer period provides a more stable average.")
session_adjustment = input.string("Auto-Detect", "Session Energy", options=["Asian (0.8x)", "Auto-Detect", "London (1.5x)", "NY (2.0x)"], group=group_validation, tooltip="Adjusts the volume baseline to account for typical institutional activity during different market sessions. 'Auto-Detect' is recommended.")

// Advanced Volume Settings
group_volume = "🏦 Institutional Volume Analysis"
smart_money_threshold = input.float(1.5, "Smart Money Threshold", minval=1.0, maxval=5.0, step=0.1, group=group_volume, tooltip="The minimum index value required to flag smart money activity. Higher values indicate more significant institutional interest.")
accumulation_sensitivity = input.float(2.0, "Accumulation Sensitivity", minval=1.0, maxval=5.0, step=0.1, group=group_volume, tooltip="Adjusts the sensitivity for detecting institutional accumulation or distribution. Higher values require stronger, more sustained volume.")
volume_flow_period = input.int(14, "Volume Flow Period", minval=5, maxval=30, group=group_volume, tooltip="The lookback period for analyzing volume flow and momentum, used to calculate volume acceleration.")

// Wave Analysis Settings
group_wave = "🌊 Advanced Wave Structure"
wave_lookback = input.int(25, "Wave Analysis Lookback", minval=15, maxval=50, group=group_wave, tooltip="The number of bars to look back when analyzing institutional wave patterns. A longer lookback can identify more established trends.")
wave_quality_threshold = input.float(70.0, "Wave Quality Threshold", minval=50.0, maxval=90.0, group=group_wave, tooltip="The minimum quality score a wave must achieve to contribute to a confluence signal. A higher threshold demands a more perfect wave structure.")
wave_confidence_period = input.int(10, "Wave Confidence Period", minval=5, maxval=20, group=group_wave, tooltip="The lookback period for calculating wave confidence, which measures the consistency of the current wave's direction.")

// Professional Visual Settings
group_visual = "🎨 Professional Visuals"
show_time_windows = input.bool(true, "Show Time Windows", group=group_visual, tooltip="Show or hide the visual representation of institutional time windows on the chart.")
show_validation_signals = input.bool(true, "Show Validation Signals", group=group_visual, tooltip="Show or hide the professional validation signal boxes that highlight qualified candles.")
show_volume_profile = input.bool(true, "Show Volume Profile", group=group_visual, tooltip="Show or hide the on-chart indicators for smart money and institutional accumulation.")
show_confidence_bands = input.bool(true, "Show Confidence Bands", group=group_visual, tooltip="Show or hide the dynamic confidence bands around candles, which visualize the signal's strength.")
show_risk_labels = input.bool(true, "Show Risk Assessment", group=group_visual, tooltip="Show or hide the color-coded risk assessment labels that appear below validated signals.")
signal_opacity = input.int(20, "Signal Opacity", minval=10, maxval=50, group=group_visual, tooltip="Adjusts the transparency of all signal overlays. Higher values are more opaque.")
show_info_table = input.bool(true, "Show Information Table", group=group_visual, tooltip="Toggles the visibility of the comprehensive information table in the top-right corner.")

// Advanced Projection and Labeling Settings
group_advanced_labels = "🎯 Advanced On-Chart Intelligence"
enable_projections = input.bool(true, "Enable High/Low Projections", group=group_advanced_labels, tooltip="Projects a potential High or Low from exceptional signals, based on dynamic ATR and institutional conviction.")
atr_period = input.int(14, "ATR Period for Projections", group=group_advanced_labels, tooltip="The lookback period for the Average True Range (ATR) calculation used in projections.")
atr_multiplier = input.float(1.5, "ATR Multiplier", group=group_advanced_labels, tooltip="The multiplier applied to the ATR to determine the projection distance. Higher values result in more aggressive targets.")
enhance_wave_labels = input.bool(true, "Enhanced Wave Labels", group=group_advanced_labels, tooltip="Replaces the standard wave confluence icon with a detailed on-chart label describing wave bias and quality.")
enhance_volume_labels = input.bool(true, "Enhanced Volume Labels", group=group_advanced_labels, tooltip="Replaces the 'ACCUM' tag with a more descriptive label indicating institutional buying or selling pressure.")

// Professional Color Scheme
group_colors = "🎨 Professional Colors"
premium_color = input.color(color.new(color.lime, 0), "Premium Signal", group=group_colors, tooltip="Defines the color for PREMIUM+ and ELITE level signals, representing the highest institutional conviction.")
exceptional_color = input.color(color.new(color.green, 0), "Exceptional Signal", group=group_colors, tooltip="Defines the color for EXCEPTIONAL level signals, indicating significant institutional activity.")
confluence_color = input.color(color.new(color.yellow, 0), "Confluence Signal", group=group_colors, tooltip="Defines the color for HIGH level signals and Time Confluence indicators.")
warning_color = input.color(color.new(color.orange, 0), "Warning Signal", group=group_colors, tooltip="Defines the color for ACCEPTABLE level signals, urging a degree of caution.")

institutional_buy_color  = input.color(color.new(color.green, 0), "Institutional Buying",  group=group_colors, tooltip="Colour for labels/shapes when institutional accumulation (buying) is detected.")
institutional_sell_color = input.color(color.new(color.red,   0), "Institutional Selling", group=group_colors, tooltip="Colour for labels/shapes when institutional distribution (selling) is detected.")

// ──────────────────────────────────────────────────────────────────────────
// 👁️ DISPLAY MODE (New Toggle)
// ──────────────────────────────────────────────────────────────────────────

group_display = "👁️ Display Mode"
display_preset = input.string("Balanced", "Display Preset", options=["Minimal", "Balanced", "Full"], group=group_display, tooltip="Select the overall visual complexity. Minimal: only main signal shapes. Balanced: adds confluence icons and concise info panel. Full: all visuals including backgrounds, projections, confidence bands, labels.")

preset_minimal  = display_preset == "Minimal"
preset_full     = display_preset == "Full"
// Balanced is the default; we can infer when neither minimal nor full

// Cache for enhanced data structures
var array<OracleWindow> oracle_windows = array.new<OracleWindow>()
var array<float> volume_flow_data = array.new<float>()
var array<float> institutional_pressure = array.new<float>()

// ═══════════════════════════════════════════════════════════════════════════════════
// 🏗️ ENHANCED INITIALIZATION FUNCTIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// Initialize Enhanced Oracle Time Windows
init_enhanced_oracle_windows() =>
    if array.size(oracle_windows) == 0
        // Tier 1: Elite Institutional Windows (99% Success)
        array.push(oracle_windows, OracleWindow.new("TT1", 4, 50, 99.0, 15, color.new(color.yellow, 20), "Elite", 1.0))
        array.push(oracle_windows, OracleWindow.new("TT2", 7, 0, 99.0, 30, color.new(color.yellow, 20), "Elite", 1.0))
        array.push(oracle_windows, OracleWindow.new("TT3", 9, 15, 99.0, 15, color.new(color.yellow, 20), "Elite", 1.0))
        
        // Tier 2: Premium Institutional Windows (98% Success)
        array.push(oracle_windows, OracleWindow.new("ET1", 9, 50, 98.0, 60, color.new(color.green, 25), "Premium", 0.9))
        array.push(oracle_windows, OracleWindow.new("ET2", 11, 50, 98.0, 60, color.new(color.green, 25), "Premium", 0.9))
        array.push(oracle_windows, OracleWindow.new("ET3", 14, 50, 98.0, 60, color.new(color.green, 25), "Premium", 0.9))
        
        // Tier 3: Executive Institutional Windows (97% Success)
        array.push(oracle_windows, OracleWindow.new("PE1", 3, 20, 97.0, 120, color.new(color.purple, 30), "Executive", 0.8))
        array.push(oracle_windows, OracleWindow.new("PE2", 9, 50, 97.0, 60, color.new(color.purple, 30), "Executive", 0.8))
        array.push(oracle_windows, OracleWindow.new("PE3", 15, 20, 97.0, 90, color.new(color.purple, 30), "Executive", 0.8))
        
        // Tier 4: Professional Windows (94-96% Success)
        array.push(oracle_windows, OracleWindow.new("MA1", 4, 50, 96.0, 30, color.new(color.orange, 35), "Professional", 0.7))
        array.push(oracle_windows, OracleWindow.new("MA2", 7, 5, 96.0, 45, color.new(color.orange, 35), "Professional", 0.7))
        array.push(oracle_windows, OracleWindow.new("MA3", 10, 35, 96.0, 60, color.new(color.orange, 35), "Professional", 0.7))
        array.push(oracle_windows, OracleWindow.new("MR1", 12, 35, 95.0, 90, color.new(color.fuchsia, 40), "Professional", 0.6))
        array.push(oracle_windows, OracleWindow.new("MR2", 13, 45, 95.0, 90, color.new(color.fuchsia, 40), "Professional", 0.6))
        array.push(oracle_windows, OracleWindow.new("MR3", 13, 50, 95.0, 90, color.new(color.fuchsia, 40), "Professional", 0.6))
        array.push(oracle_windows, OracleWindow.new("EV1", 19, 5, 94.0, 120, color.new(color.purple, 45), "Professional", 0.5))

// Professional ATR Calculation for Projections
f_calculate_atr() =>
    ta.atr(atr_period)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🧮 ENHANCED CALCULATION FUNCTIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// Enhanced body dominance with conviction analysis
f_enhanced_body_dominance() =>
    body_size = math.abs(close - open)
    total_range = high - low
    body_dom = total_range > 0 ? (body_size / total_range) * 100 : 0
    
    // Calculate conviction level based on body vs wicks
    upper_wick = high - math.max(open, close)
    lower_wick = math.min(open, close) - low
    wick_ratio = total_range > 0 ? (upper_wick + lower_wick) / total_range : 0
    conviction = 100 - (wick_ratio * 100)
    
    // Enhanced scoring with conviction factor
    enhanced_score = body_dom * (1 + conviction / 200)
    
    [body_dom, conviction, enhanced_score]

// Professional session detection with market energy
f_get_session_energy() =>
    hour_ny = hour(time, "America/New_York")
    
    if session_adjustment == "Auto-Detect"
        // Enhanced session detection with transition periods
        if hour_ny >= 22 or hour_ny < 3
            [0.6, "Asian-Early"]  // Deep Asian
        else if hour_ny >= 3 and hour_ny < 7
            [0.8, "Asian-Late"]   // Late Asian
        else if hour_ny >= 7 and hour_ny < 9
            [1.5, "London-Open"] // London opening
        else if hour_ny >= 9 and hour_ny < 12
            [2.0, "NY-Morning"]  // NY morning
        else if hour_ny >= 12 and hour_ny < 16
            [1.8, "NY-Afternoon"] // NY afternoon
        else if hour_ny >= 16 and hour_ny < 19
            [1.2, "Evening"]     // Evening
        else
            [0.9, "Night"]       // Night session
    else
        switch session_adjustment
            "Asian (0.8x)" => [0.8, "Asian"]
            "London (1.5x)" => [1.5, "London"]
            "NY (2.0x)" => [2.0, "NY"]
            => [1.0, "Custom"]

// Advanced volume profile analysis
f_volume_profile_analysis() =>
    if not enable_volume_profile or bar_index < volume_flow_period
        [1.0, 0.5, 1.0, "Neutral", false]
    else
        // Calculate institutional volume metrics
        current_vol = volume
        baseline_vol = ta.sma(volume, volume_period)
        vol_ratio = baseline_vol > 0 ? current_vol / baseline_vol : 1.0
        
        // Smart money detection (large volume with small price movement)
        price_change = math.abs(close - open) / open * 100
        volume_to_price_ratio = vol_ratio / (price_change + 0.01)
        smart_money_index = math.min(volume_to_price_ratio / 10, 5.0)
        
        // Volume acceleration calculation
        vol_acceleration = 1.0
        if bar_index >= 3
            recent_vol_avg = (volume + volume[1] + volume[2]) / 3
            past_vol_avg = ta.sma(volume, volume_flow_period)[3]
            if past_vol_avg > 0
                vol_acceleration := recent_vol_avg / past_vol_avg
        
        // Institutional ratio (volume vs normal institutional behavior)
        [session_mult, session_name] = f_get_session_energy()
        institutional_expected = baseline_vol * session_mult
        institutional_ratio = institutional_expected > 0 ? current_vol / institutional_expected : 1.0
        
        // Flow direction analysis
        flow_direction = close > open ? "Bullish" : close < open ? "Bearish" : "Neutral"
        
        // Accumulation detection
        is_accumulation = vol_ratio >= accumulation_sensitivity and price_change < 0.5 and volume_to_price_ratio > 2.0
        
        [institutional_ratio, smart_money_index, vol_acceleration, flow_direction, is_accumulation]

// Enhanced volume validation with institutional logic
f_enhanced_volume_validation() =>
    baseline_volume = ta.sma(volume, volume_period)
    [session_mult, session_name] = f_get_session_energy()
    
    // Professional volume requirements
    required_vol = baseline_volume * volume_multiplier * session_mult
    
    // Volume profile analysis
    [inst_ratio, smart_money, vol_accel, flow_dir, is_accum] = f_volume_profile_analysis()
    
    // Enhanced validation with institutional factors
    basic_valid = volume >= required_vol
    enhanced_valid = basic_valid and (inst_ratio >= 0.8 or smart_money >= smart_money_threshold)
    premium_valid = enhanced_valid and vol_accel >= 1.2 and smart_money >= 2.0
    
    volume_profile = VolumeProfile.new(inst_ratio, smart_money, vol_accel, flow_dir, is_accum)
    
    [basic_valid, enhanced_valid, premium_valid, (volume/baseline_volume), required_vol, session_mult, session_name, volume_profile]

// Enhanced time window detection with priority weighting
f_enhanced_time_window_detection() =>
    current_hour = hour(time, "America/New_York")
    current_minute = minute(time, "America/New_York")
    current_total_seconds = current_hour * 3600 + current_minute * 60 + second
    
    active_window = ""
    window_color = color.gray
    success_rate = 0.0
    pattern_type = ""
    priority_weight = 0.0
    found = false

    if array.size(oracle_windows) > 0
        // Priority-weighted window detection
        for i = 0 to array.size(oracle_windows) - 1
            window = array.get(oracle_windows, i)
            window_seconds = window.hour * 3600 + window.minute * 60
            
            if math.abs(current_total_seconds - window_seconds) <= window.tolerance_seconds
                active_window := window.name
                window_color := window.window_color
                success_rate := window.success_rate
                pattern_type := window.pattern_type
                priority_weight := window.priority_weight
                found := true
                break
    
    [found, active_window, window_color, success_rate, pattern_type, priority_weight]

// Advanced wave analysis with institutional conviction
f_advanced_wave_analysis() =>
    if not enable_wave_analysis or bar_index < 2
        [0, "NONE", false, 0, 0.0]
    else
        // Enhanced wave detection
        lookback = math.min(wave_lookback, bar_index)
        wb_index = 0
        wt_index = 0
        wb_low = high
        wt_high = low
        
        for i = 1 to lookback
            if low[i] < wb_low
                wb_low := low[i]
                wb_index := i
            if high[i] > wt_high
                wt_high := high[i]
                wt_index := i
        
        // Enhanced wave direction with momentum
        is_bullish = close > open
        
        wave_position = is_bullish ? wb_index : wt_index
        wave_type = is_bullish ? "WB+" : "WT+"
        
        // Professional wave quality scoring
        score = 0.0
        [body_dom, conviction, enhanced_body] = f_enhanced_body_dominance()
        [basic_vol, enhanced_vol, premium_vol, vol_ratio, req_vol, session_mult, session_name, vol_profile] = f_enhanced_volume_validation()
        
        // Enhanced scoring components
        // Body conviction (35 points)
        if enhanced_body >= 40
            score += math.min(35, (enhanced_body - 40) / 35 * 35)
        
        // Institutional volume (30 points)
        if vol_profile.institutional_ratio >= 0.8
            score += math.min(30, (vol_profile.institutional_ratio - 0.8) / 1.7 * 30)
        
        // Smart money presence (20 points)
        if vol_profile.smart_money_index >= 1.0
            score += math.min(20, (vol_profile.smart_money_index - 1.0) / 2.0 * 20)
        
        // Volume acceleration (15 points)
        if vol_profile.volume_acceleration >= 1.0
            score += math.min(15, (vol_profile.volume_acceleration - 1.0) / 2.0 * 15)
        
        // Wave confidence calculation
        confidence_lookback = math.min(wave_confidence_period, bar_index)
        consistent_direction = 0
        for i = 0 to confidence_lookback - 1
            if (is_bullish and close[i] > open[i]) or (not is_bullish and close[i] < open[i])
                consistent_direction += 1
        
        wave_confidence = confidence_lookback > 0 ? consistent_direction / confidence_lookback * 100 : 50
        
        [math.round(score), wave_type, is_bullish, wave_position, wave_confidence]

// Master enhanced Oracle quality calculation
f_enhanced_oracle_quality() =>
    // Enhanced core calculations
    [body_dom, conviction, enhanced_body] = f_enhanced_body_dominance()
    [basic_vol, enhanced_vol, premium_vol, vol_ratio, req_vol, session_mult, session_name, vol_profile] = f_enhanced_volume_validation()
    [in_window, window_name, window_color, success_rate, pattern_type, priority_weight] = f_enhanced_time_window_detection()
    [wave_score, wave_type, is_bullish, wave_pos, wave_confidence] = f_advanced_wave_analysis()
    
    // Professional scoring system (0-150 points)
    base_score = 0.0
    
    // Core validation (60 points)
    if enhanced_body >= body_threshold
        base_score += 30
    if enhanced_vol
        base_score += 30
    
    // Premium bonuses (90 points possible)
    if enable_time_windows and in_window
        base_score += (25 * priority_weight)
    if enable_wave_analysis and wave_score >= wave_quality_threshold
        base_score += 25
    if premium_vol
        base_score += 20
    if wave_confidence >= 80
        base_score += 20
    
    // Excellence multipliers
    if vol_profile.smart_money_index >= 3.0
        base_score := base_score * 1.1
    if vol_profile.is_accumulation
        base_score := base_score * 1.05
    
    final_score = math.round(base_score)
    
    // Professional quality assessment
    quality_level = switch
        final_score >= 130 => "ELITE"
        final_score >= 110 => "PREMIUM+"
        final_score >= 90 => "EXCEPTIONAL"
        final_score >= 70 => "HIGH"
        final_score >= 50 => "ACCEPTABLE"
        => "BELOW"
    
    // Confidence level calculation
    confidence_factors = 0
    if enhanced_body >= body_threshold
        confidence_factors += 1
    if enhanced_vol
        confidence_factors += 1
    if in_window
        confidence_factors += 1
    if wave_score >= wave_quality_threshold
        confidence_factors += 1
    if vol_profile.smart_money_index >= 2.0
        confidence_factors += 1
    
    confidence_level = confidence_factors / 5.0 * 100
    
    // Risk assessment
    risk_assessment = switch
        confidence_level >= 90 => "MINIMAL"
        confidence_level >= 70 => "LOW"
        confidence_level >= 50 => "MODERATE"
        confidence_level >= 30 => "HIGH"
        => "EXTREME"
    
    // Generate enhanced signal
    oracle_signal = OracleSignal.new(
         enhanced_body >= body_threshold and enhanced_vol,
         final_score,
         quality_level,
         enhanced_body >= body_threshold and enhanced_vol and in_window,
         enhanced_body >= body_threshold and enhanced_vol and enable_wave_analysis and wave_score >= wave_quality_threshold,
         enhanced_body >= body_threshold and enhanced_vol and vol_profile.smart_money_index >= smart_money_threshold,
         confidence_level,
         risk_assessment
     )
    
    [oracle_signal, body_dom, conviction, enhanced_body, vol_ratio, vol_profile, in_window, window_name, window_color, success_rate, pattern_type, priority_weight, wave_score, wave_type, wave_pos, wave_confidence, session_name]

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 MAIN EXECUTION
// ═══════════════════════════════════════════════════════════════════════════════════

// Initialize enhanced windows on first bar
if barstate.isfirst
    init_enhanced_oracle_windows()

// Calculate enhanced Oracle state
[signal, body_dominance, conviction_level, enhanced_body, volume_ratio, volume_profile, in_time_window, window_name, window_color, window_success_rate, pattern_type, priority_weight, wave_quality_score, wave_type, wave_position, wave_confidence, session_name] = f_enhanced_oracle_quality()
atr_value = f_calculate_atr()

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 PROFESSIONAL VISUAL RENDERING
// ═══════════════════════════════════════════════════════════════════════════════════

// Elite Time Window Visualization
if show_time_windows and enable_time_windows and in_time_window and barstate.isconfirmed and not enable_performance_mode and not preset_minimal
    // Professional gradient background
    box_gradient = switch pattern_type
        "Elite" => color.new(color.yellow, signal_opacity)
        "Premium" => color.new(color.silver, signal_opacity)
        "Executive" => color.new(color.orange, signal_opacity)
        => color.new(window_color, signal_opacity + 10)
    
    // Enhanced time window box with priority indication
    box_height_mult = 1.001 + (priority_weight * 0.002)
    box.new(bar_index - 1, high * box_height_mult, bar_index + 1, low * (2 - box_height_mult), 
             bgcolor=box_gradient, 
             border_color=color.new(color.white, 30),
             border_width=math.round(1 + priority_weight))
    
    // Professional time window label
    label_text = window_name + " (" + str.tostring(window_success_rate, "#.#") + "%) " + pattern_type
    label_color = pattern_type == "Elite" ? color.yellow : pattern_type == "Premium" ? color.silver : color.orange
    
    label.new(bar_index, high * (box_height_mult + 0.005), 
              text=label_text, 
              style=label.style_label_down, 
              color=label_color, 
              textcolor=color.white, 
              size=size.tiny)

// Professional Signal Validation Rendering
if show_validation_signals and signal.is_valid and barstate.isconfirmed and not preset_minimal
    // Elite signal visualization
    base_signal_color = switch signal.quality_level
        "ELITE" => premium_color
        "PREMIUM+" => premium_color
        "EXCEPTIONAL" => exceptional_color
        "HIGH" => confluence_color
        "ACCEPTABLE" => warning_color
        => color.red
    
    // Professional signal box with confidence indication
    confidence_alpha = math.round(40 - (signal.confidence_level * 0.3))
    box.new(bar_index, high, bar_index + 1, low, 
             bgcolor=color.new(base_signal_color, confidence_alpha), 
             border_color=color.new(base_signal_color, 20),
             border_width=2)

// Dynamic High/Low Projection
if enable_projections and signal.is_valid and barstate.isconfirmed and (signal.quality_level == "ELITE" or signal.quality_level == "PREMIUM+" or signal.quality_level == "EXCEPTIONAL") and not preset_minimal
    is_bullish_signal = close > open
    conviction_atr = atr_value * atr_multiplier * (1 + (conviction_level / 200) + (volume_profile.smart_money_index / 10))
    
    if is_bullish_signal
        projected_high = high + conviction_atr
        line.new(bar_index, projected_high, bar_index + 5, projected_high, color=color.new(color.green, 20), style=line.style_dashed, width=2)
        label.new(bar_index + 5, projected_high, "Projected High: " + str.tostring(projected_high, format.mintick), color=color.new(color.green, 20), textcolor=color.white, style=label.style_label_left, size=size.small)
    else
        projected_low = low - conviction_atr
        line.new(bar_index, projected_low, bar_index + 5, projected_low, color=color.new(color.red, 20), style=line.style_dashed, width=2)
        label.new(bar_index + 5, projected_low, "Projected Low: " + str.tostring(projected_low, format.mintick), color=color.new(color.red, 20), textcolor=color.white, style=label.style_label_left, size=size.small)

// Elite Volume Profile Visualization
if show_volume_profile and enable_volume_profile and barstate.isconfirmed and not enable_performance_mode and not preset_minimal
    // Smart money vs retail visualization
    vol_display_height = high + (high - low) * 0.1
    buy_sell_color = close > open ? institutional_buy_color : institutional_sell_color

    if volume_profile.smart_money_index >= smart_money_threshold
        // Smart money dominance
        line.new(bar_index, vol_display_height, bar_index, vol_display_height + (high - low) * 0.05 * volume_profile.smart_money_index,
                 color=buy_sell_color, width=3)
        
        if volume_profile.is_accumulation and enhance_volume_labels
            label_text = close > open ? "🏦 Institutional Buying" : "🏦 Institutional Selling"
            label.new(bar_index, vol_display_height, text=label_text, style=label.style_label_up, color=color.new(buy_sell_color, 10), textcolor=color.white, size=size.small)
        else if volume_profile.is_accumulation
            label.new(bar_index, vol_display_height + (high - low) * 0.08,
                      text="ACCUM",
                      style=label.style_label_up,
                      color=buy_sell_color,
                      textcolor=color.white,
                      size=size.tiny)

// Professional Confidence Bands
if show_confidence_bands and signal.is_valid and barstate.isconfirmed and not enable_performance_mode and not preset_minimal
    // Confidence level visualization
    conf_color = signal.confidence_level >= 80 ? color.green : signal.confidence_level >= 60 ? color.blue : signal.confidence_level >= 40 ? color.orange : color.red
    conf_alpha = math.round(60 - signal.confidence_level * 0.4)
    
    // Confidence band around candle
    box.new(bar_index, high * 1.002, bar_index + 1, low * 0.998, 
             bgcolor=color.new(conf_color, conf_alpha), 
             border_color=color.new(conf_color, 40),
             border_width=1)

// Professional Risk Assessment Labels
if show_risk_labels and signal.is_valid and barstate.isconfirmed and not preset_minimal
    risk_color = switch signal.risk_assessment
        "MINIMAL" => color.green
        "LOW" => color.blue
        "MODERATE" => color.orange
        "HIGH" => color.red
        => color.maroon
    
    risk_text = signal.risk_assessment + " (" + str.tostring(math.round(signal.confidence_level)) + "%)"
    
    label.new(bar_index, low * 0.995, 
              text=risk_text, 
              style=label.style_label_up, 
              color=risk_color, 
              textcolor=color.white, 
              size=size.tiny)

// Elite Signal Shapes (Global Scope)
show_elite = signal.quality_level == "ELITE" and barstate.isconfirmed and not enable_performance_mode
show_premium = signal.quality_level == "PREMIUM+" and barstate.isconfirmed and not enable_performance_mode
show_exceptional = signal.quality_level == "EXCEPTIONAL" and barstate.isconfirmed and not enable_performance_mode
show_time_confluence = signal.time_confluence and barstate.isconfirmed and not enable_performance_mode
show_wave_confluence = signal.wave_confluence and barstate.isconfirmed and not enable_performance_mode
show_volume_confluence = signal.volume_confluence and barstate.isconfirmed and not enable_performance_mode

// Professional signal shapes
plotshape(show_elite, title="Elite Oracle", location=location.abovebar, style=shape.diamond, color=color.new(color.yellow, 0), size=size.large)
if show_elite
    label.new(bar_index, high, text="", style=label.style_none, tooltip="🏆 ELITE ORACLE 🏆\nScore: " + str.tostring(signal.score) + "/150\nQuality: ELITE\nConfidence: " + str.tostring(signal.confidence_level, "0.0") + "%\nRisk: " + signal.risk_assessment + "\n\nMaximum institutional conviction. Represents the highest probability setups identified by the Oracle Alliance system.")

plotshape(show_premium, title="Premium+ Oracle", location=location.abovebar, style=shape.diamond, color=premium_color, size=size.large)
if show_premium
    label.new(bar_index, high, text="", style=label.style_none, tooltip="🥇 PREMIUM+ ORACLE 🥇\nScore: " + str.tostring(signal.score) + "/150\nQuality: PREMIUM+\nConfidence: " + str.tostring(signal.confidence_level, "0.0") + "%\nRisk: " + signal.risk_assessment + "\n\nElite institutional interest detected. Indicates a very strong, high-probability setup.")

plotshape(show_exceptional, title="Exceptional Oracle", location=location.abovebar, style=shape.diamond, color=exceptional_color, size=size.normal)
if show_exceptional
    label.new(bar_index, high, text="", style=label.style_none, tooltip="🥈 EXCEPTIONAL ORACLE 🥈\nScore: " + str.tostring(signal.score) + "/150\nQuality: EXCEPTIONAL\nConfidence: " + str.tostring(signal.confidence_level, "0.0") + "%\nRisk: " + signal.risk_assessment + "\n\nHigh institutional activity confirmed. A strong signal with significant market participation.")

plotshape(show_time_confluence, title="Time Confluence", location=location.abovebar, style=shape.triangleup, color=confluence_color, size=size.small)
if show_time_confluence
    label.new(bar_index, high, text="", style=label.style_none, tooltip="⏰ TIME CONFLUENCE ⏰\nWindow: " + window_name + " (" + pattern_type + ")\nSuccess Rate: " + str.tostring(window_success_rate, "0.0") + "%\n\nThe signal occurred within a high-probability institutional time window, significantly increasing its reliability.")

// Wave Confluence Logic
plotshape(show_wave_confluence and not enhance_wave_labels, title="Wave Confluence", location=location.abovebar, style=shape.circle, color=color.aqua, size=size.small)
if show_wave_confluence
    if enhance_wave_labels
        is_bullish_wave = close > open
        wave_label_text = is_bullish_wave ? "🌊 Institutional Bull Wave 🌊" : "🌊 Institutional Bear Wave 🌊"
        wave_label_style = is_bullish_wave ? label.style_label_down : label.style_label_up
        wave_label_y_pos = is_bullish_wave ? low * 0.99 : high * 1.01
        label.new(bar_index, wave_label_y_pos, text=wave_label_text, style=wave_label_style, color=color.new(color.aqua, 10), textcolor=color.white, size=size.small,
                  tooltip="🌊 WAVE CONFLUENCE 🌊\nWave Quality: " + str.tostring(wave_quality_score) + "/100\nWave Confidence: " + str.tostring(wave_confidence, "0.0") + "%\n\nThe market's wave structure aligns with the signal, indicating strong institutional conviction in the current direction.")
    else
        label.new(bar_index, high, text="", style=label.style_none, tooltip="🌊 WAVE CONFLUENCE 🌊\nWave Quality: " + str.tostring(wave_quality_score) + "/100\nWave Confidence: " + str.tostring(wave_confidence, "0.0") + "%\n\nThe market's wave structure aligns with the signal, indicating strong institutional conviction in the current direction.")

// Volume Confluence Logic
vc_color = close > open ? institutional_buy_color : institutional_sell_color
plotshape(show_volume_confluence, title="Volume Confluence", location=location.abovebar, style=shape.square, color=vc_color, size=size.tiny)
if show_volume_confluence
    label.new(bar_index, high, text="", style=label.style_none, tooltip="🏦 VOLUME CONFLUENCE 🏦\nSmart Money Index: " + str.tostring(volume_profile.smart_money_index, "0.00") + "\nInstitutional Ratio: " + str.tostring(volume_profile.institutional_ratio, "0.00") + "\n\nSmart money activity has been detected, confirming that institutional players are driving the price action.")

// ──────────────────────────────────────────────────────────────────────────
// 🎨 BAR COLOR OVERRIDE – Institutional Accumulation
// Tints the price bars themselves when accumulation/distribution is detected.
// -------------------------------------------------------------------------
color bar_col = na
if volume_profile.is_accumulation and enable_volume_profile and not preset_minimal
    bar_col := close > open ? color.new(institutional_buy_color, 0) : color.new(institutional_sell_color, 0)
barcolor(bar_col)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📋 ENHANCED PROFESSIONAL INFORMATION TABLE
// ═══════════════════════════════════════════════════════════════════════════════════

if show_info_table and barstate.islast and not enable_performance_mode and not preset_minimal
    var table pro_table = table.new(position.top_right, 2, 12, bgcolor=color.new(color.black, 85), border_width=2, frame_color=color.navy, frame_width=2)
    
    // Professional header
    table.cell(pro_table, 0, 0, "Oracle Alliance Pro Enhanced", bgcolor=color.new(color.navy, 60), text_color=color.white, text_size=size.small)
    table.cell(pro_table, 1, 0, "Institutional Grade", bgcolor=color.new(color.navy, 60), text_color=color.white, text_size=size.small)
    
    // Elite Oracle Score
    elite_color = signal.score >= 130 ? color.yellow : signal.score >= 110 ? premium_color : signal.score >= 90 ? exceptional_color : signal.score >= 70 ? confluence_color : signal.score >= 50 ? warning_color : color.red
    table.cell(pro_table, 0, 1, "Oracle Score", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 1, str.tostring(signal.score) + "/150", text_color=elite_color, text_size=size.tiny)
    
    // Quality Rating
    table.cell(pro_table, 0, 2, "Quality Grade", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 2, signal.quality_level, text_color=elite_color, text_size=size.tiny)
    
    // Enhanced Body Analysis
    body_color = enhanced_body >= body_threshold ? color.green : color.red
    table.cell(pro_table, 0, 3, "Body Analysis", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 3, str.tostring(math.round(body_dominance, 1)) + "% (" + str.tostring(math.round(conviction_level, 1)) + ")", text_color=body_color, text_size=size.tiny)
    
    // Institutional Volume
    vol_color = volume_profile.institutional_ratio >= 1.0 ? color.green : color.red
    table.cell(pro_table, 0, 4, "Institutional Vol", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 4, str.tostring(math.round(volume_ratio, 2)) + "x (" + str.tostring(math.round(volume_profile.institutional_ratio, 2)) + ")", text_color=vol_color, text_size=size.tiny)
    
    // Smart Money Index
    smart_color = volume_profile.smart_money_index >= smart_money_threshold ? color.green : color.gray
    table.cell(pro_table, 0, 5, "Smart Money", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 5, str.tostring(math.round(volume_profile.smart_money_index, 2)), text_color=smart_color, text_size=size.tiny)
    
    // Time Window Status
    time_color = in_time_window ? (pattern_type == "Elite" ? color.yellow : color.silver) : color.gray
    table.cell(pro_table, 0, 6, "Time Window", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 6, in_time_window ? window_name + " (" + pattern_type + ")" : "None", text_color=time_color, text_size=size.tiny)
    
    // Wave Analysis
    if enable_wave_analysis
        wave_color = wave_quality_score >= wave_quality_threshold ? color.green : color.orange
        table.cell(pro_table, 0, 7, "Wave Quality", text_size=size.tiny, text_color=color.white)
        table.cell(pro_table, 1, 7, str.tostring(wave_quality_score) + "/100 (" + str.tostring(math.round(wave_confidence)) + "%)", text_color=wave_color, text_size=size.tiny)
        
        table.cell(pro_table, 0, 8, "Wave Position", text_size=size.tiny, text_color=color.white)
        table.cell(pro_table, 1, 8, wave_type + str.tostring(wave_position), text_size=size.tiny)
    
    // Confidence & Risk
    conf_color = signal.confidence_level >= 80 ? color.green : signal.confidence_level >= 60 ? color.blue : color.orange
    table.cell(pro_table, 0, 9, "Confidence", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 9, str.tostring(math.round(signal.confidence_level)) + "%", text_color=conf_color, text_size=size.tiny)
    
    risk_color = signal.risk_assessment == "MINIMAL" ? color.green : signal.risk_assessment == "LOW" ? color.blue : signal.risk_assessment == "MODERATE" ? color.orange : color.red
    table.cell(pro_table, 0, 10, "Risk Level", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 10, signal.risk_assessment, text_color=risk_color, text_size=size.tiny)
    
    // Session Information
    table.cell(pro_table, 0, 11, "Session", text_size=size.tiny, text_color=color.white)
    table.cell(pro_table, 1, 11, session_name, text_size=size.tiny)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 PROFESSIONAL ALERT SYSTEM
// ═══════════════════════════════════════════════════════════════════════════════════

alertcondition(signal.quality_level == "ELITE", title="🏆 Elite Oracle Signal", 
               message="ELITE Oracle Alliance signal detected! Maximum institutional conviction with professional grade validation.")

alertcondition(signal.quality_level == "PREMIUM+", title="🥇 Premium+ Oracle Signal", 
               message="PREMIUM+ Oracle Alliance signal detected! Institutional conviction with enhanced validation.")

alertcondition(signal.quality_level == "EXCEPTIONAL", title="🥈 Exceptional Oracle Signal", 
               message="EXCEPTIONAL Oracle Alliance signal detected! High institutional interest confirmed.")

alertcondition(signal.time_confluence and signal.wave_confluence and signal.volume_confluence, title="⭐ Triple Confluence", 
               message="TRIPLE CONFLUENCE detected! Time + Wave + Volume alignment - Maximum probability setup.")

alertcondition(signal.confidence_level >= 90, title="🎯 High Confidence Signal", 
               message="HIGH CONFIDENCE Oracle signal detected! Professional grade validation with minimal risk.")

// ═══════════════════════════════════════════════════════════════════════════════════
// 📈 ENHANCED DATA PLOTS
// ═══════════════════════════════════════════════════════════════════════════════════

plot(signal.score, title="Enhanced Oracle Score", display=display.none)
plot(signal.confidence_level, title="Confidence Level", display=display.none)
plot(volume_profile.smart_money_index, title="Smart Money Index", display=display.none)
plot(volume_profile.institutional_ratio, title="Institutional Ratio", display=display.none)
plot(wave_confidence, title="Wave Confidence", display=display.none)
plot(priority_weight, title="Time Window Priority", display=display.none)
plot(signal.is_valid ? 1 : 0, title="Signal Valid", display=display.none)
plot(signal.time_confluence ? 1 : 0, title="Time Confluence", display=display.none)
plot(signal.wave_confluence ? 1 : 0, title="Wave Confluence", display=display.none)
plot(signal.volume_confluence ? 1 : 0, title="Volume Confluence", display=display.none)
plot(atr_value, "ATR", display=display.none)

globalAlpha = input.int(20, "Global Overlay Opacity", minval=5, maxval=80)
newCol(c) => color.new(c, globalAlpha) 