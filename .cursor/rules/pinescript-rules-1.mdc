---
description: 
globs: 
alwaysApply: true
---
# Pine Script Rules (Derived from pinescript.json)

This document distills essential language facts and best‑practice rules directly from TradingView's official `pinescript.json` specification. Use it as a quick‑reference checklist when coding in Pine Script v5.

---

## 1 Type Keywords & Forms

| Keyword | Meaning / Usage Rule |
|---------|----------------------|
| `int`, `float`, `bool`, `string`, `color` | Explicitly declare base types when clarity is needed or when initializing with `na`. |
| `line`, `label`, `box`, `table`, `linefill`, `polyline`, `chart.point` | Declare object IDs returned by their respective `*.new()` functions. Always **series form**. |
| `array<type>` or `type[]` | Declare an array holding elements of `type`. Example: `array<float> myFloats = array.new_float()` |
| `simple` | Use in **exported library functions** to demand a *simple* (non‑series) argument, e.g. `emaRight(float src, simple int len) => ta.ema(src,len)` |
| `series` | Implicit for most variables; rarely needs to be stated explicitly unless contrasting with `simple`. |

**Rule 1.1** Prefer implicit typing unless compilation or readability demands explicit keywords.

**Rule 1.2** Do **not** mix type forms inside the same expression; both branches of a conditional must resolve to the same type & form.

---

## 2 Array Handling

1. **Creation**: Use the family of `array.new_<type>(size, initial_value)` functions. The `size` and `initial_value` arguments are optional.
   ```pine
   var array<float> buf = array.new_float(100, na)
   ```
2. **Indexing**: Arrays are **zero‑based** (`array.get(a,0)` is the first element).
3. **Mutability**: Arrays are reference objects; changes through any reference affect the original.
4. **Size Constants**: `size.auto | tiny | small | normal | large | huge` can be passed as the `size` argument.
5. **Common Ops**:
   • `array.push`, `array.pop`
   • `array.shift`, `array.unshift`
   • `array.sort`, `array.sum`, `array.slice`
6. **Rule 2.1** Always check `array.size()` before reading to avoid runtime errors.

---

## 3 Assignment Operators

| Operator | Purpose |
|----------|---------|
| `=`  | Initial declaration & assignment. |
| `:=` | Re‑assignment to an already declared identifier. |
| `+=`, `-=`, `*=`, `/=`, `%=` | Compound arithmetic updates; equivalent to `x = x op y`. |

**Rule 3.1** Use `:=` *only* after variable declaration; never for first assignment.

---

## 4 Core Language Operators

| Operator | Notes |
|----------|-------|
| `?:` (ternary) | Forms: `test ? a : b`. Chainable for *switch‑like* logic. Zero, `NaN`, ±`Infinity` evaluate as *false*. |
| `[]` (series subscript) | Access historical values: `close[1]` is previous bar. `expr2` must be numeric; floats are floored. |
| `+` `-` `*` `/` `%` | Numeric math (element‑wise when inputs are series). `+` also concatenates strings. |
| `==` `!=` `>` `<` `>=` `<=` | Comparison; returns `bool` / `series<bool>`. |

---

## 5 Function Calls & Parameters

1. **Required vs Optional**: Optional parameters have defaults defined in the spec; omit them rather than passing `na` unless function expects it.
2. **Allowed Types**: Check `allowedTypeIDs` in the spec to ensure correct form (`series int`, `simple float`, etc.).
3. **Rule 5.1** Supply arguments in the exact order shown in the official syntax.

Example:
```pine
line.new(x1, y1, x2, y2, color=color.blue, width=2)
```

---

## 6 Object Lifecycle

1. **Creation**: `line.new`, `label.new`, `box.new`, `table.new`, `linefill.new`, `polyline.new` return object IDs.
2. **Deletion**: Use the corresponding `.delete(id)` method to avoid memory leaks on realtime bars.
3. **Rule 6.1** Guard `.delete()` calls with `barstate.islastconfirmedhistory` when cleaning up batch objects.

---

## 7 `na` Handling

- `na` is valid for **all** base types; for arrays use `na` or omit `initial_value`.
- Use `nz(value, replacement)` when substituting `na` values safely.

---

## 8 Best‑Practice Checklist (Quick‑Fire)

- [ ] Script begins with `//@version=5` + `indicator()` or `strategy()`.
- [ ] One statement per line; no backslash continuations.
- [ ] Variables declared before use; correct `=` vs `:=`.
- [ ] Array indices checked via `array.size()`.
- [ ] All ternary branches return the same type & form.
- [ ] Objects created on historical bars cleaned on `barstate.islastconfirmedhistory`.
- [ ] No compilation warnings in the Pine editor.

---

### Reference Links
These rules are summarized from TradingView's official `pinescript.json` API description file (v5). For exhaustive details consult the in‑platform **Pine Script™ Reference Manual**. 