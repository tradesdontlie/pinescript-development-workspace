//@version=6

// @description Risk Management Library for Pine Script indicators and strategies
library("risk_management", overlay=true)

// @function Calculate position size based on account risk percentage
// @param account_balance (float) Total account balance
// @param risk_percentage (float) Percentage of account to risk (e.g., 2.0 for 2%)
// @param entry_price (float) Entry price for the position
// @param stop_loss_price (float) Stop loss price
// @returns (float) Position size in units
export position_size(float account_balance, float risk_percentage, float entry_price, float stop_loss_price) =>
    risk_amount = account_balance * (risk_percentage / 100)
    price_difference = math.abs(entry_price - stop_loss_price)
    position_size = risk_amount / price_difference
    position_size

// @function Calculate risk/reward ratio
// @param entry_price (float) Entry price
// @param stop_loss_price (float) Stop loss price  
// @param take_profit_price (float) Take profit price
// @returns (float) Risk/reward ratio
export risk_reward_ratio(float entry_price, float stop_loss_price, float take_profit_price) =>
    risk = math.abs(entry_price - stop_loss_price)
    reward = math.abs(take_profit_price - entry_price)
    reward / risk

// @function Calculate maximum favorable excursion (MFE)
// @param entry_price (float) Entry price
// @param current_high (float) Highest price since entry
// @param current_low (float) Lowest price since entry
// @param is_long (bool) True for long positions, false for short
// @returns (float) MFE in points
export max_favorable_excursion(float entry_price, float current_high, float current_low, bool is_long) =>
    if is_long
        current_high - entry_price
    else
        entry_price - current_low

// @function Calculate maximum adverse excursion (MAE)
// @param entry_price (float) Entry price
// @param current_high (float) Highest price since entry
// @param current_low (float) Lowest price since entry
// @param is_long (bool) True for long positions, false for short
// @returns (float) MAE in points
export max_adverse_excursion(float entry_price, float current_high, float current_low, bool is_long) =>
    if is_long
        entry_price - current_low
    else
        current_high - entry_price

// @function Calculate Kelly Criterion for optimal position sizing
// @param win_rate (float) Win rate as decimal (e.g., 0.6 for 60%)
// @param avg_win (float) Average winning trade
// @param avg_loss (float) Average losing trade
// @returns (float) Optimal fraction of capital to risk
export kelly_criterion(float win_rate, float avg_win, float avg_loss) =>
    win_rate - ((1 - win_rate) / (avg_win / avg_loss)) 