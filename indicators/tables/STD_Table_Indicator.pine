// This Pine Script™ indicator displays a live table with price levels derived from
// ±standard-deviation multiples of the session's IDR range (high/low of bodies).
// It relies on the `STD_dev_lib` library published under the Trades-Dont-Lie username.
//
// The session is defined by a start/end time string (e.g., "0930-1030").
// Once the session closes, the table populates with prices for each default
// std-dev multiple and keeps updating as price moves (protraction / distribution).
//
// © 2024 Trades-Dont-Lie – MIT / MPL-2.0 dual licence.
//@version=5
indicator("Multi-Session STD-Dev Table", overlay=true, max_lines_count=0, max_labels_count=0, max_boxes_count=0)

import Trades-Dont-Lie/STD_dev_lib/1 as STD

// === USER INPUTS ===
// Toggle which sessions appear
ShowADR     = input.bool(true,  "Show ADR",   group="Sessions")
ShowODR     = input.bool(true,  "Show ODR",   group="Sessions")
ShowRDR     = input.bool(true,  "Show RDR",   group="Sessions")
ShowDaily   = input.bool(true,  "Show Daily", group="Sessions")
ShowWeekly  = input.bool(true,  "Show Weekly",group="Sessions")
ShowMonthly = input.bool(true,  "Show Monthly",group="Sessions")

// Session specs (exchange time strings) – editable in inputs
adrSpec = input.session("1930-2035", "ADR Spec", group="Sessions")
odrSpec = input.session("0300-0400", "ODR Spec", group="Sessions")
rdrSpec = input.session("0930-1030", "RDR Spec", group="Sessions")

TableGroup = "Table Settings"
ShowTable = input.bool(true, "Show Table", group=TableGroup)
TablePositionOpt = input.string("Top Right", options=["Top Left","Top Center","Top Right","Middle Left","Middle Center","Middle Right","Bottom Left","Bottom Center","Bottom Right"], group=TableGroup, title="Position")
TablePos = TablePositionOpt == "Top Left"  ? position.top_left :
           TablePositionOpt == "Top Center"? position.top_center :
           TablePositionOpt == "Top Right" ? position.top_right :
           TablePositionOpt == "Middle Left"? position.middle_left :
           TablePositionOpt == "Middle Center"? position.middle_center :
           TablePositionOpt == "Middle Right"? position.middle_right :
           TablePositionOpt == "Bottom Left"? position.bottom_left :
           TablePositionOpt == "Bottom Center"? position.bottom_center : position.bottom_right
BgColor   = input.color(color.new(color.black,85), "Background", group=TableGroup)
TextColor = input.color(#000000, "Text", group=TableGroup)
TextSizeOpt = input.string("Tiny", title="Font Size", options=["Auto","Tiny","Small","Normal","Large","HUGE"], group=TableGroup)
TextSize = TextSizeOpt == "Auto" ? size.auto : TextSizeOpt == "Tiny" ? size.tiny : TextSizeOpt == "Small" ? size.small : TextSizeOpt == "Normal" ? size.normal : TextSizeOpt == "Large" ? size.large : size.huge

// === INTERNAL STATE ===
type Sess
    string name
    string spec   // blank for D/W/M
    bool   collecting
    bool   finished
    float  hiBody
    float  loBody
    STD.SessionStats st
    int    closeTime          // timestamp when the session froze (UTC milliseconds)

// Initialise session array on first bar
var array<Sess> sessions = na
if barstate.isfirst
    sessions := array.new<Sess>()
    if ShowADR
        array.push(sessions, Sess.new("ADR", adrSpec, false, false, na, na, na, na))
    if ShowODR
        array.push(sessions, Sess.new("ODR", odrSpec, false, false, na, na, na, na))
    if ShowRDR
        array.push(sessions, Sess.new("RDR", rdrSpec, false, false, na, na, na, na))
    if ShowDaily
        array.push(sessions, Sess.new("Daily",   "", false, false, na, na, na, na))
    if ShowWeekly
        array.push(sessions, Sess.new("Weekly",  "", false, false, na, na, na, na))
    if ShowMonthly
        array.push(sessions, Sess.new("Monthly", "", false, false, na, na, na, na))

// === HISTORY CONFIG ===
HistGroup = "History Look-Back"
IntraLookback   = input.int(2,   "Intraday periods", minval=0, maxval=20, group=HistGroup)
DailyLookback   = input.int(2,   "Daily periods",    minval=0, maxval=20, group=HistGroup)
WeeklyLookback  = input.int(2,   "Weekly periods",   minval=0, maxval=20, group=HistGroup)
MonthlyLookback = input.int(1,   "Monthly periods",  minval=0, maxval=20, group=HistGroup)

// Per-type history arrays (most-recent first)
var array<Sess> histADR     = array.new<Sess>()
var array<Sess> histODR     = array.new<Sess>()
var array<Sess> histRDR     = array.new<Sess>()
var array<Sess> histDaily   = array.new<Sess>()
var array<Sess> histWeekly  = array.new<Sess>()
var array<Sess> histMonthly = array.new<Sess>()

// === helper to add a formatted row to a table ===
showRow(_tbl, _row, _s) =>
    string dateStr = _s.finished ? str.format("{0,date,yyyy-MM-dd}", _s.closeTime) : ""
    string dayStr  = _s.finished ? str.format("{0,date,EEE}", _s.closeTime)        : ""
    table.cell(_tbl,0,_row,_s.name,text_color=TextColor,text_size=TextSize)
    table.cell(_tbl,1,_row,dateStr,text_color=TextColor,text_size=TextSize)
    table.cell(_tbl,2,_row,dayStr,text_color=TextColor,text_size=TextSize)
    if _s.finished
        table.cell(_tbl,3,_row,str.tostring(_s.hiBody-_s.loBody,format.price),text_color=TextColor,text_size=TextSize)
        table.cell(_tbl,4,_row,STD.formatStd(_s.st.currentStd),text_color=TextColor,text_size=TextSize)
        table.cell(_tbl,5,_row,str.tostring(_s.st.protraction,"#.##")+"/"+str.tostring(_s.st.distribution,"#.##"),text_color=TextColor,text_size=TextSize)
    else
        table.cell(_tbl,3,_row,"…",text_color=TextColor,text_size=TextSize)
        table.cell(_tbl,4,_row,"collecting",text_color=TextColor,text_size=TextSize)
        table.cell(_tbl,5,_row,"",text_color=TextColor,text_size=TextSize)
    _row // return (ignored)

// ---- 5-minute feed for body values ----
[o5, c5, h5, l5, t5] = request.security(syminfo.tickerid, "5", [open, close, high, low, time], lookahead = barmerge.lookahead_off)

// ===== helper functions =====
// Always interpret session strings in constant UTC-4 (no DST) using TZ code "Etc/GMT+4"
const string UTC4_TZ = "Etc/GMT+4"  // TradingView TZ for fixed UTC-4

isInSpec(string _spec) => not na(time("5", _spec, UTC4_TZ))

// Track ADR / ODR / RDR flags in a **5-minute** series so results are
// independent of the chart timeframe.
[flagADR, flagODR, flagRDR] = request.security(
     syminfo.tickerid, "5",
     [ not na(time("5", adrSpec, UTC4_TZ)),
       not na(time("5", odrSpec, UTC4_TZ)),
       not na(time("5", rdrSpec, UTC4_TZ)) ],
     lookahead = barmerge.lookahead_off)

bool inAdr = flagADR
bool inOdr = flagODR
bool inRdr = flagRDR

var bool prevAdr = false
var bool prevRdr = false

// Calendar references on 5-min feed
int dow  = dayofweek(t5)
int dom  = dayofmonth(t5)
int woy  = weekofyear(t5)
int mon  = month(t5)
int yr   = year(t5)

// ---- iterate sessions ----
for i = 0 to array.size(sessions)-1
    s = array.get(sessions,i)

    // Determine if current 5-min bar should feed this session
    bool inSess = false
    if s.name == "Daily"
        // reset at calendar day change
        if barstate.isfirst and s.finished and dom != dayofmonth(time[1])
            s.collecting := false
            s.finished   := false
        // collect ONLY while ADR is active (m7 behaviour)
        inSess := inAdr and not s.finished
    else if s.name == "Weekly"
        // reset at week change
        if barstate.isfirst and s.finished and woy != weekofyear(time[1])
            s.collecting := false
            s.finished   := false
        // collect ONLY Monday + Tuesday RDR closes
        inSess := inRdr and dow <= dayofweek.tuesday and not s.finished
    else if s.name == "Monthly"
        if barstate.isfirst and s.finished and mon != month(time[1])
            s.collecting := false
            s.finished   := false
        bool beforeAnchorThu = (dow < dayofweek.thursday) or (dow == dayofweek.thursday and dom <= 7)
        // collect ONLY RDR closes up to (and including) first-Thursday RDR
        inSess := inRdr and beforeAnchorThu and not s.finished
    else  // intraday ADR/ODR/RDR rows
        inSess := (s.name == "ADR" ? inAdr : s.name == "ODR" ? inOdr : inRdr)

    // Start collecting
    if inSess and not s.collecting
        s.collecting := true
        s.finished   := false
        s.hiBody     := c5  // m7 uses close values
        s.loBody     := c5

    // Accumulate
    if inSess and s.collecting
        s.hiBody := math.max(s.hiBody, c5)
        s.loBody := math.min(s.loBody, c5)

    // Session just ended (normal intraday or anchor condition)
    bool endNow = false
    if s.name == "ADR" or s.name == "ODR" or s.name == "RDR"
        endNow := (s.collecting and not inSess)
    else if s.name == "Daily"
        // ADR finished triggers daily freeze
        endNow := s.collecting and prevAdr and not inAdr
    else if s.name == "Weekly"
        // first Tuesday RDR finished triggers freeze
        endNow := s.collecting and prevRdr and not inRdr and dow==dayofweek.tuesday
    else if s.name == "Monthly"
        endNow := s.collecting and prevRdr and not inRdr and dow==dayofweek.thursday and dom<=7

    if endNow
        s.collecting := false
        s.finished   := true
        s.st         := STD.newStats(s.hiBody, s.loBody)
        s.closeTime  := t5

        // Take immutable snapshot for history arrays
        Sess snap = Sess.new(s.name, s.spec, false, true, s.hiBody, s.loBody, s.st, s.closeTime)
        array<Sess> tgt = s.name == "ADR" ? histADR : s.name == "ODR" ? histODR : s.name == "RDR" ? histRDR : s.name == "Daily" ? histDaily : s.name == "Weekly" ? histWeekly : histMonthly
        array.unshift(tgt, snap)

        // Trim history according to look-back settings
        int maxLen = s.name == "ADR" or s.name == "ODR" or s.name == "RDR" ? IntraLookback : s.name == "Daily" ? DailyLookback : s.name == "Weekly" ? WeeklyLookback : MonthlyLookback
        while array.size(tgt) > maxLen
            array.pop(tgt)

    // Live updates after finish
    if s.finished and not na(s.st)
        s.st := STD.update(s.st, h5, l5, c5)

    array.set(sessions,i,s)

// update previous flags
prevAdr := inAdr
prevRdr := inRdr

// === TABLE DRAWING ===
var table t = table.new(columns=6, rows=120, position=TablePos, bgcolor=BgColor)

if ShowTable
    // Header
    table.cell(t,0,0,"Session", text_color=TextColor,text_size=TextSize)
    table.cell(t,1,0,"Date",    text_color=TextColor,text_size=TextSize)
    table.cell(t,2,0,"Day",     text_color=TextColor,text_size=TextSize)
    table.cell(t,3,0,"Range",   text_color=TextColor,text_size=TextSize)
    table.cell(t,4,0,"Curr STD",text_color=TextColor,text_size=TextSize)
    table.cell(t,5,0,"Prot/Dist",text_color=TextColor,text_size=TextSize)

    int row = 1
    for i=0 to array.size(sessions)-1
        Sess cur = array.get(sessions,i)
        showRow(t, row, cur)
        row += 1

        // Select corresponding history array & iterate
        array<Sess> hArr = cur.name == "ADR" ? histADR : cur.name == "ODR" ? histODR : cur.name == "RDR" ? histRDR : cur.name == "Daily" ? histDaily : cur.name == "Weekly" ? histWeekly : histMonthly
        int hCount = array.size(hArr)
        if hCount > 0
            for j=0 to hCount-1
                showRow(t, row, array.get(hArr,j))
                row += 1
else
    table.clear(t,0,0) // hide

// Optionally hide table when disabled
if not ShowTable
    table.clear(t,0,0) 