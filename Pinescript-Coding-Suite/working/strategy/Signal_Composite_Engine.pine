//@version=6
indicator("Signal Composite Engine v2", shorttitle="SCE v2", overlay=true)

// === Import TTS Convention library for deal conditions and signal encoding ===
import jason5480/tts_convention/7 as conv

// === User Inputs ===
source_option = input.string(defval="Internal EMA Crossover", title="Signal Source", options=["Internal EMA Crossover", "External Indicators", "Mixed Mode"], group="üîå Signal Sources")

// External signal inputs (expects integer signals encoded per TTS convention)
external_signal_1 = int(input.source(defval=close, title="External Signal #1 üõà", tooltip="Select a plotted value from another indicator that follows the TTS signal convention.", group="üîå Signal Sources"))
external_signal_2 = int(input.source(defval=close, title="External Signal #2 üõà", tooltip="Select a plotted value from another indicator that follows the TTS signal convention.", group="üîå Signal Sources"))

// Signal alignment settings
alignment_group = "‚öñÔ∏è Signal Alignment"
require_both_signals = input.bool(defval=true, title="Require Both Signals to Align", tooltip="When enabled, both external signals must agree before sending a trade signal", group=alignment_group)
signal_1_enabled = input.bool(defval=true, title="Enable Signal #1", group=alignment_group)
signal_2_enabled = input.bool(defval=true, title="Enable Signal #2", group=alignment_group)

// Internal EMA crossover parameters
ema_group = "‚öôÔ∏è Internal EMA Settings"
fast_len = input.int(9, "Fast EMA Length", minval=1, maxval=200, group=ema_group)
slow_len = input.int(21, "Slow EMA Length", minval=1, maxval=200, group=ema_group)

// === INTERNAL INDICATOR CALCULATIONS ===
fast_ema = ta.ema(close, fast_len)
slow_ema = ta.ema(close, slow_len)

cross_up = ta.crossover(fast_ema, slow_ema)
cross_dn = ta.crossunder(fast_ema, slow_ema)

// Build deal conditions for internal EMA crossover
internal_deal = conv.DealConditions.new(cross_up, cross_dn, cross_dn, cross_up, false, false, false, false)
internal_signal = conv.getSignal(internal_deal)

// === EXTERNAL SIGNAL PROCESSING ===
// Get deal conditions from external signals
external_deal_1 = signal_1_enabled ? conv.getDealConditions(external_signal_1) : conv.DealConditions.new(false, false, false, false, false, false, false, false)
external_deal_2 = signal_2_enabled ? conv.getDealConditions(external_signal_2) : conv.DealConditions.new(false, false, false, false, false, false, false, false)

// === SIGNAL ALIGNMENT LOGIC ===
// Check if both signals agree on direction
both_start_long = external_deal_1.startLongDeal and external_deal_2.startLongDeal
both_start_short = external_deal_1.startShortDeal and external_deal_2.startShortDeal
both_end_long = external_deal_1.endLongDeal and external_deal_2.endLongDeal
both_end_short = external_deal_1.endShortDeal and external_deal_2.endShortDeal

// Single signal logic (when only one is enabled or alignment not required)
any_start_long = external_deal_1.startLongDeal or external_deal_2.startLongDeal
any_start_short = external_deal_1.startShortDeal or external_deal_2.startShortDeal
any_end_long = external_deal_1.endLongDeal or external_deal_2.endLongDeal
any_end_short = external_deal_1.endShortDeal or external_deal_2.endShortDeal

// Final aligned signals based on alignment requirement
aligned_start_long = require_both_signals ? both_start_long : any_start_long
aligned_start_short = require_both_signals ? both_start_short : any_start_short
aligned_end_long = require_both_signals ? both_end_long : any_end_long
aligned_end_short = require_both_signals ? both_end_short : any_end_short

// Build composite deal conditions
composite_deal = conv.DealConditions.new(aligned_start_long, aligned_start_short, aligned_end_long, aligned_end_short, false, false, false, false)
composite_signal = conv.getSignal(composite_deal)

// === FINAL SIGNAL SELECTION ===
selected_signal = source_option == "Internal EMA Crossover" ? internal_signal : 
                 source_option == "External Indicators" ? composite_signal : 
                 source_option == "Mixed Mode" ? (internal_signal != 0 ? internal_signal : composite_signal) : 0

selected_deal = source_option == "Internal EMA Crossover" ? internal_deal : 
               source_option == "External Indicators" ? composite_deal : 
               source_option == "Mixed Mode" ? (internal_signal != 0 ? internal_deal : composite_deal) : composite_deal

// === OUTPUT ===
plot(selected_signal, title="üîå Signal to Strategy", color=#808000, display=display.data_window + display.status_line, precision=0)

// Visual aides for internal EMA crossover (only when internal selected or mixed mode)
show_ema = source_option == "Internal EMA Crossover" or source_option == "Mixed Mode"
plot(show_ema ? fast_ema : na, title="Fast EMA", color=color.orange)
plot(show_ema ? slow_ema : na, title="Slow EMA", color=color.blue)

// Main signal shapes
plotshape(selected_deal.startLongDeal, title="Start Long", style=shape.triangleup, location=location.belowbar, color=color.lime, offset=1, size=size.small, display=display.pane)
plotshape(selected_deal.startShortDeal, title="Start Short", style=shape.triangledown, location=location.abovebar, color=color.red, offset=1, size=size.small, display=display.pane)
plotshape(selected_deal.endLongDeal, title="End Long", style=shape.square, location=location.abovebar, color=color.lime, size=size.tiny, display=display.pane)
plotshape(selected_deal.endShortDeal, title="End Short", style=shape.square, location=location.belowbar, color=color.red, size=size.tiny, display=display.pane)

// Individual signal indicators (for debugging/monitoring)
plotchar(source_option == "External Indicators" and signal_1_enabled and external_deal_1.startLongDeal, title="Sig1 Long", char="1", location=location.belowbar, color=color.green, size=size.tiny)
plotchar(source_option == "External Indicators" and signal_1_enabled and external_deal_1.startShortDeal, title="Sig1 Short", char="1", location=location.abovebar, color=color.red, size=size.tiny)
plotchar(source_option == "External Indicators" and signal_2_enabled and external_deal_2.startLongDeal, title="Sig2 Long", char="2", location=location.belowbar, color=color.lime, size=size.tiny)
plotchar(source_option == "External Indicators" and signal_2_enabled and external_deal_2.startShortDeal, title="Sig2 Short", char="2", location=location.abovebar, color=color.maroon, size=size.tiny)

// === ALERTS ===
if selected_deal.startLongDeal and barstate.isconfirmed
    alert("SCE: Start Long", alert.freq_once_per_bar)
if selected_deal.endLongDeal and barstate.isconfirmed
    alert("SCE: End Long", alert.freq_once_per_bar)
if selected_deal.startShortDeal and barstate.isconfirmed
    alert("SCE: Start Short", alert.freq_once_per_bar)
if selected_deal.endShortDeal and barstate.isconfirmed
    alert("SCE: End Short", alert.freq_once_per_bar)

// === DEBUG TABLE (Optional) ===
debug_mode = input.bool(defval=false, title="Show Debug Info", group="üêõ Debug")

if debug_mode
    var table debug_table = table.new(position.top_right, 3, 6, bgcolor=color.white, border_width=1)
    if barstate.islast
        table.cell(debug_table, 0, 0, "Signal", text_color=color.black, bgcolor=color.gray)
        table.cell(debug_table, 1, 0, "Status", text_color=color.black, bgcolor=color.gray)
        table.cell(debug_table, 2, 0, "Value", text_color=color.black, bgcolor=color.gray)
        
        table.cell(debug_table, 0, 1, "Signal 1", text_color=color.black)
        table.cell(debug_table, 1, 1, signal_1_enabled ? "ON" : "OFF", text_color=signal_1_enabled ? color.green : color.red)
        table.cell(debug_table, 2, 1, str.tostring(external_signal_1), text_color=color.black)
        
        table.cell(debug_table, 0, 2, "Signal 2", text_color=color.black)
        table.cell(debug_table, 1, 2, signal_2_enabled ? "ON" : "OFF", text_color=signal_2_enabled ? color.green : color.red)
        table.cell(debug_table, 2, 2, str.tostring(external_signal_2), text_color=color.black)
        
        table.cell(debug_table, 0, 3, "Alignment", text_color=color.black)
        table.cell(debug_table, 1, 3, require_both_signals ? "BOTH" : "ANY", text_color=color.blue)
        table.cell(debug_table, 2, 3, str.tostring(selected_signal), text_color=color.black)
        
        table.cell(debug_table, 0, 4, "Output", text_color=color.black)
        table.cell(debug_table, 1, 4, selected_signal != 0 ? "ACTIVE" : "IDLE", text_color=selected_signal != 0 ? color.green : color.gray)
        table.cell(debug_table, 2, 4, source_option, text_color=color.black) 