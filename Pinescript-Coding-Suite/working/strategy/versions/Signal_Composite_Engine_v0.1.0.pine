//@version=6
indicator("Signal Composite Engine", shorttitle="SCE", overlay=true)

// === Import TTS Convention library for deal conditions and signal encoding ===
import jason5480/tts_convention/7 as conv

// === User Inputs ===
source_option = input.string(defval="Internal EMA Crossover", title="Signal Source", options=["Internal EMA Crossover", "External Indicator"], group="üîå Signal Source")

// External signal input (expects an integer signal encoded per TTS convention)
external_signal = int(input.source(defval=close, title="External Signal üõà", tooltip="Select a plotted value from another indicator that follows the TTS signal convention.", group="üîå Signal Source"))

// Internal EMA crossover parameters
ema_group = "‚öôÔ∏è Internal EMA Settings"
fast_len = input.int(9, "Fast EMA Length", minval=1, maxval=200, group=ema_group)
slow_len = input.int(21, "Slow EMA Length", minval=1, maxval=200, group=ema_group)

// === INTERNAL INDICATOR CALCULATIONS ===
fast_ema = ta.ema(close, fast_len)
slow_ema = ta.ema(close, slow_len)

cross_up = ta.crossover(fast_ema, slow_ema)
cross_dn = ta.crossunder(fast_ema, slow_ema)

// Build deal conditions for internal EMA crossover
internal_deal = conv.DealConditions.new(cross_up, cross_dn, cross_dn, cross_up, false, false, false, false)

internal_signal = conv.getSignal(internal_deal)

// === FINAL SIGNAL SELECTION ===
selected_signal = source_option == "External Indicator" ? external_signal : internal_signal
selected_deal   = source_option == "External Indicator" ? conv.getDealConditions(selected_signal) : internal_deal

// === OUTPUT ===
plot(selected_signal, title="üîå Signal to Strategy", color=#808000, display=display.data_window + display.status_line, precision=0)

// Visual aides for internal EMA crossover (only when internal selected)
plot(source_option == "Internal EMA Crossover" ? fast_ema : na, title="Fast EMA", color=color.orange)
plot(source_option == "Internal EMA Crossover" ? slow_ema : na, title="Slow EMA", color=color.blue)

plotshape(selected_deal.startLongDeal, title="Start Long", style=shape.triangleup, location=location.belowbar, color=color.lime, offset=1, size=size.small, display=display.pane)
plotshape(selected_deal.startShortDeal, title="Start Short", style=shape.triangledown, location=location.abovebar, color=color.red, offset=1, size=size.small, display=display.pane)
plotshape(selected_deal.endLongDeal, title="End Long", style=shape.square, location=location.abovebar, color=color.lime, size=size.tiny, display=display.pane)
plotshape(selected_deal.endShortDeal, title="End Short", style=shape.square, location=location.belowbar, color=color.red, size=size.tiny, display=display.pane)

// === ALERTS ===
if selected_deal.startLongDeal and barstate.isconfirmed
    alert("SCE: Start Long", alert.freq_once_per_bar)
if selected_deal.endLongDeal and barstate.isconfirmed
    alert("SCE: End Long", alert.freq_once_per_bar)
if selected_deal.startShortDeal and barstate.isconfirmed
    alert("SCE: Start Short", alert.freq_once_per_bar)
if selected_deal.endShortDeal and barstate.isconfirmed
    alert("SCE: End Short", alert.freq_once_per_bar) 