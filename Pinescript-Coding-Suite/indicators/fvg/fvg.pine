//@version=5
indicator("TBR 1st FVG's [TDL]", overlay=true, max_boxes_count = 500)

// --- Inputs ---
// FVG Display (General Appearance)
bullColor = input.color(color.new(color.green, 80), title="Bullish Heatmap Color", group="Heatmap / Non-Session Display")
bearColor = input.color(color.new(color.red, 80), title="Bearish Heatmap Color", group="Heatmap / Non-Session Display")
extendBox = true // Changed from input.bool to be always true and hidden
maxBoxes  = input.int(500, title="Max Total Boxes", minval = 10, group="FVG Display")
minFvgTickSize = input.int(4, title="Minimum FVG Size (Ticks)", minval=1, group="FVG Display", tooltip="(Recommended to have a tick size of 4 or more)")
rdrTimezone = input.string("America/New_York", title="Timezone For All Sessions", group="FVG Display")
var int normalExtendLength = 0 // Keep internal variable, no input needed

// --- Lower Timeframe Selection ---
ltfResolutionInput = input.string("1", title="Lower TF for FVG Detection", options=["15S", "1"], group="FVG Display", tooltip="Select the lower timeframe (15 seconds or 1 minute) to use for FVG detection when the chart timeframe is higher.")

// --- Master Filter Controls ---
showNonSessionFVGs = input.bool(false, title="Enable Heatmap", group="Master Filter Controls", tooltip="When enabled, displays all detected FVGs regardless of whether they fall within a defined filter window. Useful for visualizing overall FVG activity. TradesDontLie recommends adjusting the tick size in increments of 10 to see high probability FVG's to determine orderflow.")
showFilter1 = input.bool(true, title="--- 1st Presentation FVG ---", group="Master Filter Controls", tooltip="Thank you Micheal Huddleston (aka ICT) for your teachings and changing the lives of millions. Here is my contribution to traders to help them visualize the market through your teachings on 1st Presented FVG's. All glory goes to God. - love @TradesDontLie")
showFilter2 = input.bool(true, title="--- Weekly FVG's ---", group="Master Filter Controls", tooltip="Using 15-second data may limit historical visibility for weekly FVGs. It is recommended to not use 15sec data for this setting.")
showFilter3 = input.bool(true, title="--- Monthly FVG's ---", group="Master Filter Controls", tooltip="Using 15-second data may limit historical visibility for monthly FVGs. It is recommended to not use 15sec data for this setting.")
showFilter4 = input.bool(false, title="--- Silver Bullet ---", group="Master Filter Controls")
showFilter5 = input.bool(false, title="--- 12AM 1st FVG ---", group="Master Filter Controls")

// --- Heatmap / Non-Session Display ---
normalMaxDaysBack = input.int(3, title="Heatmap Lookback (Days)", minval=0, group="Heatmap / Non-Session Display")

// --- 1st Presentation FVG Settings ---
filter1ShowOnlyFirstOverall = input.bool(true, title="First Overall?", group="1st Presentation FVG Settings", inline="filter1_firstopt", tooltip="First Overall: Toggle On to show only the 1st presented FVG for this filter. \nToggle Off to show the 1st BISI & SIBI (TradesDontLie reccomends this for your stuidy)")
filter1ShowOnlyFirstWeekly = input.bool(false, title="First Weekly?", group="1st Presentation FVG Settings", inline="filter1_firstopt")
filter1ShowOnlyFirstMonthly = input.bool(false, title="First Monthly?", group="1st Presentation FVG Settings", inline="filter1_firstopt")
filter1Hour = input.int(9, title="Start Hour (24h)", minval=0, maxval=23, group="1st Presentation FVG Settings", inline="filter1_time")
filter1Minute = input.int(31, title="Start Minute", minval=0, maxval=59, group="1st Presentation FVG Settings", inline="filter1_time")
filter1EndHour = input.int(10, title="End Hour (24h)", minval=0, maxval=23, group="1st Presentation FVG Settings", inline="filter1_endtime")
filter1EndMinute = input.int(0, title="End Minute", minval=0, maxval=59, group="1st Presentation FVG Settings", inline="filter1_endtime")
filter1BullColor = input.color(color.new(color.blue, 75), title="Bullish Color", group="1st Presentation FVG Settings", inline="filter1_color")
filter1BearColor = input.color(color.new(color.red, 75), title="Bearish Color", group="1st Presentation FVG Settings", inline="filter1_color")
filter1Monday    = input.bool(true, title="Mon", group="1st Presentation FVG Settings", inline="filter1_days")
filter1Tuesday   = input.bool(true, title="Tue", group="1st Presentation FVG Settings", inline="filter1_days")
filter1Wednesday = input.bool(true, title="Wed", group="1st Presentation FVG Settings", inline="filter1_days")
filter1Thursday  = input.bool(true, title="Thu", group="1st Presentation FVG Settings", inline="filter1_days")
filter1Friday    = input.bool(true, title="Fri", group="1st Presentation FVG Settings", inline="filter1_days")
filter1Saturday  = input.bool(true, title="Sat", group="1st Presentation FVG Settings", inline="filter1_days")
filter1Sunday    = input.bool(true, title="Sun", group="1st Presentation FVG Settings", inline="filter1_days")
filter1MaxDaysBack = input.int(5, title="1st Pres. FVG Lookback (Days)", minval=0, group="1st Presentation FVG Settings")
var int filter1ExtendLength = 0 // Internal

// --- Weekly FVG's Settings ---
filter2ShowOnlyFirstOverall = input.bool(true, title="First Overall?", group="Weekly FVG's Settings", inline="filter2_firstopt", tooltip="First Overall: Toggle On to show only the 1st presented FVG for this filter. \nToggle Off to show the 1st BISI & SIBI (TradesDontLie reccomends this for your stuidy)")
filter2ShowOnlyFirstWeekly = input.bool(true, title="First Weekly?", group="Weekly FVG's Settings", inline="filter2_firstopt")
filter2ShowOnlyFirstMonthly = input.bool(false, title="First Monthly?", group="Weekly FVG's Settings", inline="filter2_firstopt")
filter2Hour = input.int(9, title="Start Hour (24h)", minval=0, maxval=23, group="Weekly FVG's Settings", inline="filter2_time")
filter2Minute = input.int(31, title="Start Minute", minval=0, maxval=59, group="Weekly FVG's Settings", inline="filter2_time")
filter2EndHour = input.int(10, title="End Hour (24h)", minval=0, maxval=23, group="Weekly FVG's Settings", inline="filter2_endtime")
filter2EndMinute = input.int(0, title="End Minute", minval=0, maxval=59, group="Weekly FVG's Settings", inline="filter2_endtime")
filter2BullColor = input.color(color.new(color.aqua, 75), title="Bullish Color", group="Weekly FVG's Settings", inline="filter2_color")
filter2BearColor = input.color(color.new(color.teal, 75), title="Bearish Color", group="Weekly FVG's Settings", inline="filter2_color")
filter2Monday    = input.bool(true, title="Mon", group="Weekly FVG's Settings", inline="filter2_days")
filter2Tuesday   = input.bool(true, title="Tue", group="Weekly FVG's Settings", inline="filter2_days")
filter2Wednesday = input.bool(true, title="Wed", group="Weekly FVG's Settings", inline="filter2_days")
filter2Thursday  = input.bool(true, title="Thu", group="Weekly FVG's Settings", inline="filter2_days")
filter2Friday    = input.bool(true, title="Fri", group="Weekly FVG's Settings", inline="filter2_days")
filter2Saturday  = input.bool(true, title="Sat", group="Weekly FVG's Settings", inline="filter2_days")
filter2Sunday    = input.bool(true, title="Sun", group="Weekly FVG's Settings", inline="filter2_days")
filter2MaxDaysBack = input.int(40, title="Weekly FVG's Lookback (Days)", minval=0, group="Weekly FVG's Settings")
var int filter2ExtendLength = 0 // Internal

// --- Monthly FVG's Settings ---
filter3ShowOnlyFirstOverall = input.bool(true, title="First Overall?", group="Monthly FVG's Settings", inline="filter3_firstopt", tooltip="First Overall: Toggle On to show only the 1st presented FVG for this filter. \nToggle Off to show the 1st BISI & SIBI (TradesDontLie reccomends this for your stuidy)")
filter3ShowOnlyFirstWeekly = input.bool(false, title="First Weekly?", group="Monthly FVG's Settings", inline="filter3_firstopt")
filter3ShowOnlyFirstMonthly = input.bool(true, title="First Monthly?", group="Monthly FVG's Settings", inline="filter3_firstopt")
filter3Hour = input.int(9, title="Start Hour (24h)", minval=0, maxval=23, group="Monthly FVG's Settings", inline="filter3_time")
filter3Minute = input.int(31, title="Start Minute", minval=0, maxval=59, group="Monthly FVG's Settings", inline="filter3_time")
filter3EndHour = input.int(10, title="End Hour (24h)", minval=0, maxval=23, group="Monthly FVG's Settings", inline="filter3_endtime")
filter3EndMinute = input.int(0, title="End Minute", minval=0, maxval=59, group="Monthly FVG's Settings", inline="filter3_endtime")
filter3BullColor = input.color(color.new(color.orange, 75), title="Bullish Color", group="Monthly FVG's Settings", inline="filter3_color")
filter3BearColor = input.color(color.new(color.rgb(255, 140, 0), 75), title="Bearish Color", group="Monthly FVG's Settings", inline="filter3_color")
filter3Monday    = input.bool(true, title="Mon", group="Monthly FVG's Settings", inline="filter3_days")
filter3Tuesday   = input.bool(true, title="Tue", group="Monthly FVG's Settings", inline="filter3_days")
filter3Wednesday = input.bool(true, title="Wed", group="Monthly FVG's Settings", inline="filter3_days")
filter3Thursday  = input.bool(true, title="Thu", group="Monthly FVG's Settings", inline="filter3_days")
filter3Friday    = input.bool(true, title="Fri", group="Monthly FVG's Settings", inline="filter3_days")
filter3Saturday  = input.bool(true, title="Sat", group="Monthly FVG's Settings", inline="filter3_days")
filter3Sunday    = input.bool(true, title="Sun", group="Monthly FVG's Settings", inline="filter3_days")
filter3MaxDaysBack = input.int(100, title="Monthly FVG's Lookback (Days)", minval=0, group="Monthly FVG's Settings")
var int filter3ExtendLength = 0 // Internal

// --- Silver Bullet Settings ---
filter4ShowOnlyFirstOverall = input.bool(true, title="First Overall?", group="Silver Bullet Settings", inline="filter4_firstopt", tooltip="First Overall: Toggle On to show only the 1st presented FVG for this filter. \nToggle Off to show the 1st BISI & SIBI (TradesDontLie reccomends this for your stuidy)")
filter4ShowOnlyFirstWeekly = input.bool(false, title="First Weekly?", group="Silver Bullet Settings", inline="filter4_firstopt")
filter4ShowOnlyFirstMonthly = input.bool(false, title="First Monthly?", group="Silver Bullet Settings", inline="filter4_firstopt")
filter4Hour = input.int(10, title="Start Hour (24h)", minval=0, maxval=23, group="Silver Bullet Settings", inline="filter4_time")
filter4Minute = input.int(1, title="Start Minute", minval=0, maxval=59, group="Silver Bullet Settings", inline="filter4_time")
filter4EndHour = input.int(11, title="End Hour (24h)", minval=0, maxval=23, group="Silver Bullet Settings", inline="filter4_endtime")
filter4EndMinute = input.int(0, title="End Minute", minval=0, maxval=59, group="Silver Bullet Settings", inline="filter4_endtime")
filter4BullColor = input.color(color.new(color.green, 75), title="Bullish Color", group="Silver Bullet Settings", inline="filter4_color")
filter4BearColor = input.color(color.new(color.rgb(0, 100, 0), 75), title="Bearish Color", group="Silver Bullet Settings", inline="filter4_color")
filter4Monday    = input.bool(true, title="Mon", group="Silver Bullet Settings", inline="filter4_days")
filter4Tuesday   = input.bool(true, title="Tue", group="Silver Bullet Settings", inline="filter4_days")
filter4Wednesday = input.bool(true, title="Wed", group="Silver Bullet Settings", inline="filter4_days")
filter4Thursday  = input.bool(true, title="Thu", group="Silver Bullet Settings", inline="filter4_days")
filter4Friday    = input.bool(true, title="Fri", group="Silver Bullet Settings", inline="filter4_days")
filter4Saturday  = input.bool(true, title="Sat", group="Silver Bullet Settings", inline="filter4_days")
filter4Sunday    = input.bool(true, title="Sun", group="Silver Bullet Settings", inline="filter4_days")
filter4MaxDaysBack = input.int(1, title="Silver Bullet Lookback (Days)", minval=0, group="Silver Bullet Settings")
var int filter4ExtendLength = 0 // Internal

// --- 12AM 1st FVG Settings ---
filter5ShowOnlyFirstOverall = input.bool(true, title="First Overall?", group="12AM 1st FVG Settings", inline="filter5_firstopt", tooltip="First Overall: Toggle On to show only the 1st presented FVG for this filter. \nToggle Off to show the 1st BISI & SIBI (TradesDontLie reccomends this for your stuidy)")
filter5ShowOnlyFirstWeekly = input.bool(false, title="First Weekly?", group="12AM 1st FVG Settings", inline="filter5_firstopt")
filter5ShowOnlyFirstMonthly = input.bool(false, title="First Monthly?", group="12AM 1st FVG Settings", inline="filter5_firstopt")
filter5Hour = input.int(0, title="Start Hour (24h)", minval=0, maxval=23, group="12AM 1st FVG Settings", inline="filter5_time")
filter5Minute = input.int(1, title="Start Minute", minval=0, maxval=59, group="12AM 1st FVG Settings", inline="filter5_time")
filter5EndHour = input.int(0, title="End Hour (24h)", minval=0, maxval=23, group="12AM 1st FVG Settings", inline="filter5_endtime")
filter5EndMinute = input.int(30, title="End Minute", minval=0, maxval=59, group="12AM 1st FVG Settings", inline="filter5_endtime")
filter5BullColor = input.color(color.new(color.purple, 75), title="Bullish Color", group="12AM 1st FVG Settings", inline="filter5_color")
filter5BearColor = input.color(color.new(color.rgb(75, 0, 130), 75), title="Bearish Color", group="12AM 1st FVG Settings", inline="filter5_color")
filter5Monday    = input.bool(true, title="Mon", group="12AM 1st FVG Settings", inline="filter5_days")
filter5Tuesday   = input.bool(true, title="Tue", group="12AM 1st FVG Settings", inline="filter5_days")
filter5Wednesday = input.bool(true, title="Wed", group="12AM 1st FVG Settings", inline="filter5_days")
filter5Thursday  = input.bool(true, title="Thu", group="12AM 1st FVG Settings", inline="filter5_days")
filter5Friday    = input.bool(true, title="Fri", group="12AM 1st FVG Settings", inline="filter5_days")
filter5Saturday  = input.bool(true, title="Sat", group="12AM 1st FVG Settings", inline="filter5_days")
filter5Sunday    = input.bool(true, title="Sun", group="12AM 1st FVG Settings", inline="filter5_days")
filter5MaxDaysBack = input.int(1, title="12AM 1st FVG Lookback (Days)", minval=0, group="12AM 1st FVG Settings")
var int filter5ExtendLength = 0 // Internal

// --- Box Management (Common for both modes) ---
var box[] bullishBoxes = array.new_box()
var box[] bearishBoxes = array.new_box()
var int[] bullishBoxesTimes = array.new_int()
var int[] bearishBoxesTimes = array.new_int()
var string[] bullishBoxesFilterTypes = array.new_string() // ADDED
var string[] bearishBoxesFilterTypes = array.new_string() // ADDED

// Arrays for dynamic right-edge update (one set per filter + normal)
var box[] filter1BullBoxesToUpdateRight = array.new_box()
var box[] filter1BearBoxesToUpdateRight = array.new_box()
var box[] filter2BullBoxesToUpdateRight = array.new_box()
var box[] filter2BearBoxesToUpdateRight = array.new_box()
var box[] filter3BullBoxesToUpdateRight = array.new_box()
var box[] filter3BearBoxesToUpdateRight = array.new_box()
var box[] filter4BullBoxesToUpdateRight = array.new_box()
var box[] filter4BearBoxesToUpdateRight = array.new_box()
var box[] filter5BullBoxesToUpdateRight = array.new_box()
var box[] filter5BearBoxesToUpdateRight = array.new_box()
var box[] normalBullBoxesToUpdateRight = array.new_box()
var box[] normalBearBoxesToUpdateRight = array.new_box()

// Storage for confirmed 1-min FVGs detected on HTF before plotting
var array<float> ltfBullFvgTops = array.new_float()
var array<float> ltfBullFvgBottoms = array.new_float()
var array<int>   ltfBullFvgLeftTimes = array.new_int()
var array<int>   ltfBullFvgRightTimes = array.new_int()
var array<string> ltfBullFvgFilterTypes = array.new_string() // e.g., "filter1", "filter2", "filter3", "filter4", "filter5", "normal"

var array<float> ltfBearFvgTops = array.new_float()
var array<float> ltfBearFvgBottoms = array.new_float()
var array<int>   ltfBearFvgLeftTimes = array.new_int()
var array<int>   ltfBearFvgRightTimes = array.new_int()
var array<string> ltfBearFvgFilterTypes = array.new_string() // e.g., "filter1", "filter2", "filter3", "filter4", "filter5", "normal"

// --- Lower Timeframe Data Fetch (Unconditional) ---
[tfTime, tfHigh, tfLow] = request.security_lower_tf(syminfo.tickerid, ltfResolutionInput, [time, high, low])

// --- Timeframe Check ---
isChartBaseTimeframe = timeframe.period == ltfResolutionInput

// --- State variables for HTF boundary crossing ---
var int   prev1LTFCandleT = na
var float prev1LTFCandleH = na
var float prev1LTFCandleL = na
var int   prev2LTFCandleT = na
var float prev2LTFCandleH = na
var float prev2LTFCandleL = na

// --- Daily Reset Logic & Filter State ---
var bool firstFilter1BullFvgPlottedToday = false
var bool firstFilter1BearFvgPlottedToday = false
var bool firstFilter2BullFvgPlottedToday = false
var bool firstFilter2BearFvgPlottedToday = false
var bool firstFilter3BullFvgPlottedToday = false
var bool firstFilter3BearFvgPlottedToday = false
var bool firstFilter4BullFvgPlottedToday = false
var bool firstFilter4BearFvgPlottedToday = false
var bool firstFilter5BullFvgPlottedToday = false
var bool firstFilter5BearFvgPlottedToday = false

// --- Weekly State Variables ---
var bool firstFilter1BullFvgPlottedThisWeek = false
var bool firstFilter1BearFvgPlottedThisWeek = false
var bool firstFilter2BullFvgPlottedThisWeek = false
var bool firstFilter2BearFvgPlottedThisWeek = false
var bool firstFilter3BullFvgPlottedThisWeek = false
var bool firstFilter3BearFvgPlottedThisWeek = false
var bool firstFilter4BullFvgPlottedThisWeek = false
var bool firstFilter4BearFvgPlottedThisWeek = false
var bool firstFilter5BullFvgPlottedThisWeek = false
var bool firstFilter5BearFvgPlottedThisWeek = false

// --- Monthly State Variables ---
var bool firstFilter1OverallFvgPlottedThisMonth = false
var bool firstFilter1BullFvgPlottedThisMonth = false
var bool firstFilter1BearFvgPlottedThisMonth = false
var bool firstFilter2OverallFvgPlottedThisMonth = false
var bool firstFilter2BullFvgPlottedThisMonth = false
var bool firstFilter2BearFvgPlottedThisMonth = false
var bool firstFilter3OverallFvgPlottedThisMonth = false
var bool firstFilter3BullFvgPlottedThisMonth = false
var bool firstFilter3BearFvgPlottedThisMonth = false
var bool firstFilter4OverallFvgPlottedThisMonth = false
var bool firstFilter4BullFvgPlottedThisMonth = false
var bool firstFilter4BearFvgPlottedThisMonth = false
var bool firstFilter5OverallFvgPlottedThisMonth = false
var bool firstFilter5BullFvgPlottedThisMonth = false
var bool firstFilter5BearFvgPlottedThisMonth = false

// --- Month Change Detection ---
var int prevMonth = na
isNewMonth = na(prevMonth) or month != prevMonth
prevMonth := month

// --- Monthly Reset Logic ---
if isNewMonth
    firstFilter1OverallFvgPlottedThisMonth := false
    firstFilter1BullFvgPlottedThisMonth := false
    firstFilter1BearFvgPlottedThisMonth := false
    firstFilter2OverallFvgPlottedThisMonth := false
    firstFilter2BullFvgPlottedThisMonth := false
    firstFilter2BearFvgPlottedThisMonth := false
    firstFilter3OverallFvgPlottedThisMonth := false
    firstFilter3BullFvgPlottedThisMonth := false
    firstFilter3BearFvgPlottedThisMonth := false
    firstFilter4OverallFvgPlottedThisMonth := false
    firstFilter4BullFvgPlottedThisMonth := false
    firstFilter4BearFvgPlottedThisMonth := false
    firstFilter5OverallFvgPlottedThisMonth := false
    firstFilter5BullFvgPlottedThisMonth := false
    firstFilter5BearFvgPlottedThisMonth := false

// --- NEW: Weekly Overall State Variables (for combined Overall+Weekly mode) ---
var bool firstFilter1OverallFvgPlottedThisWeek = false
var bool firstFilter2OverallFvgPlottedThisWeek = false
var bool firstFilter3OverallFvgPlottedThisWeek = false
var bool firstFilter4OverallFvgPlottedThisWeek = false
var bool firstFilter5OverallFvgPlottedThisWeek = false

// --- Day Change Detection & Reset ---
currentDay = dayofmonth(time, rdrTimezone)
previousDay = dayofmonth(time[1], rdrTimezone)
isNewDay = currentDay != previousDay

// --- Week Change Detection ---
isNewWeek = weekofyear != weekofyear[1]

MS_PER_DAY = 86400000
currentDayStartTimestamp = timestamp(rdrTimezone, year(time, rdrTimezone), month(time, rdrTimezone), dayofmonth(time, rdrTimezone), 0, 0, 0)

// Reset ALL flags on a new day
if isNewDay
    firstFilter1BullFvgPlottedToday := false
    firstFilter1BearFvgPlottedToday := false
    firstFilter2BullFvgPlottedToday := false
    firstFilter2BearFvgPlottedToday := false
    firstFilter3BullFvgPlottedToday := false
    firstFilter3BearFvgPlottedToday := false
    firstFilter4BullFvgPlottedToday := false
    firstFilter4BearFvgPlottedToday := false
    firstFilter5BullFvgPlottedToday := false
    firstFilter5BearFvgPlottedToday := false

// Reset Weekly flags on a new week
if isNewWeek
    firstFilter1BullFvgPlottedThisWeek := false
    firstFilter1BearFvgPlottedThisWeek := false
    firstFilter2BullFvgPlottedThisWeek := false
    firstFilter2BearFvgPlottedThisWeek := false
    firstFilter3BullFvgPlottedThisWeek := false
    firstFilter3BearFvgPlottedThisWeek := false
    firstFilter4BullFvgPlottedThisWeek := false
    firstFilter4BearFvgPlottedThisWeek := false
    firstFilter5BullFvgPlottedThisWeek := false
    firstFilter5BearFvgPlottedThisWeek := false
    // Reset NEW weekly overall flags
    firstFilter1OverallFvgPlottedThisWeek := false
    firstFilter2OverallFvgPlottedThisWeek := false
    firstFilter3OverallFvgPlottedThisWeek := false
    firstFilter4OverallFvgPlottedThisWeek := false
    firstFilter5OverallFvgPlottedThisWeek := false

// --- Filter Identifiers ---
SESSION_FILTER1 = "filter1"
SESSION_FILTER2 = "filter2"
SESSION_FILTER3 = "filter3"
SESSION_FILTER4 = "filter4"
SESSION_FILTER5 = "filter5"
SESSION_NORMAL = "normal" // For non-filtered FVGs

// --- Helper Function: Check if time is in a specific filter window ---
// Handles overnight filters like Filter 1 (e.g., 18:00 Day 1 to 03:00 Day 2)
isInFilterWindow(t, tz, startH, startM, endH, endM) =>
    // Get the timestamp for the filter start ON THE DAY OF t.
    filterStart = timestamp(tz, year(t, tz), month(t, tz), dayofmonth(t, tz), startH, startM, 0)
    // Get the timestamp for the filter end ON THE DAY OF t.
    filterEnd = timestamp(tz, year(t, tz), month(t, tz), dayofmonth(t, tz), endH, endM, 0)

    if filterStart <= filterEnd // Normal same-day filter (e.g., 09:30-11:30)
        t >= filterStart and t < filterEnd
    else // Overnight filter (e.g., 18:00-03:00)
        // Is 't' after the start time today? (e.g., t is 19:00 today, filter starts 18:00 today)
        afterStartToday = t >= filterStart
        // Is 't' before the end time today? (e.g., t is 01:00 today, filter ends 03:00 today)
        beforeEndToday = t < filterEnd
        // It's in the window if *either* of these is true for an overnight filter
        afterStartToday or beforeEndToday

// =========================================================================
// --- Logic Branch 1: Chart is 1 Minute ---
// =========================================================================
if isChartBaseTimeframe
    // Standard FVG Detection with Size Filter (Calculate once)
    minTickValue = minFvgTickSize * syminfo.mintick
    isBullishFvg = high[2] < low[0] and (low[0] - high[2]) >= minTickValue
    isBearishFvg = low[2] > high[0] and (low[2] - high[0]) >= minTickValue

    // --- Filter FVG Processing ---

    // --- Process Filter 1 ---
    isDaySelectedForFilter1 = not na(time[1]) and (
                              (dayofweek(time[1]) == dayofweek.monday and filter1Monday) or 
                              (dayofweek(time[1]) == dayofweek.tuesday and filter1Tuesday) or 
                              (dayofweek(time[1]) == dayofweek.wednesday and filter1Wednesday) or 
                              (dayofweek(time[1]) == dayofweek.thursday and filter1Thursday) or 
                              (dayofweek(time[1]) == dayofweek.friday and filter1Friday) or 
                              (dayofweek(time[1]) == dayofweek.saturday and filter1Saturday) or 
                              (dayofweek(time[1]) == dayofweek.sunday and filter1Sunday))

    filter1CutoffTimestamp = filter1MaxDaysBack > 0 ? currentDayStartTimestamp - filter1MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp 

    if showFilter1 and isDaySelectedForFilter1 and time[1] >= filter1CutoffTimestamp and isInFilterWindow(time[1], rdrTimezone, filter1Hour, filter1Minute, filter1EndHour, filter1EndMinute)

        // --- Calculate Plot Permissions (Revised Hierarchy: Monthly > Weekly > Daily) ---
        plotPermissionBull = true
        plotPermissionBear = true

        // MONTHLY CHECKS (Highest Priority)
        if filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstMonthly and firstFilter1OverallFvgPlottedThisMonth
            plotPermissionBull := false
            plotPermissionBear := false
        else if not (filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstMonthly) and filter1ShowOnlyFirstMonthly // Monthly First-of-Type
            if firstFilter1BullFvgPlottedThisMonth
                plotPermissionBull := false
            if firstFilter1BearFvgPlottedThisMonth
                plotPermissionBear := false

        // WEEKLY CHECKS (Only if Monthly allows plotting)
        if plotPermissionBull or plotPermissionBear 
            if filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstWeekly and firstFilter1OverallFvgPlottedThisWeek
                plotPermissionBull := false
                plotPermissionBear := false
            else if not (filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstWeekly) and filter1ShowOnlyFirstWeekly // Weekly First-of-Type
                if plotPermissionBull and firstFilter1BullFvgPlottedThisWeek
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter1BearFvgPlottedThisWeek
                    plotPermissionBear := false
        
        // DAILY CHECKS (Only if Monthly AND Weekly allow plotting)
        if plotPermissionBull or plotPermissionBear 
            if filter1ShowOnlyFirstOverall and (firstFilter1BullFvgPlottedToday or firstFilter1BearFvgPlottedToday)
                plotPermissionBull := false
                plotPermissionBear := false
            else if not filter1ShowOnlyFirstOverall // Daily First-of-Type
                if plotPermissionBull and firstFilter1BullFvgPlottedToday
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter1BearFvgPlottedToday
                    plotPermissionBear := false

        // --- Plotting --- (Flag updates also revised)
        if plotPermissionBull and isBullishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[0], boxRightVal, high[2], bgcolor = filter1BullColor, border_color = filter1BullColor, extend = boxExtendVal)
            array.push(bullishBoxes, boxId)
            array.push(bullishBoxesTimes, time)
            array.push(bullishBoxesFilterTypes, SESSION_FILTER1)
            if not extendBox
                array.push(filter1BullBoxesToUpdateRight, boxId)
            firstFilter1BullFvgPlottedToday := true
            firstFilter1BullFvgPlottedThisWeek := true
            firstFilter1BullFvgPlottedThisMonth := true
            if filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstWeekly
                firstFilter1OverallFvgPlottedThisWeek := true
            if filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstMonthly
                firstFilter1OverallFvgPlottedThisMonth := true

        if plotPermissionBear and isBearishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[2], boxRightVal, high[0], bgcolor = filter1BearColor, border_color = filter1BearColor, extend = boxExtendVal)
            array.push(bearishBoxes, boxId)
            array.push(bearishBoxesTimes, time)
            array.push(bearishBoxesFilterTypes, SESSION_FILTER1)
            if not extendBox
                array.push(filter1BearBoxesToUpdateRight, boxId)
            firstFilter1BearFvgPlottedToday := true
            firstFilter1BearFvgPlottedThisWeek := true
            firstFilter1BearFvgPlottedThisMonth := true
            if filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstWeekly
                firstFilter1OverallFvgPlottedThisWeek := true
            if filter1ShowOnlyFirstOverall and filter1ShowOnlyFirstMonthly
                firstFilter1OverallFvgPlottedThisMonth := true

    // --- Process Filter 2 ---
    isDaySelectedForFilter2 = not na(time[1]) and (
                              (dayofweek(time[1]) == dayofweek.monday and filter2Monday) or 
                              (dayofweek(time[1]) == dayofweek.tuesday and filter2Tuesday) or 
                              (dayofweek(time[1]) == dayofweek.wednesday and filter2Wednesday) or 
                              (dayofweek(time[1]) == dayofweek.thursday and filter2Thursday) or 
                              (dayofweek(time[1]) == dayofweek.friday and filter2Friday) or 
                              (dayofweek(time[1]) == dayofweek.saturday and filter2Saturday) or 
                              (dayofweek(time[1]) == dayofweek.sunday and filter2Sunday))

    filter2CutoffTimestamp = filter2MaxDaysBack > 0 ? currentDayStartTimestamp - filter2MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

    if showFilter2 and isDaySelectedForFilter2 and (not na(time[1]) and time[1] >= filter2CutoffTimestamp and isInFilterWindow(time[1], rdrTimezone, filter2Hour, filter2Minute, filter2EndHour, filter2EndMinute))

        // --- Calculate Plot Permissions (Revised Hierarchy: Monthly > Weekly > Daily) ---
        plotPermissionBull = true
        plotPermissionBear = true

        // MONTHLY CHECKS
        if filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstMonthly and firstFilter2OverallFvgPlottedThisMonth
            plotPermissionBull := false
            plotPermissionBear := false
        else if not (filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstMonthly) and filter2ShowOnlyFirstMonthly
            if firstFilter2BullFvgPlottedThisMonth
                plotPermissionBull := false
            if firstFilter2BearFvgPlottedThisMonth
                plotPermissionBear := false

        // WEEKLY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstWeekly and firstFilter2OverallFvgPlottedThisWeek
                plotPermissionBull := false
                plotPermissionBear := false
            else if not (filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstWeekly) and filter2ShowOnlyFirstWeekly
                if plotPermissionBull and firstFilter2BullFvgPlottedThisWeek
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter2BearFvgPlottedThisWeek
                    plotPermissionBear := false
        
        // DAILY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter2ShowOnlyFirstOverall and (firstFilter2BullFvgPlottedToday or firstFilter2BearFvgPlottedToday)
                plotPermissionBull := false
                plotPermissionBear := false
            else if not filter2ShowOnlyFirstOverall
                if plotPermissionBull and firstFilter2BullFvgPlottedToday
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter2BearFvgPlottedToday
                    plotPermissionBear := false

        // --- Plotting --- (Flag updates also revised)
        if plotPermissionBull and isBullishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[0], boxRightVal, high[2], bgcolor = filter2BullColor, border_color = filter2BullColor, extend = boxExtendVal)
            array.push(bullishBoxes, boxId)
            array.push(bullishBoxesTimes, time)
            array.push(bullishBoxesFilterTypes, SESSION_FILTER2)
            if not extendBox
                array.push(filter2BullBoxesToUpdateRight, boxId)
            firstFilter2BullFvgPlottedToday := true
            firstFilter2BullFvgPlottedThisWeek := true
            firstFilter2BullFvgPlottedThisMonth := true
            if filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstWeekly
                firstFilter2OverallFvgPlottedThisWeek := true
            if filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstMonthly
                firstFilter2OverallFvgPlottedThisMonth := true

        if plotPermissionBear and isBearishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[2], boxRightVal, high[0], bgcolor = filter2BearColor, border_color = filter2BearColor, extend = boxExtendVal)
            array.push(bearishBoxes, boxId)
            array.push(bearishBoxesTimes, time)
            array.push(bearishBoxesFilterTypes, SESSION_FILTER2)
            if not extendBox
                array.push(filter2BearBoxesToUpdateRight, boxId)
            firstFilter2BearFvgPlottedToday := true
            firstFilter2BearFvgPlottedThisWeek := true
            firstFilter2BearFvgPlottedThisMonth := true
            if filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstWeekly
                firstFilter2OverallFvgPlottedThisWeek := true
            if filter2ShowOnlyFirstOverall and filter2ShowOnlyFirstMonthly
                firstFilter2OverallFvgPlottedThisMonth := true

    // --- Process Filter 3 ---
    isDaySelectedForFilter3 = not na(time[1]) and (
                              (dayofweek(time[1]) == dayofweek.monday and filter3Monday) or 
                              (dayofweek(time[1]) == dayofweek.tuesday and filter3Tuesday) or 
                              (dayofweek(time[1]) == dayofweek.wednesday and filter3Wednesday) or 
                              (dayofweek(time[1]) == dayofweek.thursday and filter3Thursday) or 
                              (dayofweek(time[1]) == dayofweek.friday and filter3Friday) or 
                              (dayofweek(time[1]) == dayofweek.saturday and filter3Saturday) or 
                              (dayofweek(time[1]) == dayofweek.sunday and filter3Sunday))

    filter3CutoffTimestamp = filter3MaxDaysBack > 0 ? currentDayStartTimestamp - filter3MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

    if showFilter3 and isDaySelectedForFilter3 and (not na(time[1]) and time[1] >= filter3CutoffTimestamp and isInFilterWindow(time[1], rdrTimezone, filter3Hour, filter3Minute, filter3EndHour, filter3EndMinute))

        // --- Calculate Plot Permissions (Revised Hierarchy: Monthly > Weekly > Daily) ---
        plotPermissionBull = true
        plotPermissionBear = true

        // MONTHLY CHECKS
        if filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstMonthly and firstFilter3OverallFvgPlottedThisMonth
            plotPermissionBull := false
            plotPermissionBear := false
        else if not (filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstMonthly) and filter3ShowOnlyFirstMonthly
            if firstFilter3BullFvgPlottedThisMonth
                plotPermissionBull := false
            if firstFilter3BearFvgPlottedThisMonth
                plotPermissionBear := false

        // WEEKLY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstWeekly and firstFilter3OverallFvgPlottedThisWeek
                plotPermissionBull := false
                plotPermissionBear := false
            else if not (filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstWeekly) and filter3ShowOnlyFirstWeekly
                if plotPermissionBull and firstFilter3BullFvgPlottedThisWeek
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter3BearFvgPlottedThisWeek
                    plotPermissionBear := false
        
        // DAILY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter3ShowOnlyFirstOverall and (firstFilter3BullFvgPlottedToday or firstFilter3BearFvgPlottedToday)
                plotPermissionBull := false
                plotPermissionBear := false
            else if not filter3ShowOnlyFirstOverall
                if plotPermissionBull and firstFilter3BullFvgPlottedToday
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter3BearFvgPlottedToday
                    plotPermissionBear := false

        // --- Plotting --- (Flag updates also revised)
        if plotPermissionBull and isBullishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[0], boxRightVal, high[2], bgcolor = filter3BullColor, border_color = filter3BullColor, extend = boxExtendVal)
            array.push(bullishBoxes, boxId)
            array.push(bullishBoxesTimes, time)
            array.push(bullishBoxesFilterTypes, SESSION_FILTER3)
            if not extendBox
                array.push(filter3BullBoxesToUpdateRight, boxId)
            firstFilter3BullFvgPlottedToday := true
            firstFilter3BullFvgPlottedThisWeek := true
            firstFilter3BullFvgPlottedThisMonth := true
            if filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstWeekly
                firstFilter3OverallFvgPlottedThisWeek := true
            if filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstMonthly
                firstFilter3OverallFvgPlottedThisMonth := true

        if plotPermissionBear and isBearishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[2], boxRightVal, high[0], bgcolor = filter3BearColor, border_color = filter3BearColor, extend = boxExtendVal)
            array.push(bearishBoxes, boxId)
            array.push(bearishBoxesTimes, time)
            array.push(bearishBoxesFilterTypes, SESSION_FILTER3)
            if not extendBox
                array.push(filter3BearBoxesToUpdateRight, boxId)
            firstFilter3BearFvgPlottedToday := true
            firstFilter3BearFvgPlottedThisWeek := true
            firstFilter3BearFvgPlottedThisMonth := true
            if filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstWeekly
                firstFilter3OverallFvgPlottedThisWeek := true
            if filter3ShowOnlyFirstOverall and filter3ShowOnlyFirstMonthly
                firstFilter3OverallFvgPlottedThisMonth := true

    // --- Process Filter 4 ---
    isDaySelectedForFilter4 = not na(time[1]) and (
                              (dayofweek(time[1]) == dayofweek.monday and filter4Monday) or 
                              (dayofweek(time[1]) == dayofweek.tuesday and filter4Tuesday) or 
                              (dayofweek(time[1]) == dayofweek.wednesday and filter4Wednesday) or 
                              (dayofweek(time[1]) == dayofweek.thursday and filter4Thursday) or 
                              (dayofweek(time[1]) == dayofweek.friday and filter4Friday) or 
                              (dayofweek(time[1]) == dayofweek.saturday and filter4Saturday) or 
                              (dayofweek(time[1]) == dayofweek.sunday and filter4Sunday))

    filter4CutoffTimestamp = filter4MaxDaysBack > 0 ? currentDayStartTimestamp - filter4MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

    if showFilter4 and isDaySelectedForFilter4 and (not na(time[1]) and time[1] >= filter4CutoffTimestamp and isInFilterWindow(time[1], rdrTimezone, filter4Hour, filter4Minute, filter4EndHour, filter4EndMinute))

        // --- Calculate Plot Permissions (Revised Hierarchy: Monthly > Weekly > Daily) ---
        plotPermissionBull = true
        plotPermissionBear = true

        // MONTHLY CHECKS
        if filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstMonthly and firstFilter4OverallFvgPlottedThisMonth
            plotPermissionBull := false
            plotPermissionBear := false
        else if not (filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstMonthly) and filter4ShowOnlyFirstMonthly
            if firstFilter4BullFvgPlottedThisMonth
                plotPermissionBull := false
            if firstFilter4BearFvgPlottedThisMonth
                plotPermissionBear := false

        // WEEKLY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstWeekly and firstFilter4OverallFvgPlottedThisWeek
                plotPermissionBull := false
                plotPermissionBear := false
            else if not (filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstWeekly) and filter4ShowOnlyFirstWeekly
                if plotPermissionBull and firstFilter4BullFvgPlottedThisWeek
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter4BearFvgPlottedThisWeek
                    plotPermissionBear := false
        
        // DAILY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter4ShowOnlyFirstOverall and (firstFilter4BullFvgPlottedToday or firstFilter4BearFvgPlottedToday)
                plotPermissionBull := false
                plotPermissionBear := false
            else if not filter4ShowOnlyFirstOverall
                if plotPermissionBull and firstFilter4BullFvgPlottedToday
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter4BearFvgPlottedToday
                    plotPermissionBear := false

        // --- Plotting --- (Flag updates also revised)
        if plotPermissionBull and isBullishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[0], boxRightVal, high[2], bgcolor = filter4BullColor, border_color = filter4BullColor, extend = boxExtendVal)
            array.push(bullishBoxes, boxId)
            array.push(bullishBoxesTimes, time)
            array.push(bullishBoxesFilterTypes, SESSION_FILTER4)
            if not extendBox
                array.push(filter4BullBoxesToUpdateRight, boxId)
            firstFilter4BullFvgPlottedToday := true
            firstFilter4BullFvgPlottedThisWeek := true
            firstFilter4BullFvgPlottedThisMonth := true
            if filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstWeekly
                firstFilter4OverallFvgPlottedThisWeek := true
            if filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstMonthly
                firstFilter4OverallFvgPlottedThisMonth := true

        if plotPermissionBear and isBearishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[2], boxRightVal, high[0], bgcolor = filter4BearColor, border_color = filter4BearColor, extend = boxExtendVal)
            array.push(bearishBoxes, boxId)
            array.push(bearishBoxesTimes, time)
            array.push(bearishBoxesFilterTypes, SESSION_FILTER4)
            if not extendBox
                array.push(filter4BearBoxesToUpdateRight, boxId)
            firstFilter4BearFvgPlottedToday := true
            firstFilter4BearFvgPlottedThisWeek := true
            firstFilter4BearFvgPlottedThisMonth := true
            if filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstWeekly
                firstFilter4OverallFvgPlottedThisWeek := true
            if filter4ShowOnlyFirstOverall and filter4ShowOnlyFirstMonthly
                firstFilter4OverallFvgPlottedThisMonth := true

    // --- Process Filter 5 ---
    isDaySelectedForFilter5 = not na(time[1]) and (
                              (dayofweek(time[1]) == dayofweek.monday and filter5Monday) or 
                              (dayofweek(time[1]) == dayofweek.tuesday and filter5Tuesday) or 
                              (dayofweek(time[1]) == dayofweek.wednesday and filter5Wednesday) or 
                              (dayofweek(time[1]) == dayofweek.thursday and filter5Thursday) or 
                              (dayofweek(time[1]) == dayofweek.friday and filter5Friday) or 
                              (dayofweek(time[1]) == dayofweek.saturday and filter5Saturday) or 
                              (dayofweek(time[1]) == dayofweek.sunday and filter5Sunday))

    filter5CutoffTimestamp = filter5MaxDaysBack > 0 ? currentDayStartTimestamp - filter5MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

    if showFilter5 and isDaySelectedForFilter5 and (not na(time[1]) and time[1] >= filter5CutoffTimestamp and isInFilterWindow(time[1], rdrTimezone, filter5Hour, filter5Minute, filter5EndHour, filter5EndMinute))

        // --- Calculate Plot Permissions (Revised Hierarchy: Monthly > Weekly > Daily) ---
        plotPermissionBull = true
        plotPermissionBear = true

        // MONTHLY CHECKS
        if filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstMonthly and firstFilter5OverallFvgPlottedThisMonth
            plotPermissionBull := false
            plotPermissionBear := false
        else if not (filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstMonthly) and filter5ShowOnlyFirstMonthly
            if firstFilter5BullFvgPlottedThisMonth
                plotPermissionBull := false
            if firstFilter5BearFvgPlottedThisMonth
                plotPermissionBear := false

        // WEEKLY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstWeekly and firstFilter5OverallFvgPlottedThisWeek
                plotPermissionBull := false
                plotPermissionBear := false
            else if not (filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstWeekly) and filter5ShowOnlyFirstWeekly
                if plotPermissionBull and firstFilter5BullFvgPlottedThisWeek
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter5BearFvgPlottedThisWeek
                    plotPermissionBear := false
        
        // DAILY CHECKS
        if plotPermissionBull or plotPermissionBear 
            if filter5ShowOnlyFirstOverall and (firstFilter5BullFvgPlottedToday or firstFilter5BearFvgPlottedToday)
                plotPermissionBull := false
                plotPermissionBear := false
            else if not filter5ShowOnlyFirstOverall
                if plotPermissionBull and firstFilter5BullFvgPlottedToday
                    plotPermissionBull := false
                if plotPermissionBear and firstFilter5BearFvgPlottedToday
                    plotPermissionBear := false

        // --- Plotting --- (Flag updates also revised)
        if plotPermissionBull and isBullishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[0], boxRightVal, high[2], bgcolor = filter5BullColor, border_color = filter5BullColor, extend = boxExtendVal)
            array.push(bullishBoxes, boxId)
            array.push(bullishBoxesTimes, time)
            array.push(bullishBoxesFilterTypes, SESSION_FILTER5)
            if not extendBox
                array.push(filter5BullBoxesToUpdateRight, boxId)
            firstFilter5BullFvgPlottedToday := true
            firstFilter5BullFvgPlottedThisWeek := true
            firstFilter5BullFvgPlottedThisMonth := true
            if filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstWeekly
                firstFilter5OverallFvgPlottedThisWeek := true
            if filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstMonthly
                firstFilter5OverallFvgPlottedThisMonth := true

        if plotPermissionBear and isBearishFvg
            boxExtendVal = extendBox ? extend.right : extend.none
            boxRightVal = bar_index
            boxId = box.new(bar_index[1], low[2], boxRightVal, high[0], bgcolor = filter5BearColor, border_color = filter5BearColor, extend = boxExtendVal)
            array.push(bearishBoxes, boxId)
            array.push(bearishBoxesTimes, time)
            array.push(bearishBoxesFilterTypes, SESSION_FILTER5)
            if not extendBox
                array.push(filter5BearBoxesToUpdateRight, boxId)
            firstFilter5BearFvgPlottedToday := true
            firstFilter5BearFvgPlottedThisWeek := true
            firstFilter5BearFvgPlottedThisMonth := true
            if filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstWeekly
                firstFilter5OverallFvgPlottedThisWeek := true
            if filter5ShowOnlyFirstOverall and filter5ShowOnlyFirstMonthly
                firstFilter5OverallFvgPlottedThisMonth := true

    // Calculate Normal/Heatmap specific cutoff time
    // If 0 days back, cutoff is the start of the current day
    normalCutoffTimestamp = normalMaxDaysBack > 0 ? currentDayStartTimestamp - normalMaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

    // --- Plot Normal FVGs (Heatmap) ONLY IF NOT Plotted by a Filter AND Enabled by Input ---
    // Use the specific cutoff timestamp for the heatmap
    // For normal FVGs, the visual start (middle candle) should also be within the lookback.
    if showNonSessionFVGs and (not na(time[1]) and time[1] >= normalCutoffTimestamp) 
        // --- Normal Bullish ---
        if isBullishFvg
            normal_extend_val = extendBox ? extend.right : extend.none
            normal_right_val = bar_index
            bullBox = box.new(bar_index[1], low[0], normal_right_val, high[2], bgcolor = bullColor, border_color = bullColor, extend= normal_extend_val)
            array.push(bullishBoxes, bullBox)
            array.push(bullishBoxesTimes, time)
            array.push(bullishBoxesFilterTypes, SESSION_NORMAL) // ADDED
            if not extendBox
                array.push(normalBullBoxesToUpdateRight, bullBox)

        // --- Normal Bearish ---
        if isBearishFvg
            normal_extend_val = extendBox ? extend.right : extend.none
            normal_right_val = bar_index
            bearBox = box.new(bar_index[1], low[2], normal_right_val, high[0], bgcolor = bearColor, border_color = bearColor, extend= normal_extend_val)
            array.push(bearishBoxes, bearBox)
            array.push(bearishBoxesTimes, time)
            array.push(bearishBoxesFilterTypes, SESSION_NORMAL) // ADDED
            if not extendBox
                array.push(normalBearBoxesToUpdateRight, bearBox)

// =========================================================================
// --- Logic Branch 2: Chart is Higher Than 1 Minute ---
// =========================================================================
else // If chart timeframe is > 1min
    array.clear(ltfBullFvgTops)
    array.clear(ltfBullFvgBottoms)
    array.clear(ltfBullFvgLeftTimes)
    array.clear(ltfBullFvgRightTimes)
    array.clear(ltfBullFvgFilterTypes)
    array.clear(ltfBearFvgTops)
    array.clear(ltfBearFvgBottoms)
    array.clear(ltfBearFvgLeftTimes)
    array.clear(ltfBearFvgRightTimes)
    array.clear(ltfBearFvgFilterTypes)

    array<int>   combinedTime = array.new_int()
    array<float> combinedHigh = array.new_float()
    array<float> combinedLow  = array.new_float()

    if not na(prev2LTFCandleT)
        array.push(combinedTime, prev2LTFCandleT)
        array.push(combinedHigh, prev2LTFCandleH)
        array.push(combinedLow,  prev2LTFCandleL)
    if not na(prev1LTFCandleT)
        array.push(combinedTime, prev1LTFCandleT)
        array.push(combinedHigh, prev1LTFCandleH)
        array.push(combinedLow,  prev1LTFCandleL)

    if not na(tfTime) and array.size(tfTime) > 0
        for i = 0 to array.size(tfTime) - 1
            array.push(combinedTime, array.get(tfTime, i))
            array.push(combinedHigh, array.get(tfHigh, i))
            array.push(combinedLow, array.get(tfLow, i))

    if array.size(combinedHigh) >= 3
        minTickValue_ltf = minFvgTickSize * syminfo.mintick
        for i = 2 to array.size(combinedHigh) - 1
            currentLow   = array.get(combinedLow, i)
            currentHigh  = array.get(combinedHigh, i)
            currentTime  = array.get(combinedTime, i)
            prevHigh     = array.get(combinedHigh, i-1)
            prevLow      = array.get(combinedLow, i-1)
            prevTime     = array.get(combinedTime, i-1)
            prevPrevHigh = array.get(combinedHigh, i-2)
            prevPrevLow  = array.get(combinedLow, i-2)

            isBullishFvg_ltf = prevPrevHigh < currentLow and (currentLow - prevPrevHigh) >= minTickValue_ltf
            isBearishFvg_ltf = prevPrevLow > currentHigh and (prevPrevLow - currentHigh) >= minTickValue_ltf
            
            prevTimeDayOfWeek_ltf = not na(prevTime) ? dayofweek(prevTime, rdrTimezone) : na // Correctly placed and single declaration

            // --- Process for Filter 1 ---
            filter1CutoffTimestamp_ltf = filter1MaxDaysBack > 0 ? currentDayStartTimestamp - filter1MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
            isDaySelectedForFilter1_ltf = not na(prevTimeDayOfWeek_ltf) and ((prevTimeDayOfWeek_ltf == dayofweek.monday and filter1Monday) or (prevTimeDayOfWeek_ltf == dayofweek.tuesday and filter1Tuesday) or (prevTimeDayOfWeek_ltf == dayofweek.wednesday and filter1Wednesday) or (prevTimeDayOfWeek_ltf == dayofweek.thursday and filter1Thursday) or (prevTimeDayOfWeek_ltf == dayofweek.friday and filter1Friday) or (prevTimeDayOfWeek_ltf == dayofweek.saturday and filter1Saturday) or (prevTimeDayOfWeek_ltf == dayofweek.sunday and filter1Sunday))
            if showFilter1 and isDaySelectedForFilter1_ltf and (not na(prevTime) and prevTime >= filter1CutoffTimestamp_ltf and isInFilterWindow(prevTime, rdrTimezone, filter1Hour, filter1Minute, filter1EndHour, filter1EndMinute))
                plotBull1 = true
                plotBear1 = true
                if filter1ShowOnlyFirstOverall and (firstFilter1BullFvgPlottedToday or firstFilter1BearFvgPlottedToday)
                    plotBull1 := false
                    plotBear1 := false
                else if not filter1ShowOnlyFirstOverall
                    if firstFilter1BullFvgPlottedToday
                        plotBull1 := false
                    if firstFilter1BearFvgPlottedToday
                        plotBear1 := false
                
                if isBullishFvg_ltf and plotBull1
                    array.push(ltfBullFvgTops, currentLow)
                    array.push(ltfBullFvgBottoms, prevPrevHigh)
                    array.push(ltfBullFvgLeftTimes, prevTime)
                    array.push(ltfBullFvgRightTimes, currentTime)
                    array.push(ltfBullFvgFilterTypes, SESSION_FILTER1)
                    firstFilter1BullFvgPlottedToday := true
                if isBearishFvg_ltf and plotBear1
                    array.push(ltfBearFvgTops, prevPrevLow)
                    array.push(ltfBearFvgBottoms, currentHigh)
                    array.push(ltfBearFvgLeftTimes, prevTime)
                    array.push(ltfBearFvgRightTimes, currentTime)
                    array.push(ltfBearFvgFilterTypes, SESSION_FILTER1)
                    firstFilter1BearFvgPlottedToday := true

            // --- Process for Filter 2 ---
            filter2CutoffTimestamp_ltf = filter2MaxDaysBack > 0 ? currentDayStartTimestamp - filter2MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
            isDaySelectedForFilter2_ltf = not na(prevTimeDayOfWeek_ltf) and ((prevTimeDayOfWeek_ltf == dayofweek.monday and filter2Monday) or (prevTimeDayOfWeek_ltf == dayofweek.tuesday and filter2Tuesday) or (prevTimeDayOfWeek_ltf == dayofweek.wednesday and filter2Wednesday) or (prevTimeDayOfWeek_ltf == dayofweek.thursday and filter2Thursday) or (prevTimeDayOfWeek_ltf == dayofweek.friday and filter2Friday) or (prevTimeDayOfWeek_ltf == dayofweek.saturday and filter2Saturday) or (prevTimeDayOfWeek_ltf == dayofweek.sunday and filter2Sunday))
            if showFilter2 and isDaySelectedForFilter2_ltf and (not na(prevTime) and prevTime >= filter2CutoffTimestamp_ltf and isInFilterWindow(prevTime, rdrTimezone, filter2Hour, filter2Minute, filter2EndHour, filter2EndMinute))
                plotBull2 = true
                plotBear2 = true
                if filter2ShowOnlyFirstOverall and (firstFilter2BullFvgPlottedToday or firstFilter2BearFvgPlottedToday)
                    plotBull2 := false
                    plotBear2 := false
                else if not filter2ShowOnlyFirstOverall
                    if firstFilter2BullFvgPlottedToday
                        plotBull2 := false
                    if firstFilter2BearFvgPlottedToday
                        plotBear2 := false

                if isBullishFvg_ltf and plotBull2
                    array.push(ltfBullFvgTops, currentLow)
                    array.push(ltfBullFvgBottoms, prevPrevHigh)
                    array.push(ltfBullFvgLeftTimes, prevTime)
                    array.push(ltfBullFvgRightTimes, currentTime)
                    array.push(ltfBullFvgFilterTypes, SESSION_FILTER2)
                    firstFilter2BullFvgPlottedToday := true
                if isBearishFvg_ltf and plotBear2
                    array.push(ltfBearFvgTops, prevPrevLow)
                    array.push(ltfBearFvgBottoms, currentHigh)
                    array.push(ltfBearFvgLeftTimes, prevTime)
                    array.push(ltfBearFvgRightTimes, currentTime)
                    array.push(ltfBearFvgFilterTypes, SESSION_FILTER2)
                    firstFilter2BearFvgPlottedToday := true

            // --- Process for Filter 3 ---
            filter3CutoffTimestamp_ltf = filter3MaxDaysBack > 0 ? currentDayStartTimestamp - filter3MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
            isDaySelectedForFilter3_ltf = not na(prevTimeDayOfWeek_ltf) and ((prevTimeDayOfWeek_ltf == dayofweek.monday and filter3Monday) or (prevTimeDayOfWeek_ltf == dayofweek.tuesday and filter3Tuesday) or (prevTimeDayOfWeek_ltf == dayofweek.wednesday and filter3Wednesday) or (prevTimeDayOfWeek_ltf == dayofweek.thursday and filter3Thursday) or (prevTimeDayOfWeek_ltf == dayofweek.friday and filter3Friday) or (prevTimeDayOfWeek_ltf == dayofweek.saturday and filter3Saturday) or (prevTimeDayOfWeek_ltf == dayofweek.sunday and filter3Sunday))
            if showFilter3 and isDaySelectedForFilter3_ltf and (not na(prevTime) and prevTime >= filter3CutoffTimestamp_ltf and isInFilterWindow(prevTime, rdrTimezone, filter3Hour, filter3Minute, filter3EndHour, filter3EndMinute))
                plotBull3 = true
                plotBear3 = true
                if filter3ShowOnlyFirstOverall and (firstFilter3BullFvgPlottedToday or firstFilter3BearFvgPlottedToday)
                    plotBull3 := false
                    plotBear3 := false
                else if not filter3ShowOnlyFirstOverall
                    if firstFilter3BullFvgPlottedToday
                        plotBull3 := false
                    if firstFilter3BearFvgPlottedToday
                        plotBear3 := false

                if isBullishFvg_ltf and plotBull3
                    array.push(ltfBullFvgTops, currentLow)
                    array.push(ltfBullFvgBottoms, prevPrevHigh)
                    array.push(ltfBullFvgLeftTimes, prevTime)
                    array.push(ltfBullFvgRightTimes, currentTime)
                    array.push(ltfBullFvgFilterTypes, SESSION_FILTER3)
                    firstFilter3BullFvgPlottedToday := true
                if isBearishFvg_ltf and plotBear3
                    array.push(ltfBearFvgTops, prevPrevLow)
                    array.push(ltfBearFvgBottoms, currentHigh)
                    array.push(ltfBearFvgLeftTimes, prevTime)
                    array.push(ltfBearFvgRightTimes, currentTime)
                    array.push(ltfBearFvgFilterTypes, SESSION_FILTER3)
                    firstFilter3BearFvgPlottedToday := true
            
            // --- Process for Filter 4 ---
            filter4CutoffTimestamp_ltf = filter4MaxDaysBack > 0 ? currentDayStartTimestamp - filter4MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
            isDaySelectedForFilter4_ltf = not na(prevTimeDayOfWeek_ltf) and ((prevTimeDayOfWeek_ltf == dayofweek.monday and filter4Monday) or (prevTimeDayOfWeek_ltf == dayofweek.tuesday and filter4Tuesday) or (prevTimeDayOfWeek_ltf == dayofweek.wednesday and filter4Wednesday) or (prevTimeDayOfWeek_ltf == dayofweek.thursday and filter4Thursday) or (prevTimeDayOfWeek_ltf == dayofweek.friday and filter4Friday) or (prevTimeDayOfWeek_ltf == dayofweek.saturday and filter4Saturday) or (prevTimeDayOfWeek_ltf == dayofweek.sunday and filter4Sunday))
            if showFilter4 and isDaySelectedForFilter4_ltf and (not na(prevTime) and prevTime >= filter4CutoffTimestamp_ltf and isInFilterWindow(prevTime, rdrTimezone, filter4Hour, filter4Minute, filter4EndHour, filter4EndMinute))
                plotBull4 = true
                plotBear4 = true
                if filter4ShowOnlyFirstOverall and (firstFilter4BullFvgPlottedToday or firstFilter4BearFvgPlottedToday)
                    plotBull4 := false
                    plotBear4 := false
                else if not filter4ShowOnlyFirstOverall
                    if firstFilter4BullFvgPlottedToday
                        plotBull4 := false
                    if firstFilter4BearFvgPlottedToday
                        plotBear4 := false

                if isBullishFvg_ltf and plotBull4
                    array.push(ltfBullFvgTops, currentLow)
                    array.push(ltfBullFvgBottoms, prevPrevHigh)
                    array.push(ltfBullFvgLeftTimes, prevTime)
                    array.push(ltfBullFvgRightTimes, currentTime)
                    array.push(ltfBullFvgFilterTypes, SESSION_FILTER4)
                    firstFilter4BullFvgPlottedToday := true
                if isBearishFvg_ltf and plotBear4
                    array.push(ltfBearFvgTops, prevPrevLow)
                    array.push(ltfBearFvgBottoms, currentHigh)
                    array.push(ltfBearFvgLeftTimes, prevTime)
                    array.push(ltfBearFvgRightTimes, currentTime)
                    array.push(ltfBearFvgFilterTypes, SESSION_FILTER4)
                    firstFilter4BearFvgPlottedToday := true

            // --- Process for Filter 5 ---
            filter5CutoffTimestamp_ltf = filter5MaxDaysBack > 0 ? currentDayStartTimestamp - filter5MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
            isDaySelectedForFilter5_ltf = not na(prevTimeDayOfWeek_ltf) and ((prevTimeDayOfWeek_ltf == dayofweek.monday and filter5Monday) or (prevTimeDayOfWeek_ltf == dayofweek.tuesday and filter5Tuesday) or (prevTimeDayOfWeek_ltf == dayofweek.wednesday and filter5Wednesday) or (prevTimeDayOfWeek_ltf == dayofweek.thursday and filter5Thursday) or (prevTimeDayOfWeek_ltf == dayofweek.friday and filter5Friday) or (prevTimeDayOfWeek_ltf == dayofweek.saturday and filter5Saturday) or (prevTimeDayOfWeek_ltf == dayofweek.sunday and filter5Sunday))
            if showFilter5 and isDaySelectedForFilter5_ltf and (not na(prevTime) and prevTime >= filter5CutoffTimestamp_ltf and isInFilterWindow(prevTime, rdrTimezone, filter5Hour, filter5Minute, filter5EndHour, filter5EndMinute))
                plotBull5 = true
                plotBear5 = true
                if filter5ShowOnlyFirstOverall and (firstFilter5BullFvgPlottedToday or firstFilter5BearFvgPlottedToday)
                    plotBull5 := false
                    plotBear5 := false
                else if not filter5ShowOnlyFirstOverall
                    if firstFilter5BullFvgPlottedToday
                        plotBull5 := false
                    if firstFilter5BearFvgPlottedToday
                        plotBear5 := false

                if isBullishFvg_ltf and plotBull5
                    array.push(ltfBullFvgTops, currentLow)
                    array.push(ltfBullFvgBottoms, prevPrevHigh)
                    array.push(ltfBullFvgLeftTimes, prevTime)
                    array.push(ltfBullFvgRightTimes, currentTime)
                    array.push(ltfBullFvgFilterTypes, SESSION_FILTER5)
                    firstFilter5BullFvgPlottedToday := true
                if isBearishFvg_ltf and plotBear5
                    array.push(ltfBearFvgTops, prevPrevLow)
                    array.push(ltfBearFvgBottoms, currentHigh)
                    array.push(ltfBearFvgLeftTimes, prevTime)
                    array.push(ltfBearFvgRightTimes, currentTime)
                    array.push(ltfBearFvgFilterTypes, SESSION_FILTER5)
                    firstFilter5BearFvgPlottedToday := true

            // --- Process for Normal/Heatmap (SESSION_NORMAL) ---
            normalCutoffTimestamp_ltf = normalMaxDaysBack > 0 ? currentDayStartTimestamp - normalMaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
            // Normal FVGs are not restricted by filter windows or specific day selections other than the general lookback.
            // They also don't typically use "first plotted today" logic within the HTF detection phase for storage.
            // The main check is if showNonSessionFVGs is true and the FVG is within its lookback.
            // Also, normal FVGs should not be plotted if any specific filter ALREADY plotted for this exact 1-min bar.
            // However, the current request is for filter independence, so we will assume for now that normal FVGs are processed independently as well.
            // A more sophisticated logic might check if this 1-min FVG was *already* captured by ANY filter above for this `currentTime`.
            // For simplicity and directness to the user's request, we process it independently.
            
            // We need to ensure that a normal FVG is not added if it falls into an *active* filter window that has already processed it.
            // This is tricky. The current structure processes filters 1-5, then normal.
            // Let's define a boolean to track if any specific filter has "claimed" this FVG.
            // This part is complex because an FVG might be valid for a filter but not plotted due to "first only" rules.
            // For now, we will assume normal FVGs are added if showNonSessionFVGs is true and within heatmap lookback,
            // and not explicitly check against prior filter claims in this loop. The plotting loop for normal FVGs later
            // will just plot them. If a filter also plotted, they might overlap, which is acceptable under "independence".

            // For normal FVGs, the visual start (middle candle, prevTime) should also be within its lookback.
            if showNonSessionFVGs and (not na(prevTime) and prevTime >= normalCutoffTimestamp_ltf)
                if isBullishFvg_ltf
                    array.push(ltfBullFvgTops, currentLow)
                    array.push(ltfBullFvgBottoms, prevPrevHigh)
                    array.push(ltfBullFvgLeftTimes, prevTime)
                    array.push(ltfBullFvgRightTimes, currentTime)
                    array.push(ltfBullFvgFilterTypes, SESSION_NORMAL)
                if isBearishFvg_ltf
                    array.push(ltfBearFvgTops, prevPrevLow)
                    array.push(ltfBearFvgBottoms, currentHigh)
                    array.push(ltfBearFvgLeftTimes, prevTime)
                    array.push(ltfBearFvgRightTimes, currentTime)
                    array.push(ltfBearFvgFilterTypes, SESSION_NORMAL)
        // End of the main detection loop (for i = 2 to array.size(combinedHigh) - 1)

    // --- Plot confirmed 1-min FVGs stored for this HTF bar ---
    // Moved these loops outside the detection loop above
    // Plot Bullish FVGs stored in ltf... arrays
    if array.size(ltfBullFvgTops) > 0
        for i = 0 to array.size(ltfBullFvgTops) - 1
            fvgTop = array.get(ltfBullFvgTops, i)
            fvgBottom = array.get(ltfBullFvgBottoms, i)
            fvgLeftTime = array.get(ltfBullFvgLeftTimes, i)
            fvgRightTime = array.get(ltfBullFvgRightTimes, i)
            fvgFilterType = array.get(ltfBullFvgFilterTypes, i)

            // Get filter-specific settings
            showOnlyOverall = fvgFilterType == SESSION_FILTER1 ? filter1ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER2 ? filter2ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER3 ? filter3ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER4 ? filter4ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER5 ? filter5ShowOnlyFirstOverall : false
            showOnlyWeekly = fvgFilterType == SESSION_FILTER1 ? filter1ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER2 ? filter2ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER3 ? filter3ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER4 ? filter4ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER5 ? filter5ShowOnlyFirstWeekly : false
            showOnlyMonthly = fvgFilterType == SESSION_FILTER1 ? filter1ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER2 ? filter2ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER3 ? filter3ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER4 ? filter4ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER5 ? filter5ShowOnlyFirstMonthly : false

            // Get relevant state flags for this FVG's filter type
            overallMonthlyPlotted = (fvgFilterType == SESSION_FILTER1 and firstFilter1OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER2 and firstFilter2OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER3 and firstFilter3OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER4 and firstFilter4OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER5 and firstFilter5OverallFvgPlottedThisMonth)
            bullMonthlyPlotted    = (fvgFilterType == SESSION_FILTER1 and firstFilter1BullFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER2 and firstFilter2BullFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER3 and firstFilter3BullFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER4 and firstFilter4BullFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER5 and firstFilter5BullFvgPlottedThisMonth)
            overallWeeklyPlotted  = (fvgFilterType == SESSION_FILTER1 and firstFilter1OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER2 and firstFilter2OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER3 and firstFilter3OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER4 and firstFilter4OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER5 and firstFilter5OverallFvgPlottedThisWeek)
            bullWeeklyPlotted     = (fvgFilterType == SESSION_FILTER1 and firstFilter1BullFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER2 and firstFilter2BullFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER3 and firstFilter3BullFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER4 and firstFilter4BullFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER5 and firstFilter5BullFvgPlottedThisWeek)

            plotThisBox = true

            // MONTHLY CHECKS (Highest Priority)
            if showOnlyOverall and showOnlyMonthly and overallMonthlyPlotted
                plotThisBox := false
            else if not (showOnlyOverall and showOnlyMonthly) and showOnlyMonthly and bullMonthlyPlotted
                plotThisBox := false

            // WEEKLY CHECKS (Only if Monthly allows plotting)
            if plotThisBox
                if showOnlyOverall and showOnlyWeekly and overallWeeklyPlotted
                    plotThisBox := false
                else if not (showOnlyOverall and showOnlyWeekly) and showOnlyWeekly and bullWeeklyPlotted
                    plotThisBox := false
            
            // Daily checks are implicitly handled by the fact that these FVGs are already filtered by daily logic before being added to ltf... arrays.

            if plotThisBox and fvgFilterType != SESSION_NORMAL // Normal (heatmap) FVGs don't have these special first-of-period restrictions
                // Determine color based on filter type
                boxColor = fvgFilterType == SESSION_FILTER1 ? filter1BullColor :
                           fvgFilterType == SESSION_FILTER2 ? filter2BullColor :
                           fvgFilterType == SESSION_FILTER3 ? filter3BullColor :
                           fvgFilterType == SESSION_FILTER4 ? filter4BullColor :
                           fvgFilterType == SESSION_FILTER5 ? filter5BullColor :
                           bullColor 

                boxExtend = extendBox ? extend.right : extend.none
                boxRightEdge = extendBox ? fvgRightTime : time

                bullBox_ltf = box.new(left=fvgLeftTime, top=fvgTop, right=boxRightEdge, bottom=fvgBottom,
                     bgcolor=boxColor, border_color=boxColor, extend=boxExtend, xloc=xloc.bar_time)
                array.push(bullishBoxes, bullBox_ltf)
                array.push(bullishBoxesTimes, fvgRightTime)
                array.push(bullishBoxesFilterTypes, fvgFilterType)

                // Update flags AFTER plotting for this filter type
                if fvgFilterType == SESSION_FILTER1
                    firstFilter1BullFvgPlottedThisWeek := true
                    firstFilter1BullFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter1OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter1OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER2
                    firstFilter2BullFvgPlottedThisWeek := true
                    firstFilter2BullFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter2OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter2OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER3
                    firstFilter3BullFvgPlottedThisWeek := true
                    firstFilter3BullFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter3OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter3OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER4
                    firstFilter4BullFvgPlottedThisWeek := true
                    firstFilter4BullFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter4OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter4OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER5
                    firstFilter5BullFvgPlottedThisWeek := true
                    firstFilter5BullFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter5OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter5OverallFvgPlottedThisMonth := true
            else if plotThisBox and fvgFilterType == SESSION_NORMAL // Handling for normal (heatmap) FVGs if they passed (though they shouldn't be restricted by first-of-period)
                boxColor = bullColor
                boxExtend = extendBox ? extend.right : extend.none
                boxRightEdge = extendBox ? fvgRightTime : time
                bullBox_ltf = box.new(left=fvgLeftTime, top=fvgTop, right=boxRightEdge, bottom=fvgBottom,
                     bgcolor=boxColor, border_color=boxColor, extend=boxExtend, xloc=xloc.bar_time)
                array.push(bullishBoxes, bullBox_ltf)
                array.push(bullishBoxesTimes, fvgRightTime)
                array.push(bullishBoxesFilterTypes, fvgFilterType)

    // Plot Bearish FVGs stored in ltf... arrays
    if array.size(ltfBearFvgTops) > 0
        for i = 0 to array.size(ltfBearFvgTops) - 1
            fvgTop = array.get(ltfBearFvgTops, i)
            fvgBottom = array.get(ltfBearFvgBottoms, i)
            fvgLeftTime = array.get(ltfBearFvgLeftTimes, i)
            fvgRightTime = array.get(ltfBearFvgRightTimes, i)
            fvgFilterType = array.get(ltfBearFvgFilterTypes, i)

            // Get filter-specific settings
            showOnlyOverall = fvgFilterType == SESSION_FILTER1 ? filter1ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER2 ? filter2ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER3 ? filter3ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER4 ? filter4ShowOnlyFirstOverall :
                              fvgFilterType == SESSION_FILTER5 ? filter5ShowOnlyFirstOverall : false
            showOnlyWeekly = fvgFilterType == SESSION_FILTER1 ? filter1ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER2 ? filter2ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER3 ? filter3ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER4 ? filter4ShowOnlyFirstWeekly :
                             fvgFilterType == SESSION_FILTER5 ? filter5ShowOnlyFirstWeekly : false
            showOnlyMonthly = fvgFilterType == SESSION_FILTER1 ? filter1ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER2 ? filter2ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER3 ? filter3ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER4 ? filter4ShowOnlyFirstMonthly :
                              fvgFilterType == SESSION_FILTER5 ? filter5ShowOnlyFirstMonthly : false

            // Get relevant state flags for this FVG's filter type
            overallMonthlyPlotted = (fvgFilterType == SESSION_FILTER1 and firstFilter1OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER2 and firstFilter2OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER3 and firstFilter3OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER4 and firstFilter4OverallFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER5 and firstFilter5OverallFvgPlottedThisMonth)
            bearMonthlyPlotted    = (fvgFilterType == SESSION_FILTER1 and firstFilter1BearFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER2 and firstFilter2BearFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER3 and firstFilter3BearFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER4 and firstFilter4BearFvgPlottedThisMonth) or (fvgFilterType == SESSION_FILTER5 and firstFilter5BearFvgPlottedThisMonth)
            overallWeeklyPlotted  = (fvgFilterType == SESSION_FILTER1 and firstFilter1OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER2 and firstFilter2OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER3 and firstFilter3OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER4 and firstFilter4OverallFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER5 and firstFilter5OverallFvgPlottedThisWeek)
            bearWeeklyPlotted     = (fvgFilterType == SESSION_FILTER1 and firstFilter1BearFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER2 and firstFilter2BearFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER3 and firstFilter3BearFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER4 and firstFilter4BearFvgPlottedThisWeek) or (fvgFilterType == SESSION_FILTER5 and firstFilter5BearFvgPlottedThisWeek)

            plotThisBox = true

            // MONTHLY CHECKS (Highest Priority)
            if showOnlyOverall and showOnlyMonthly and overallMonthlyPlotted
                plotThisBox := false
            else if not (showOnlyOverall and showOnlyMonthly) and showOnlyMonthly and bearMonthlyPlotted
                plotThisBox := false

            // WEEKLY CHECKS (Only if Monthly allows plotting)
            if plotThisBox
                if showOnlyOverall and showOnlyWeekly and overallWeeklyPlotted
                    plotThisBox := false
                else if not (showOnlyOverall and showOnlyWeekly) and showOnlyWeekly and bearWeeklyPlotted
                    plotThisBox := false

            if plotThisBox and fvgFilterType != SESSION_NORMAL
                // Determine color based on filter type
                boxColor = fvgFilterType == SESSION_FILTER1 ? filter1BearColor :
                           fvgFilterType == SESSION_FILTER2 ? filter2BearColor :
                           fvgFilterType == SESSION_FILTER3 ? filter3BearColor :
                           fvgFilterType == SESSION_FILTER4 ? filter4BearColor :
                           fvgFilterType == SESSION_FILTER5 ? filter5BearColor :
                           bearColor 

                boxExtend = extendBox ? extend.right : extend.none
                boxRightEdge = extendBox ? fvgRightTime : time

                bearBox_ltf = box.new(left=fvgLeftTime, top=fvgTop, right=boxRightEdge, bottom=fvgBottom,
                     bgcolor=boxColor, border_color=boxColor, extend=boxExtend, xloc=xloc.bar_time)
                array.push(bearishBoxes, bearBox_ltf) 
                array.push(bearishBoxesTimes, fvgRightTime) 
                array.push(bearishBoxesFilterTypes, fvgFilterType)

                // Update flags AFTER plotting for this filter type
                if fvgFilterType == SESSION_FILTER1
                    firstFilter1BearFvgPlottedThisWeek := true
                    firstFilter1BearFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter1OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter1OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER2
                    firstFilter2BearFvgPlottedThisWeek := true
                    firstFilter2BearFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter2OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter2OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER3
                    firstFilter3BearFvgPlottedThisWeek := true
                    firstFilter3BearFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter3OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter3OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER4
                    firstFilter4BearFvgPlottedThisWeek := true
                    firstFilter4BearFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter4OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter4OverallFvgPlottedThisMonth := true
                else if fvgFilterType == SESSION_FILTER5
                    firstFilter5BearFvgPlottedThisWeek := true
                    firstFilter5BearFvgPlottedThisMonth := true
                    if showOnlyOverall and showOnlyWeekly
                        firstFilter5OverallFvgPlottedThisWeek := true
                    if showOnlyOverall and showOnlyMonthly
                        firstFilter5OverallFvgPlottedThisMonth := true
            else if plotThisBox and fvgFilterType == SESSION_NORMAL 
                boxColor = bearColor // No special flags for SESSION_NORMAL plotting
                boxExtend = extendBox ? extend.right : extend.none
                boxRightEdge = extendBox ? fvgRightTime : time
                bearBox_ltf = box.new(left=fvgLeftTime, top=fvgTop, right=boxRightEdge, bottom=fvgBottom,
                     bgcolor=boxColor, border_color=boxColor, extend=boxExtend, xloc=xloc.bar_time)
                array.push(bearishBoxes, bearBox_ltf)
                array.push(bearishBoxesTimes, fvgRightTime)
                array.push(bearishBoxesFilterTypes, fvgFilterType)

    // --- Update State for next HTF bar (Crucial Step 7 from Guide) ---
    int fetchedSize = na(tfTime) ? 0 : array.size(tfTime)

    if fetchedSize >= 2
        // Store last two candles from the *fetched* data
        prev1LTFCandleT := array.get(tfTime, fetchedSize - 1)
        prev1LTFCandleH := array.get(tfHigh, fetchedSize - 1)
        prev1LTFCandleL := array.get(tfLow,  fetchedSize - 1)
        prev2LTFCandleT := array.get(tfTime, fetchedSize - 2)
        prev2LTFCandleH := array.get(tfHigh, fetchedSize - 2)
        prev2LTFCandleL := array.get(tfLow,  fetchedSize - 2)
    else if fetchedSize == 1
        // Store last one, reset older state
        prev1LTFCandleT := array.get(tfTime, 0)
        prev1LTFCandleH := array.get(tfHigh, 0)
        prev1LTFCandleL := array.get(tfLow,  0)
        prev2LTFCandleT := na
        prev2LTFCandleH := na
        prev2LTFCandleL := na
    else // fetchedSize == 0 or na(tfTime)
        // Reset all state if no data fetched
        prev1LTFCandleT := na
        prev1LTFCandleH := na
        prev1LTFCandleL := na
        prev2LTFCandleT := na
        prev2LTFCandleH := na
        prev2LTFCandleL := na

// =========================================================================
// --- Box Cleanup & Dynamic Updates ---
// =========================================================================

// --- Helper Function: Remove Box ID from all Update Arrays ---
removeBoxFromUpdateArrays(boxId) =>
    // Bullish Update Arrays
    filter1BullIdx = array.indexof(filter1BullBoxesToUpdateRight, boxId)
    if filter1BullIdx != -1
        array.remove(filter1BullBoxesToUpdateRight, filter1BullIdx)
    filter2BullIdx = array.indexof(filter2BullBoxesToUpdateRight, boxId)
    if filter2BullIdx != -1
        array.remove(filter2BullBoxesToUpdateRight, filter2BullIdx)
    filter3BullIdx = array.indexof(filter3BullBoxesToUpdateRight, boxId)
    if filter3BullIdx != -1
        array.remove(filter3BullBoxesToUpdateRight, filter3BullIdx)
    filter4BullIdx = array.indexof(filter4BullBoxesToUpdateRight, boxId)
    if filter4BullIdx != -1
        array.remove(filter4BullBoxesToUpdateRight, filter4BullIdx)
    filter5BullIdx = array.indexof(filter5BullBoxesToUpdateRight, boxId)
    if filter5BullIdx != -1
        array.remove(filter5BullBoxesToUpdateRight, filter5BullIdx)
    normBullIdx = array.indexof(normalBullBoxesToUpdateRight, boxId)
    if normBullIdx != -1
        array.remove(normalBullBoxesToUpdateRight, normBullIdx)
    // Bearish Update Arrays
    filter1BearIdx = array.indexof(filter1BearBoxesToUpdateRight, boxId)
    if filter1BearIdx != -1
        array.remove(filter1BearBoxesToUpdateRight, filter1BearIdx)
    filter2BearIdx = array.indexof(filter2BearBoxesToUpdateRight, boxId)
    if filter2BearIdx != -1
        array.remove(filter2BearBoxesToUpdateRight, filter2BearIdx)
    filter3BearIdx = array.indexof(filter3BearBoxesToUpdateRight, boxId)
    if filter3BearIdx != -1
        array.remove(filter3BearBoxesToUpdateRight, filter3BearIdx)
    filter4BearIdx = array.indexof(filter4BearBoxesToUpdateRight, boxId)
    if filter4BearIdx != -1
        array.remove(filter4BearBoxesToUpdateRight, filter4BearIdx)
    filter5BearIdx = array.indexof(filter5BearBoxesToUpdateRight, boxId)
    if filter5BearIdx != -1
        array.remove(filter5BearBoxesToUpdateRight, filter5BearIdx)
    normBearIdx = array.indexof(normalBearBoxesToUpdateRight, boxId)
    if normBearIdx != -1
        array.remove(normalBearBoxesToUpdateRight, normBearIdx)
    true // Return value doesn't matter, just need it to be a function

// --- Stage 1: Remove boxes older than their specific cutoffTimestamp ---

// Bullish Boxes Time Cleanup
bullIndicesToDelete = array.new_int()
if array.size(bullishBoxesTimes) > 0
    for i = 0 to array.size(bullishBoxesTimes) - 1
        boxTime = array.get(bullishBoxesTimes, i)
        boxFilterType = array.get(bullishBoxesFilterTypes, i) // Get the filter type

        // Calculate the specific cutoff for this box's filter type
        boxCutoffTimestamp = currentDayStartTimestamp // Default for 0 days
        if boxFilterType == SESSION_FILTER1
            boxCutoffTimestamp := filter1MaxDaysBack > 0 ? currentDayStartTimestamp - filter1MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER2
            boxCutoffTimestamp := filter2MaxDaysBack > 0 ? currentDayStartTimestamp - filter2MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER3
            boxCutoffTimestamp := filter3MaxDaysBack > 0 ? currentDayStartTimestamp - filter3MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER4
            boxCutoffTimestamp := filter4MaxDaysBack > 0 ? currentDayStartTimestamp - filter4MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER5
            boxCutoffTimestamp := filter5MaxDaysBack > 0 ? currentDayStartTimestamp - filter5MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_NORMAL
            boxCutoffTimestamp := normalMaxDaysBack > 0 ? currentDayStartTimestamp - normalMaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

        // Use the specific cutoff to mark for deletion
        if boxTime < boxCutoffTimestamp
            array.push(bullIndicesToDelete, i)

// Delete marked bullish boxes (iterate backwards)
if array.size(bullIndicesToDelete) > 0
    for i = array.size(bullIndicesToDelete) - 1 to 0
        indexToDelete = array.get(bullIndicesToDelete, i)
        if indexToDelete < array.size(bullishBoxes) // Sanity check
            boxToDelete = array.get(bullishBoxes, indexToDelete)
            removeBoxFromUpdateArrays(boxToDelete) // Remove from relevant update arrays
            box.delete(boxToDelete)
            array.remove(bullishBoxes, indexToDelete)
            array.remove(bullishBoxesTimes, indexToDelete)
            array.remove(bullishBoxesFilterTypes, indexToDelete) // Remove from type array too

// Bearish Boxes Time Cleanup
bearIndicesToDelete = array.new_int()
if array.size(bearishBoxesTimes) > 0
    for i = 0 to array.size(bearishBoxesTimes) - 1
        boxTime = array.get(bearishBoxesTimes, i)
        boxFilterType = array.get(bearishBoxesFilterTypes, i) // Get the filter type

        // Calculate the specific cutoff for this box's filter type
        boxCutoffTimestamp = currentDayStartTimestamp // Default for 0 days
        if boxFilterType == SESSION_FILTER1
            boxCutoffTimestamp := filter1MaxDaysBack > 0 ? currentDayStartTimestamp - filter1MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER2
            boxCutoffTimestamp := filter2MaxDaysBack > 0 ? currentDayStartTimestamp - filter2MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER3
            boxCutoffTimestamp := filter3MaxDaysBack > 0 ? currentDayStartTimestamp - filter3MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER4
            boxCutoffTimestamp := filter4MaxDaysBack > 0 ? currentDayStartTimestamp - filter4MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_FILTER5
            boxCutoffTimestamp := filter5MaxDaysBack > 0 ? currentDayStartTimestamp - filter5MaxDaysBack * MS_PER_DAY : currentDayStartTimestamp
        else if boxFilterType == SESSION_NORMAL
            boxCutoffTimestamp := normalMaxDaysBack > 0 ? currentDayStartTimestamp - normalMaxDaysBack * MS_PER_DAY : currentDayStartTimestamp

        // Use the specific cutoff to mark for deletion
        if boxTime < boxCutoffTimestamp
            array.push(bearIndicesToDelete, i)

// Delete marked bearish boxes (iterate backwards)
if array.size(bearIndicesToDelete) > 0
    for i = array.size(bearIndicesToDelete) - 1 to 0
        indexToDelete = array.get(bearIndicesToDelete, i)
        if indexToDelete < array.size(bearishBoxes) // Sanity check
            boxToDelete = array.get(bearishBoxes, indexToDelete)
            removeBoxFromUpdateArrays(boxToDelete) // Remove from relevant update arrays
            box.delete(boxToDelete)
            array.remove(bearishBoxes, indexToDelete)
            array.remove(bearishBoxesTimes, indexToDelete)
            array.remove(bearishBoxesFilterTypes, indexToDelete) // Remove from type array too

// --- Stage 2: Enforce maxBoxes limit on remaining boxes ---

while array.size(bullishBoxes) > maxBoxes
    boxToDelete = array.get(bullishBoxes, 0)
    removeBoxFromUpdateArrays(boxToDelete) // Remove from update arrays
    box.delete(array.shift(bullishBoxes))
    array.shift(bullishBoxesTimes)
    array.shift(bullishBoxesFilterTypes) // Remove from type array too

while array.size(bearishBoxes) > maxBoxes
    boxToDelete = array.get(bearishBoxes, 0)
    removeBoxFromUpdateArrays(boxToDelete) // Remove from update arrays
    box.delete(array.shift(bearishBoxes))
    array.shift(bearishBoxesTimes)
    array.shift(bearishBoxesFilterTypes) // Remove from type array too

// --- Stage 3: Dynamically update right edge (Base TF chart, realtime only) ---
if isChartBaseTimeframe and barstate.isrealtime
    // Update Filter 1 Boxes
    if array.size(filter1BullBoxesToUpdateRight) > 0
        targetRightIndex = filter1ExtendLength == 0 ? bar_index : bar_index + filter1ExtendLength
        for i = 0 to array.size(filter1BullBoxesToUpdateRight) - 1
            box.set_right(array.get(filter1BullBoxesToUpdateRight, i), targetRightIndex)
    if array.size(filter1BearBoxesToUpdateRight) > 0
        targetRightIndex = filter1ExtendLength == 0 ? bar_index : bar_index + filter1ExtendLength
        for i = 0 to array.size(filter1BearBoxesToUpdateRight) - 1
            box.set_right(array.get(filter1BearBoxesToUpdateRight, i), targetRightIndex)
    // Update Filter 2 Boxes
    if array.size(filter2BullBoxesToUpdateRight) > 0
        targetRightIndex = filter2ExtendLength == 0 ? bar_index : bar_index + filter2ExtendLength
        for i = 0 to array.size(filter2BullBoxesToUpdateRight) - 1
            box.set_right(array.get(filter2BullBoxesToUpdateRight, i), targetRightIndex)
    if array.size(filter2BearBoxesToUpdateRight) > 0
        targetRightIndex = filter2ExtendLength == 0 ? bar_index : bar_index + filter2ExtendLength
        for i = 0 to array.size(filter2BearBoxesToUpdateRight) - 1
            box.set_right(array.get(filter2BearBoxesToUpdateRight, i), targetRightIndex)
    // Update Filter 3 Boxes
    if array.size(filter3BullBoxesToUpdateRight) > 0
        targetRightIndex = filter3ExtendLength == 0 ? bar_index : bar_index + filter3ExtendLength
        for i = 0 to array.size(filter3BullBoxesToUpdateRight) - 1
            box.set_right(array.get(filter3BullBoxesToUpdateRight, i), targetRightIndex)
    if array.size(filter3BearBoxesToUpdateRight) > 0
        targetRightIndex = filter3ExtendLength == 0 ? bar_index : bar_index + filter3ExtendLength
        for i = 0 to array.size(filter3BearBoxesToUpdateRight) - 1
            box.set_right(array.get(filter3BearBoxesToUpdateRight, i), targetRightIndex)
    // Update Filter 4 Boxes
    if array.size(filter4BullBoxesToUpdateRight) > 0
        targetRightIndex = filter4ExtendLength == 0 ? bar_index : bar_index + filter4ExtendLength
        for i = 0 to array.size(filter4BullBoxesToUpdateRight) - 1
            box.set_right(array.get(filter4BullBoxesToUpdateRight, i), targetRightIndex)
    if array.size(filter4BearBoxesToUpdateRight) > 0
        targetRightIndex = filter4ExtendLength == 0 ? bar_index : bar_index + filter4ExtendLength
        for i = 0 to array.size(filter4BearBoxesToUpdateRight) - 1
            box.set_right(array.get(filter4BearBoxesToUpdateRight, i), targetRightIndex)
    // Update Filter 5 Boxes
    if array.size(filter5BullBoxesToUpdateRight) > 0
        targetRightIndex = filter5ExtendLength == 0 ? bar_index : bar_index + filter5ExtendLength
        for i = 0 to array.size(filter5BullBoxesToUpdateRight) - 1
            box.set_right(array.get(filter5BullBoxesToUpdateRight, i), targetRightIndex)
    if array.size(filter5BearBoxesToUpdateRight) > 0
        targetRightIndex = filter5ExtendLength == 0 ? bar_index : bar_index + filter5ExtendLength
        for i = 0 to array.size(filter5BearBoxesToUpdateRight) - 1
            box.set_right(array.get(filter5BearBoxesToUpdateRight, i), targetRightIndex)
    // Update Normal Boxes
    if array.size(normalBullBoxesToUpdateRight) > 0
        targetRightIndex = normalExtendLength == 0 ? bar_index : bar_index + normalExtendLength
        for i = 0 to array.size(normalBullBoxesToUpdateRight) - 1
            box.set_right(array.get(normalBullBoxesToUpdateRight, i), targetRightIndex)
    if array.size(normalBearBoxesToUpdateRight) > 0
        targetRightIndex = normalExtendLength == 0 ? bar_index : bar_index + normalExtendLength
        for i = 0 to array.size(normalBearBoxesToUpdateRight) - 1
            box.set_right(array.get(normalBearBoxesToUpdateRight, i), targetRightIndex)

// --- END ---
