//@version=5

// Declare indicator meta (overlay on price chart)
indicator("C2 Cycle Alert", shorttitle = "C2 Alert", overlay = true)

// =============================================================================
//  C2 Cycle Alert Indicator
//  ------------------------
//  • Detects when a C2 cycle is realised for the supported Ghost sessions.
//  • Raises two alertconditions:
//      1)  C2_Bearish  → price expanded UP from the session LOW ("up" anchor).
//      2)  C2_Bullish  → price expanded DOWN from the session HIGH ("down" anchor).
//  • An optional ghost-line pair is drawn for visual reference.
//  • Relies on the GhostMMXM core library for session management & target sizing.
// =============================================================================

import Trades-Dont-Lie/GhostMMXM_Core/9 as core

// -----------------------------------------------------------------------------
// ⛭   USER SETTINGS
// -----------------------------------------------------------------------------

SessGrp     = "Enable Sessions"
AlphaEn     = input.bool(true , "Alpha"  , group = SessGrp)
BravoEn     = input.bool(true , "Bravo"  , group = SessGrp)
CharlieEn   = input.bool(true , "Charlie", group = SessGrp)
DeltaEn     = input.bool(true , "Delta"  , group = SessGrp)
EchoEn      = input.bool(true , "Echo"   , group = SessGrp)
FoxtrotEn   = input.bool(true , "Foxtrot", group = SessGrp)
GolfEn      = input.bool(true , "Golf"   , group = SessGrp)
HotelEn     = input.bool(true , "Hotel"  , group = SessGrp)
IndiaEn     = input.bool(true , "India"  , group = SessGrp)
JulietEn    = input.bool(true , "Juliet" , group = SessGrp)
KiloEn      = input.bool(true , "Kilo"   , group = SessGrp)
LimaEn      = input.bool(true , "Lima"   , group = SessGrp)
ADR_En      = input.bool(true , "ADR"    , group = SessGrp)
ODR_En      = input.bool(true , "ODR"    , group = SessGrp)
RDR_En      = input.bool(true , "RDR"    , group = SessGrp)
DailyEn     = input.bool(true , "Daily"  , group = SessGrp)
WeeklyEn    = input.bool(false, "Weekly" , group = SessGrp)
MonthlyEn   = input.bool(false, "Monthly", group = SessGrp)

ShowLines   = input.bool(true , "Draw Ghost Lines", group = "Appearance")
LineColUp   = input.color(color.new(color.green, 0), "Ghost ‑ Bullish (DOWN)" , group = "Appearance")
LineColDn   = input.color(color.new(color.red  , 0), "Ghost ‑ Bearish (UP)"  , group = "Appearance")
LineStyle   = input.string("dotted", "Style", options = ["solid","dotted","dashed"], group = "Appearance")
LineWidth   = input.int(2, "Width", minval = 1, maxval = 4, group = "Appearance")
ShowGhostLabels = input.bool(true, "Show Ghost Labels", group = "Appearance")
GhostLabelSize  = input.string("small", "Label Size", options=["tiny","small","normal","large","huge"], group="Appearance")

// -----------------------------------------------------------------------------
// ❑   SESSION CONFIGURATION
// -----------------------------------------------------------------------------

var array<core.SessionConfig> CFGS = array.new<core.SessionConfig>()
var array<core.SessionState>  STS  = array.new<core.SessionState>()

// Declare alert and ghost line tracking arrays at global scope
var alertSent      = array.new<bool>()
var ghostUpLines   = array.new<line>()
var ghostDownLines = array.new<line>()
var ghostUpLabels   = array.new<label>()
var ghostDownLabels = array.new<label>()
var ghostUpPrices   = array.new<float>()
var ghostDownPrices = array.new<float>()
var ghostBoxes      = array.new<box>()

// per-session alert flags (set per bar)
var array<bool> bearFlags = array.new<bool>()
var array<bool> bullFlags = array.new<bool>()

// Utility to push config & matching blank state
a_push(string _name, string _spec, bool _en, int _endH, int _endM) =>
    array.push(CFGS, core.newSessionConfig(_name, _spec, _en, _endH, _endM))
    array.push(STS , core.newSessionState())

if barstate.isfirst
    // Intraday (Ghost base model)
    a_push("Alpha"  , "18:45-21:15" , AlphaEn  , 21, 15)
    a_push("Bravo"  , "21:30-00:00" , BravoEn  , 0 , 0 )
    a_push("Charlie", "21:30-02:45" , CharlieEn, 2 , 45)
    a_push("Delta"  , "00:15-02:45" , DeltaEn  , 2 , 45)
    a_push("Echo"   , "03:00-05:45" , EchoEn   , 5 , 45)
    a_push("Foxtrot", "06:00-08:15" , FoxtrotEn, 8 , 15)
    a_push("Golf"   , "08:45-11:15" , GolfEn   , 11, 15)
    a_push("Hotel"  , "11:30-14:00" , HotelEn  , 14, 0 )
    a_push("India"  , "11:30-14:45" , IndiaEn  , 14, 45)
    a_push("Juliet" , "14:15-16:45" , JulietEn , 16, 45)
    // HTF / Parent
    a_push("Kilo"   , "04:30-16:00" , KiloEn   , 16, 0 )
    a_push("Lima"   , "11:30-16:45" , LimaEn   , 16, 45)
    a_push("ADR"    , "19:30-02:00" , ADR_En   , 2 , 0 )
    a_push("ODR"    , "03:00-08:30" , ODR_En   , 8 , 30)
    a_push("RDR"    , "09:30-16:00" , RDR_En   , 16, 0 )
    // Extended
    a_push("Daily"  , "18:00-18:00" , DailyEn  , 18, 0 )
    a_push("Weekly" , "SUN18:00-SUN18:00", WeeklyEn , 18, 0)
    a_push("Monthly", "MONTHLY18:00-MONTHLY18:00", MonthlyEn, 18, 0)

    // Allocate per-session alert flags
    int _n = array.size(CFGS)
    alertSent      := array.new<bool>(_n, false)
    ghostUpLines   := array.new<line>(_n, na)
    ghostDownLines := array.new<line>(_n, na)
    ghostUpLabels   := array.new<label>(_n, na)
    ghostDownLabels := array.new<label>(_n, na)
    ghostUpPrices   := array.new<float>(_n, na)
    ghostDownPrices := array.new<float>(_n, na)
    ghostBoxes      := array.new<box>(_n, na)

    // Allocate per-session per-bar alert flags
    bearFlags     := array.new<bool>(_n, false)
    bullFlags     := array.new<bool>(_n, false)

// -----------------------------------------------------------------------------
// ◼   PROCESS EACH BAR
// -----------------------------------------------------------------------------

const string TZ = "America/New_York"

// Aggregated alert flags
bool bearAlert = false
bool bullAlert = false

for idx = 0 to array.size(CFGS)-1 by 1
    cfg = array.get(CFGS, idx)
    st  = array.get(STS , idx)

    // Update session state
    st := core.updateSession(st, cfg, TZ)

    // Capture previous A1 extremes BEFORE we include this bar
    float prA1Hi = st.a1_highWick
    float prA1Lo = st.a1_lowWick

    // (updateSession already updates extremes for active bar)
    // But we still need to guarantee current bar incorporated (high/low handled inside updateSession).

    // Detect C2
    c2Res = core.detectC2Cycle(st, prA1Hi, prA1Lo)

    if c2Res.hit and not array.get(alertSent, idx)
        // Mark so we don't fire again for this session instance
        array.set(alertSent, idx, true)

        // Determine direction: anchored UP (from low) or DOWN (from high)
        bool dirUp = na(c2Res.bottomPrice) ? false : math.abs(c2Res.bottomPrice - st.a1_lowWick) <= syminfo.mintick * 2

        if dirUp
            bearAlert := true
            array.set(bearFlags, idx, true)
        else
            bullAlert := true
            array.set(bullFlags, idx, true)

        // Draw ghost lines (optional)
        if ShowLines
            // Clean old if any
            lnUp  = array.get(ghostUpLines , idx)
            lnDn  = array.get(ghostDownLines, idx)
            lbUp  = array.get(ghostUpLabels, idx)
            lbDn  = array.get(ghostDownLabels, idx)
            bxOld = array.get(ghostBoxes, idx)
            // Delete previous drawings
            line.delete(lnUp)
            line.delete(lnDn)
            label.delete(lbUp)
            label.delete(lbDn)
            box.delete(bxOld)

            float upPrice = c2Res.bottomPrice + st.targetC2   // upper boundary
            float dnPrice = c2Res.topPrice    - st.targetC2   // lower boundary
            if dirUp // up expansion – real upper price = topPrice
                upPrice := c2Res.topPrice
                dnPrice := c2Res.bottomPrice
            else
                upPrice := c2Res.topPrice
                dnPrice := c2Res.bottomPrice
            // Build line end far in future (100 bars)
            int tfms = timeframe.in_seconds(timeframe.period) * 1000
            int right = time + tfms * 100
            styleConst = line.style_solid
            if LineStyle == "dotted"
                styleConst := line.style_dotted
            else if LineStyle == "dashed"
                styleConst := line.style_dashed

            // Draw labeled ghost lines using library helper
            string upTxt = cfg.name + " C2↑"
            string dnTxt = cfg.name + " C2↓"

            [ln1, lbl1] = core.updateGhostLineWithLabel(na, na, st.startTime, upPrice, right, LineColUp, styleConst, LineWidth, ShowGhostLabels, upTxt, GhostLabelSize, "right", 0.2, color.white)
            [ln2, lbl2] = core.updateGhostLineWithLabel(na, na, st.startTime, dnPrice, right, LineColDn, styleConst, LineWidth, ShowGhostLabels, dnTxt, GhostLabelSize, "right", 0.2, color.white)

            // Create box to span the C2 range
            bx = box.new(st.startTime, upPrice, right, dnPrice, bgcolor = color.new(color.yellow, 90), border_color = color.new(color.yellow, 60), xloc = xloc.bar_time)

            array.set(ghostUpLines , idx, ln1)
            array.set(ghostDownLines, idx, ln2)
            array.set(ghostUpLabels , idx, lbl1)
            array.set(ghostDownLabels, idx, lbl2)
            array.set(ghostUpPrices , idx, upPrice)
            array.set(ghostDownPrices, idx, dnPrice)
            array.set(ghostBoxes     , idx, bx)
    
    // Reset alert flag when NEW session instance starts
    if st.isFirstBar
        array.set(alertSent, idx, false)
        // delete old lines
        line.delete(array.get(ghostUpLines , idx))
        line.delete(array.get(ghostDownLines, idx))
        label.delete(array.get(ghostUpLabels , idx))
        label.delete(array.get(ghostDownLabels, idx))
        box.delete(array.get(ghostBoxes, idx))
        array.set(ghostUpLines , idx, na)
        array.set(ghostDownLines, idx, na)
        array.set(ghostUpLabels , idx, na)
        array.set(ghostDownLabels, idx, na)
        array.set(ghostBoxes, idx, na)
        array.set(ghostUpPrices, idx, na)
        array.set(ghostDownPrices, idx, na)

    // write back updated state
    array.set(STS, idx, st)

    // Continuously extend C2 box (if exists) to current bar so it mirrors Ghost optimized behaviour
    bxCurr = array.get(ghostBoxes, idx)
    if not na(bxCurr)
        box.set_right(bxCurr, time)

    // -----------------------------------------------------------------
    // ◇   SIMPLE MITIGATION: remove ghost lines/labels/boxes if price hits
    // -----------------------------------------------------------------

    if ShowLines and not na(array.get(ghostUpLines, idx))
        upP = array.get(ghostUpPrices, idx)
        dnP = array.get(ghostDownPrices, idx)
        hitUp = (not na(upP)) and high >= upP
        hitDn = (not na(dnP)) and low  <= dnP

        if hitUp or hitDn
            // Remove ghost lines & labels; keep box for reference
            line.delete(array.get(ghostUpLines, idx))
            line.delete(array.get(ghostDownLines, idx))
            label.delete(array.get(ghostUpLabels, idx))
            label.delete(array.get(ghostDownLabels, idx))

            array.set(ghostUpLines, idx, na)
            array.set(ghostDownLines, idx, na)
            array.set(ghostUpLabels, idx, na)
            array.set(ghostDownLabels, idx, na)
            array.set(ghostUpPrices, idx, na)
            array.set(ghostDownPrices, idx, na)

    // Reset per-session flags for this bar
    if array.size(bearFlags) > idx
        array.set(bearFlags, idx, false)
        array.set(bullFlags, idx, false)

// -----------------------------------------------------------------------------
// ⚑   ALERT CONDITIONS
// -----------------------------------------------------------------------------

alertcondition(bearAlert, title = "C2_Bearish", message = "C2 Bearish")
alertcondition(bullAlert, title = "C2_Bullish", message = "C2 Bullish")

// Provide simple plots for visual confirmation (optional)
plotshape(bearAlert, title = "Bearish Hit", style = shape.triangledown, location = location.abovebar, color = color.red , size = size.tiny)
plotshape(bullAlert, title = "Bullish Hit", style = shape.triangleup  , location = location.belowbar, color = color.green, size = size.tiny)

// -----------------------------------------------------------------------------
// ⚑   SESSION-SPECIFIC ALERT BOOLEANS
// -----------------------------------------------------------------------------

// Map fixed indices to names (based on push order)
const int IDX_ALPHA = 0, IDX_BRAVO = 1, IDX_CHARLIE = 2, IDX_DELTA = 3, IDX_ECHO = 4, IDX_FOXTROT = 5, IDX_GOLF = 6, IDX_HOTEL = 7, IDX_INDIA = 8, IDX_JULIET = 9, IDX_KILO = 10, IDX_LIMA = 11, IDX_ADR = 12, IDX_ODR = 13, IDX_RDR = 14, IDX_DAILY = 15, IDX_WEEKLY = 16, IDX_MONTHLY = 17

// Extract series bools for each session this bar
alphaBear  = array.size(bearFlags) > IDX_ALPHA  ? array.get(bearFlags, IDX_ALPHA)  : false
alphaBull  = array.size(bullFlags) > IDX_ALPHA  ? array.get(bullFlags, IDX_ALPHA)  : false
bravoBear  = array.size(bearFlags) > IDX_BRAVO  ? array.get(bearFlags, IDX_BRAVO)  : false
bravoBull  = array.size(bullFlags) > IDX_BRAVO  ? array.get(bullFlags, IDX_BRAVO)  : false
charlieBear= array.size(bearFlags) > IDX_CHARLIE? array.get(bearFlags, IDX_CHARLIE): false
charlieBull= array.size(bullFlags) > IDX_CHARLIE? array.get(bullFlags, IDX_CHARLIE): false
deltaBear  = array.size(bearFlags) > IDX_DELTA  ? array.get(bearFlags, IDX_DELTA)  : false
deltaBull  = array.size(bullFlags) > IDX_DELTA  ? array.get(bullFlags, IDX_DELTA)  : false
echoBear   = array.size(bearFlags) > IDX_ECHO   ? array.get(bearFlags, IDX_ECHO)   : false
echoBull   = array.size(bullFlags) > IDX_ECHO   ? array.get(bullFlags, IDX_ECHO)   : false
foxtrotBear= array.size(bearFlags) > IDX_FOXTROT? array.get(bearFlags, IDX_FOXTROT): false
foxtrotBull= array.size(bullFlags) > IDX_FOXTROT? array.get(bullFlags, IDX_FOXTROT): false
golfBear   = array.size(bearFlags) > IDX_GOLF   ? array.get(bearFlags, IDX_GOLF)   : false
golfBull   = array.size(bullFlags) > IDX_GOLF   ? array.get(bullFlags, IDX_GOLF)   : false
hotelBear  = array.size(bearFlags) > IDX_HOTEL  ? array.get(bearFlags, IDX_HOTEL)  : false
hotelBull  = array.size(bullFlags) > IDX_HOTEL  ? array.get(bullFlags, IDX_HOTEL)  : false
indiaBear  = array.size(bearFlags) > IDX_INDIA  ? array.get(bearFlags, IDX_INDIA)  : false
indiaBull  = array.size(bullFlags) > IDX_INDIA  ? array.get(bullFlags, IDX_INDIA)  : false
julietBear = array.size(bearFlags) > IDX_JULIET ? array.get(bearFlags, IDX_JULIET) : false
julietBull = array.size(bullFlags) > IDX_JULIET ? array.get(bullFlags, IDX_JULIET) : false

// -----------------------------------------------------------------------------
// ⚑   ALERT CONDITIONS (SESSION SPECIFIC)
// -----------------------------------------------------------------------------

alertcondition(alphaBear , title="C2_Bearish_Alpha" , message="Alpha C2 Bearish")
alertcondition(alphaBull , title="C2_Bullish_Alpha" , message="Alpha C2 Bullish")
alertcondition(bravoBear , title="C2_Bearish_Bravo" , message="Bravo C2 Bearish")
alertcondition(bravoBull , title="C2_Bullish_Bravo" , message="Bravo C2 Bullish")
alertcondition(charlieBear , title="C2_Bearish_Charlie" , message="Charlie C2 Bearish")
alertcondition(charlieBull , title="C2_Bullish_Charlie" , message="Charlie C2 Bullish")
alertcondition(deltaBear , title="C2_Bearish_Delta" , message="Delta C2 Bearish")
alertcondition(deltaBull , title="C2_Bullish_Delta" , message="Delta C2 Bullish")
alertcondition(echoBear , title="C2_Bearish_Echo" , message="Echo C2 Bearish")
alertcondition(echoBull , title="C2_Bullish_Echo" , message="Echo C2 Bullish")
alertcondition(foxtrotBear , title="C2_Bearish_Foxtrot" , message="Foxtrot C2 Bearish")
alertcondition(foxtrotBull , title="C2_Bullish_Foxtrot" , message="Foxtrot C2 Bullish")
alertcondition(golfBear , title="C2_Bearish_Golf" , message="Golf C2 Bearish")
alertcondition(golfBull , title="C2_Bullish_Golf" , message="Golf C2 Bullish")
alertcondition(hotelBear , title="C2_Bearish_Hotel" , message="Hotel C2 Bearish")
alertcondition(hotelBull , title="C2_Bullish_Hotel" , message="Hotel C2 Bullish")
alertcondition(indiaBear , title="C2_Bearish_India" , message="India C2 Bearish")
alertcondition(indiaBull , title="C2_Bullish_India" , message="India C2 Bullish")
alertcondition(julietBear , title="C2_Bearish_Juliet" , message="Juliet C2 Bearish")
alertcondition(julietBull , title="C2_Bullish_Juliet" , message="Juliet C2 Bullish")

// -----------------------------------------------------------------------------
// END 