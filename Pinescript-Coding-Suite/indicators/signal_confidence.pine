//@version=6
indicator("Signal Confidence Engine", shorttitle="SCE", overlay=false, precision=2)

// === IMPORTS ===
import jason5480/tts_convention/7 as conv

// === INPUTS ===
// Timeframe Analysis
tf1 = input.timeframe("5", "Timeframe 1", group="Multi-Timeframe Analysis")
tf2 = input.timeframe("15", "Timeframe 2", group="Multi-Timeframe Analysis")  
tf3 = input.timeframe("1H", "Timeframe 3", group="Multi-Timeframe Analysis")

// External Signals
signal_1 = int(input.source(defval=close, title="Signal 1 (TTS Format)", group="Signal Inputs"))
signal_2 = int(input.source(defval=close, title="Signal 2 (TTS Format)", group="Signal Inputs"))
signal_3 = int(input.source(defval=close, title="Signal 3 (TTS Format)", group="Signal Inputs"))

// Weights
weight_1 = input.float(1.0, "Signal 1 Weight", minval=0.0, maxval=2.0, step=0.1, group="Signal Weights")
weight_2 = input.float(1.0, "Signal 2 Weight", minval=0.0, maxval=2.0, step=0.1, group="Signal Weights")
weight_3 = input.float(1.0, "Signal 3 Weight", minval=0.0, maxval=2.0, step=0.1, group="Signal Weights")

// Confidence Thresholds
high_confidence_threshold = input.float(75.0, "High Confidence Threshold (%)", minval=50.0, maxval=100.0, group="Thresholds")
medium_confidence_threshold = input.float(50.0, "Medium Confidence Threshold (%)", minval=25.0, maxval=75.0, group="Thresholds")

// Technical Analysis Inputs
ema_fast = input.int(9, "Fast EMA", minval=1, group="Technical Analysis")
ema_slow = input.int(21, "Slow EMA", minval=1, group="Technical Analysis")
rsi_period = input.int(14, "RSI Period", minval=2, group="Technical Analysis")
macd_fast = input.int(12, "MACD Fast", minval=1, group="Technical Analysis")
macd_slow = input.int(26, "MACD Slow", minval=1, group="Technical Analysis")
macd_signal = input.int(9, "MACD Signal", minval=1, group="Technical Analysis")

// === FUNCTIONS ===

// Function to normalize signal values to -1, 0, 1
normalize_signal(int signal_value) =>
    if signal_value > 0
        1
    else if signal_value < 0
        -1
    else
        0

// Function to calculate technical analysis score
calc_technical_score() =>
    // EMA Analysis
    ema_fast_val = ta.ema(close, ema_fast)
    ema_slow_val = ta.ema(close, ema_slow)
    ema_score = ema_fast_val > ema_slow_val ? 1 : -1
    
    // RSI Analysis  
    rsi_val = ta.rsi(close, rsi_period)
    rsi_score = rsi_val > 50 ? 1 : -1
    
    // MACD Analysis
    [macd_line, signal_line, _] = ta.macd(close, macd_fast, macd_slow, macd_signal)
    macd_score = macd_line > signal_line ? 1 : -1
    
    // Volume Analysis
    volume_ma = ta.sma(volume, 20)
    volume_score = volume > volume_ma ? 1 : -1
    
    // Price Action
    price_score = close > open ? 1 : -1
    
    // Average technical score
    (ema_score + rsi_score + macd_score + volume_score + price_score) / 5

// === MAIN CALCULATIONS ===

// Get multi-timeframe signals
tf1_signal = request.security(syminfo.tickerid, tf1, signal_1)
tf2_signal = request.security(syminfo.tickerid, tf2, signal_2) 
tf3_signal = request.security(syminfo.tickerid, tf3, signal_3)

// Normalize signals
norm_signal_1 = normalize_signal(signal_1)
norm_signal_2 = normalize_signal(signal_2)
norm_signal_3 = normalize_signal(signal_3)
norm_tf1_signal = normalize_signal(tf1_signal)
norm_tf2_signal = normalize_signal(tf2_signal)
norm_tf3_signal = normalize_signal(tf3_signal)

// Calculate technical analysis score
technical_score = calc_technical_score()

// Calculate weighted signal score
signal_score = (norm_signal_1 * weight_1 + norm_signal_2 * weight_2 + norm_signal_3 * weight_3) / (weight_1 + weight_2 + weight_3)

// Calculate multi-timeframe confluence
mtf_score = (norm_tf1_signal + norm_tf2_signal + norm_tf3_signal) / 3

// Combined confidence score (0-100%)
raw_confidence = (math.abs(signal_score) * 0.4 + math.abs(mtf_score) * 0.4 + math.abs(technical_score) * 0.2) * 100
confidence_score = math.min(raw_confidence, 100)

// Determine signal direction
signal_direction = signal_score > 0 ? "BULLISH" : signal_score < 0 ? "BEARISH" : "NEUTRAL"

// Confidence level
confidence_level = confidence_score >= high_confidence_threshold ? "HIGH" : 
                  confidence_score >= medium_confidence_threshold ? "MEDIUM" : "LOW"

// === VISUALIZATION ===

// Main confidence plot
plot(confidence_score, title="Confidence Score", color=color.blue, linewidth=2)

// Threshold lines
hline(high_confidence_threshold, "High Confidence", color=color.green, linestyle=hline.style_dashed)
hline(medium_confidence_threshold, "Medium Confidence", color=color.orange, linestyle=hline.style_dashed)
hline(25, "Low Confidence", color=color.red, linestyle=hline.style_dashed)

// Background color based on confidence and direction
bg_color = signal_direction == "BULLISH" and confidence_level == "HIGH" ? color.new(color.green, 90) :
           signal_direction == "BEARISH" and confidence_level == "HIGH" ? color.new(color.red, 90) :
           signal_direction == "BULLISH" and confidence_level == "MEDIUM" ? color.new(color.green, 95) :
           signal_direction == "BEARISH" and confidence_level == "MEDIUM" ? color.new(color.red, 95) : 
           color.new(color.gray, 98)

bgcolor(bg_color)

// Signal strength bar
plot(signal_score * 50 + 50, title="Signal Strength", color=signal_score > 0 ? color.green : color.red, display=display.data_window)

// Multi-timeframe confluence
plot(mtf_score * 30 + 70, title="MTF Confluence", color=color.purple, display=display.data_window)

// === TABLE DISPLAY ===
if barstate.islast
    var table info_table = table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=1)
    
    table.cell(info_table, 0, 0, "Metric", bgcolor=color.gray, text_color=color.white, text_size=size.small)
    table.cell(info_table, 1, 0, "Value", bgcolor=color.gray, text_color=color.white, text_size=size.small)
    
    table.cell(info_table, 0, 1, "Confidence", text_size=size.small)
    table.cell(info_table, 1, 1, str.tostring(confidence_score, "#.##") + "%", 
               text_color=confidence_level == "HIGH" ? color.green : confidence_level == "MEDIUM" ? color.orange : color.red, text_size=size.small)
    
    table.cell(info_table, 0, 2, "Direction", text_size=size.small)
    table.cell(info_table, 1, 2, signal_direction, 
               text_color=signal_direction == "BULLISH" ? color.green : signal_direction == "BEARISH" ? color.red : color.gray, text_size=size.small)
    
    table.cell(info_table, 0, 3, "Level", text_size=size.small)
    table.cell(info_table, 1, 3, confidence_level, text_size=size.small)
    
    table.cell(info_table, 0, 4, "Signal Score", text_size=size.small)
    table.cell(info_table, 1, 4, str.tostring(signal_score, "#.##"), text_size=size.small)
    
    table.cell(info_table, 0, 5, "MTF Score", text_size=size.small)
    table.cell(info_table, 1, 5, str.tostring(mtf_score, "#.##"), text_size=size.small)

// === ALERTS ===
alertcondition(confidence_score >= high_confidence_threshold and signal_direction == "BULLISH", 
               "High Confidence Bullish", "High confidence bullish signal detected")
               
alertcondition(confidence_score >= high_confidence_threshold and signal_direction == "BEARISH", 
               "High Confidence Bearish", "High confidence bearish signal detected")

alertcondition(ta.crossover(confidence_score, high_confidence_threshold), 
               "Confidence Breakout", "Signal confidence crossed above high threshold")

// === OUTPUT FOR STRATEGY CONNECTION ===
plot(signal_direction == "BULLISH" and confidence_level == "HIGH" ? 1 : 
     signal_direction == "BEARISH" and confidence_level == "HIGH" ? -1 : 0, 
     title="Strategy Signal", display=display.data_window) 